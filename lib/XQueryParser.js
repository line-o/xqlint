// This file was generated on Mon Oct 1, 2018 01:59 (UTC+02) by REx v5.47 which is Copyright (c) 1979-2017 by Gunther Rademacher <grd@gmx.net>
// REx command line: XQueryParser.ebnf -ll 2 -backtrack -tree -javascript -a xqlint

                                                            // line 2 "XQueryParser.ebnf"
                                                            /* ***** BEGIN LICENSE BLOCK *****
                                                             * Distributed under the BSD license:
                                                             *
                                                             * Copyright (c) 2010, Ajax.org B.V.
                                                             * All rights reserved.
                                                             *
                                                             * Redistribution and use in source and binary forms, with or without
                                                             * modification, are permitted provided that the following conditions are met:
                                                             *     * Redistributions of source code must retain the above copyright
                                                             *       notice, this list of conditions and the following disclaimer.
                                                             *     * Redistributions in binary form must reproduce the above copyright
                                                             *       notice, this list of conditions and the following disclaimer in the
                                                             *       documentation and/or other materials provided with the distribution.
                                                             *     * Neither the name of Ajax.org B.V. nor the
                                                             *       names of its contributors may be used to endorse or promote products
                                                             *       derived from this software without specific prior written permission.
                                                             *
                                                             * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
                                                             * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                             * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                                                             * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
                                                             * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                                                             * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
                                                             * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
                                                             * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                                             * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                                                             * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                                             *
                                                             * ***** END LICENSE BLOCK ***** */

                                                            define(function(require, exports, module){
                                                            var XQueryParser = exports.XQueryParser = function XQueryParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
                                                            // line 40 "XQueryParser.js"
  var thisParser = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var begin = b;
    var end = e;
    var state = s;
    var offending = o;
    var expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};
    this.isAmbiguousInput = function() {return false;};

    this.getMessage = function()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    };
  };

  function init(source, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  this.getTokenOffset = function()
  {
    return b0;
  };

  this.getTokenEnd = function()
  {
    return e0;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.reset = function(l, b, e)
  {
    reset(l, b, e);
  };

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? XQueryParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = XQueryParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [XQueryParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var message = e.getMessage();
    var found = this.getOffendingToken(e);
    var tokenSet = this.getExpectedTokenSet(e);
    var size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Module();
    consume(26);                    // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 280:                       // 'xquery'
      lookahead2W(202);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'encoding' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'version' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 66840                 // 'xquery' 'encoding'
     || lk == 138008)               // 'xquery' 'version'
    {
      parse_VersionDecl();
    }
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    switch (l1)
    {
    case 188:                       // 'module'
      lookahead2W(195);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 97468:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    consume(280);                   // 'xquery'
    lookahead1W(118);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 130:                       // 'encoding'
      consume(130);                 // 'encoding'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      break;
    default:
      consume(269);                 // 'version'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      lookahead1W(111);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 130)                // 'encoding'
      {
        consume(130);               // 'encoding'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(11);                // StringLiteral
      }
    }
    lookahead1W(30);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(140);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    consume(188);                   // 'module'
    lookahead1W(63);                // S^WS | '(:' | 'namespace'
    consume(190);                   // 'namespace'
    lookahead1W(252);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(31);                // S^WS | '(:' | '='
    consume(61);                    // '='
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(30);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      switch (l1)
      {
      case 113:                     // 'declare'
        lookahead2W(216);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'base-uri' | 'boundary-space' | 'cast' | 'castable' | 'collection' |
                                    // 'construction' | 'contains' | 'context' | 'copy-namespaces' | 'decimal-format' |
                                    // 'default' | 'div' | 'eq' | 'except' | 'ft-option' | 'function' | 'ge' | 'gt' |
                                    // 'idiv' | 'index' | 'instance' | 'integrity' | 'intersect' | 'is' | 'le' | 'lt' |
                                    // 'mod' | 'namespace' | 'ne' | 'option' | 'or' | 'ordering' | 'revalidation' |
                                    // 'to' | 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      case 158:                     // 'import'
        lookahead2W(204);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'module' | 'ne' | 'or' |
                                    // 'schema' | 'to' | 'treat' | 'union' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 45169               // 'declare' 'base-uri'
       && lk != 46193               // 'declare' 'boundary-space'
       && lk != 52849               // 'declare' 'construction'
       && lk != 55921               // 'declare' 'copy-namespaces'
       && lk != 56945               // 'declare' 'decimal-format'
       && lk != 58481               // 'declare' 'default'
       && lk != 74865               // 'declare' 'ft-option'
       && lk != 96414               // 'import' 'module'
       && lk != 97393               // 'declare' 'namespace'
       && lk != 107121              // 'declare' 'ordering'
       && lk != 116849              // 'declare' 'revalidation'
       && lk != 118430)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 113:                     // 'declare'
        lookahead2W(180);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 58481)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 97393:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 158:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 74865:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(30);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      switch (l1)
      {
      case 113:                     // 'declare'
        lookahead2W(213);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'collection' | 'contains' | 'context' | 'div' | 'eq' |
                                    // 'except' | 'function' | 'ge' | 'gt' | 'idiv' | 'index' | 'instance' |
                                    // 'integrity' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'option' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 17009               // 'declare' '%'
       && lk != 51313               // 'declare' 'collection'
       && lk != 54385               // 'declare' 'context'
       && lk != 76913               // 'declare' 'function'
       && lk != 82033               // 'declare' 'index'
       && lk != 85105               // 'declare' 'integrity'
       && lk != 105073              // 'declare' 'option'
       && lk != 134769              // 'declare' 'updating'
       && lk != 137329)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 113:                     // 'declare'
        lookahead2W(177);           // S^WS | '%' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 54385:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 105073:                  // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(30);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    consume(54);                    // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 113:                       // 'declare'
      lookahead2W(174);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 58481)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 46193:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 45169:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 52849:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 107121:                    // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 116849:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 55921:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(35);                // S^WS | '(:' | 'boundary-space'
    consume(90);                    // 'boundary-space'
    lookahead1W(135);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 220:                       // 'preserve'
      consume(220);                 // 'preserve'
      break;
    default:
      consume(247);                 // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(48);                // S^WS | '(:' | 'default'
    consume(114);                   // 'default'
    lookahead1W(40);                // S^WS | '(:' | 'collation'
    consume(99);                    // 'collation'
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    consumeT(113);                  // 'declare'
    lookahead1W(48);                // S^WS | '(:' | 'default'
    consumeT(114);                  // 'default'
    lookahead1W(40);                // S^WS | '(:' | 'collation'
    consumeT(99);                   // 'collation'
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(34);                // S^WS | '(:' | 'base-uri'
    consume(88);                    // 'base-uri'
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(43);                // S^WS | '(:' | 'construction'
    consume(103);                   // 'construction'
    lookahead1W(135);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 247:                       // 'strip'
      consume(247);                 // 'strip'
      break;
    default:
      consume(220);                 // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(70);                // S^WS | '(:' | 'ordering'
    consume(209);                   // 'ordering'
    lookahead1W(133);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 208:                       // 'ordered'
      consume(208);                 // 'ordered'
      break;
    default:
      consume(262);                 // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(48);                // S^WS | '(:' | 'default'
    consume(114);                   // 'default'
    lookahead1W(69);                // S^WS | '(:' | 'order'
    consume(207);                   // 'order'
    lookahead1W(51);                // S^WS | '(:' | 'empty'
    consume(128);                   // 'empty'
    lookahead1W(123);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 152:                       // 'greatest'
      consume(152);                 // 'greatest'
      break;
    default:
      consume(178);                 // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    consumeT(113);                  // 'declare'
    lookahead1W(48);                // S^WS | '(:' | 'default'
    consumeT(114);                  // 'default'
    lookahead1W(69);                // S^WS | '(:' | 'order'
    consumeT(207);                  // 'order'
    lookahead1W(51);                // S^WS | '(:' | 'empty'
    consumeT(128);                  // 'empty'
    lookahead1W(123);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 152:                       // 'greatest'
      consumeT(152);                // 'greatest'
      break;
    default:
      consumeT(178);                // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'copy-namespaces'
    consume(109);                   // 'copy-namespaces'
    lookahead1W(130);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(27);                // S^WS | '(:' | ','
    consume(42);                    // ','
    lookahead1W(125);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 220:                       // 'preserve'
      consume(220);                 // 'preserve'
      break;
    default:
      consume(196);                 // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 162:                       // 'inherit'
      consume(162);                 // 'inherit'
      break;
    default:
      consume(195);                 // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(116);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 111:                       // 'decimal-format'
      consume(111);                 // 'decimal-format'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      consume(114);                 // 'default'
      lookahead1W(47);              // S^WS | '(:' | 'decimal-format'
      consume(111);                 // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(182);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 54)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(31);              // S^WS | '(:' | '='
      consume(61);                  // '='
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 112:                       // 'decimal-separator'
      consume(112);                 // 'decimal-separator'
      break;
    case 154:                       // 'grouping-separator'
      consume(154);                 // 'grouping-separator'
      break;
    case 161:                       // 'infinity'
      consume(161);                 // 'infinity'
      break;
    case 185:                       // 'minus-sign'
      consume(185);                 // 'minus-sign'
      break;
    case 69:                        // 'NaN'
      consume(69);                  // 'NaN'
      break;
    case 215:                       // 'percent'
      consume(215);                 // 'percent'
      break;
    case 214:                       // 'per-mille'
      consume(214);                 // 'per-mille'
      break;
    case 281:                       // 'zero-digit'
      consume(281);                 // 'zero-digit'
      break;
    case 121:                       // 'digit'
      consume(121);                 // 'digit'
      break;
    default:
      consume(213);                 // 'pattern-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 158:                       // 'import'
      lookahead2W(128);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 118430:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    consume(158);                   // 'import'
    lookahead1W(75);                // S^WS | '(:' | 'schema'
    consume(231);                   // 'schema'
    lookahead1W(139);               // URILiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 7)                    // URILiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(110);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 86)                   // 'at'
    {
      consume(86);                  // 'at'
      lookahead1W(17);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      for (;;)
      {
        lookahead1W(105);           // S^WS | '(:' | ',' | ';'
        if (l1 != 42)               // ','
        {
          break;
        }
        consume(42);                // ','
        lookahead1W(17);            // URILiteral | S^WS | '(:'
        consume(7);                 // URILiteral
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 190:                       // 'namespace'
      consume(190);                 // 'namespace'
      lookahead1W(252);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(31);              // S^WS | '(:' | '='
      consume(61);                  // '='
      break;
    default:
      consume(114);                 // 'default'
      lookahead1W(49);              // S^WS | '(:' | 'element'
      consume(126);                 // 'element'
      lookahead1W(63);              // S^WS | '(:' | 'namespace'
      consume(190);                 // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    consume(158);                   // 'import'
    lookahead1W(62);                // S^WS | '(:' | 'module'
    consume(188);                   // 'module'
    lookahead1W(92);                // URILiteral | S^WS | '(:' | 'namespace'
    if (l1 == 190)                  // 'namespace'
    {
      consume(190);                 // 'namespace'
      lookahead1W(252);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(31);              // S^WS | '(:' | '='
      consume(61);                  // '='
    }
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(110);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 86)                   // 'at'
    {
      consume(86);                  // 'at'
      lookahead1W(17);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      for (;;)
      {
        lookahead1W(105);           // S^WS | '(:' | ',' | ';'
        if (l1 != 42)               // ','
        {
          break;
        }
        consume(42);                // ','
        lookahead1W(17);            // URILiteral | S^WS | '(:'
        consume(7);                 // URILiteral
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(63);                // S^WS | '(:' | 'namespace'
    consume(190);                   // 'namespace'
    lookahead1W(252);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(31);                // S^WS | '(:' | '='
    consume(61);                    // '='
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(48);                // S^WS | '(:' | 'default'
    consume(114);                   // 'default'
    lookahead1W(117);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 126:                       // 'element'
      consume(126);                 // 'element'
      break;
    default:
      consume(150);                 // 'function'
    }
    lookahead1W(63);                // S^WS | '(:' | 'namespace'
    consume(190);                   // 'namespace'
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    consumeT(113);                  // 'declare'
    lookahead1W(48);                // S^WS | '(:' | 'default'
    consumeT(114);                  // 'default'
    lookahead1W(117);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 126:                       // 'element'
      consumeT(126);                // 'element'
      break;
    default:
      consumeT(150);                // 'function'
    }
    lookahead1W(63);                // S^WS | '(:' | 'namespace'
    consumeT(190);                  // 'namespace'
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
  }

  function parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(54);                // S^WS | '(:' | 'ft-option'
    consume(146);                   // 'ft-option'
    lookahead1W(83);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    consume(113);                   // 'declare'
    for (;;)
    {
      lookahead1W(172);             // S^WS | '%' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (l1 != 33                  // '%'
       && l1 != 263)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 263:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 268:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    case 150:                       // 'function'
      whitespace();
      parse_FunctionDecl();
      break;
    case 100:                       // 'collection'
      whitespace();
      parse_CollectionDecl();
      break;
    case 160:                       // 'index'
      whitespace();
      parse_IndexDecl();
      break;
    default:
      whitespace();
      parse_ICDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    consume(263);                   // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    consume(33);                    // '%'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(173);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 35)                   // '('
    {
      consume(35);                  // '('
      lookahead1W(156);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        consume(42);                // ','
        lookahead1W(156);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      consume(38);                  // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    consumeT(33);                   // '%'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(173);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 35)                   // '('
    {
      consumeT(35);                 // '('
      lookahead1W(156);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        consumeT(42);               // ','
        lookahead1W(156);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      consumeT(38);                 // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    consume(268);                   // 'variable'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(149);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(108);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 53:                        // ':='
      consume(53);                  // ':='
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(138);                 // 'external'
      lookahead1W(106);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 53)                 // ':='
      {
        consume(53);                // ':='
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(45);                // S^WS | '(:' | 'context'
    consume(106);                   // 'context'
    lookahead1W(57);                // S^WS | '(:' | 'item'
    consume(170);                   // 'item'
    lookahead1W(149);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 84)                   // 'as'
    {
      consume(84);                  // 'as'
      lookahead1W(268);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(108);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 53:                        // ':='
      consume(53);                  // ':='
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(138);                 // 'external'
      lookahead1W(106);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 53)                 // ':='
      {
        consume(53);                // ':='
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(103);             // S^WS | '(:' | ')' | ','
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(103);             // S^WS | '(:' | ')' | ','
      if (l1 != 42)                 // ','
      {
        break;
      }
      consumeT(42);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    consume(32);                    // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(145);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    consumeT(32);                   // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(145);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 84)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    consume(282);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(288);                   // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    consumeT(282);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(288);                  // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(68);                // S^WS | '(:' | 'option'
    consume(205);                   // 'option'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consumeT(42);                 // ','
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(175);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 226)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(175);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 226)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 142:                       // 'for'
      lookahead2W(143);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16526:                     // 'for' '$'
      parse_ForClause();
      break;
    case 179:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 142:                       // 'for'
      lookahead2W(143);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16526:                     // 'for' '$'
      try_ForClause();
      break;
    case 179:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 142:                       // 'for'
    case 179:                       // 'let'
      parse_InitialClause();
      break;
    case 272:                       // 'where'
      parse_WhereClause();
      break;
    case 153:                       // 'group'
      parse_GroupByClause();
      break;
    case 110:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 142:                       // 'for'
    case 179:                       // 'let'
      try_InitialClause();
      break;
    case 272:                       // 'where'
      try_WhereClause();
      break;
    case 153:                       // 'group'
      try_GroupByClause();
      break;
    case 110:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    consume(142);                   // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    consumeT(142);                  // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consumeT(42);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    consume(32);                    // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(166);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(160);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 77)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(152);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 86)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(124);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 234)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(55);                // S^WS | '(:' | 'in'
    consume(159);                   // 'in'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    consumeT(32);                   // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(166);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 84)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(160);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 77)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(152);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 86)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(124);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 234)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(55);                // S^WS | '(:' | 'in'
    consumeT(159);                  // 'in'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    consume(77);                    // 'allowing'
    lookahead1W(51);                // S^WS | '(:' | 'empty'
    consume(128);                   // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    consumeT(77);                   // 'allowing'
    lookahead1W(51);                // S^WS | '(:' | 'empty'
    consumeT(128);                  // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    consume(86);                    // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    consumeT(86);                   // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    consume(234);                   // 'score'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  function try_FTScoreVar()
  {
    consumeT(234);                  // 'score'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    consume(179);                   // 'let'
    lookahead1W(98);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(98);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    consumeT(179);                  // 'let'
    lookahead1W(98);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consumeT(42);                 // ','
      lookahead1W(98);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 32:                        // '$'
      consume(32);                  // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(107);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 84)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(29);                // S^WS | '(:' | ':='
    consume(53);                    // ':='
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    switch (l1)
    {
    case 32:                        // '$'
      consumeT(32);                 // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(107);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 84)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(29);                // S^WS | '(:' | ':='
    consumeT(53);                   // ':='
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    consume(142);                   // 'for'
    lookahead1W(137);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 257:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    consumeT(142);                  // 'for'
    lookahead1W(137);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 257:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    consume(257);                   // 'tumbling'
    lookahead1W(87);                // S^WS | '(:' | 'window'
    consume(275);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(112);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(55);                // S^WS | '(:' | 'in'
    consume(159);                   // 'in'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    if (l1 == 131                   // 'end'
     || l1 == 204)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    consumeT(257);                  // 'tumbling'
    lookahead1W(87);                // S^WS | '(:' | 'window'
    consumeT(275);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(112);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 84)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(55);                // S^WS | '(:' | 'in'
    consumeT(159);                  // 'in'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    if (l1 == 131                   // 'end'
     || l1 == 204)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    consume(240);                   // 'sliding'
    lookahead1W(87);                // S^WS | '(:' | 'window'
    consume(275);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(112);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(55);                // S^WS | '(:' | 'in'
    consume(159);                   // 'in'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    consumeT(240);                  // 'sliding'
    lookahead1W(87);                // S^WS | '(:' | 'window'
    consumeT(275);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(112);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 84)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(55);                // S^WS | '(:' | 'in'
    consumeT(159);                  // 'in'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    consume(243);                   // 'start'
    lookahead1W(165);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(85);                // S^WS | '(:' | 'when'
    consume(271);                   // 'when'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    consumeT(243);                  // 'start'
    lookahead1W(165);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(85);                // S^WS | '(:' | 'when'
    consumeT(271);                  // 'when'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 204)                  // 'only'
    {
      consume(204);                 // 'only'
    }
    lookahead1W(52);                // S^WS | '(:' | 'end'
    consume(131);                   // 'end'
    lookahead1W(165);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(85);                // S^WS | '(:' | 'when'
    consume(271);                   // 'when'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 204)                  // 'only'
    {
      consumeT(204);                // 'only'
    }
    lookahead1W(52);                // S^WS | '(:' | 'end'
    consumeT(131);                  // 'end'
    lookahead1W(165);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(85);                // S^WS | '(:' | 'when'
    consumeT(271);                  // 'when'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 32)                   // '$'
    {
      consume(32);                  // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(161);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 86)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(155);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 221)                  // 'previous'
    {
      consume(221);                 // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(32);                  // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(129);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 193)                  // 'next'
    {
      consume(193);                 // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(32);                  // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 32)                   // '$'
    {
      consumeT(32);                 // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_CurrentItem();
    }
    lookahead1W(161);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 86)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(155);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 221)                  // 'previous'
    {
      consumeT(221);                // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(32);                 // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_PreviousItem();
    }
    lookahead1W(129);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 193)                  // 'next'
    {
      consumeT(193);                // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(32);                 // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    consume(110);                   // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    consumeT(110);                  // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    consume(272);                   // 'where'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    consumeT(272);                  // 'where'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    consume(153);                   // 'group'
    lookahead1W(36);                // S^WS | '(:' | 'by'
    consume(92);                    // 'by'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    consumeT(153);                  // 'group'
    lookahead1W(36);                // S^WS | '(:' | 'by'
    consumeT(92);                   // 'by'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(178);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(178);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      consumeT(42);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    parse_GroupingVariable();
    lookahead1W(184);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 53                    // ':='
     || l1 == 84)                   // 'as'
    {
      if (l1 == 84)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(29);              // S^WS | '(:' | ':='
      consume(53);                  // ':='
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    if (l1 == 99)                   // 'collation'
    {
      consume(99);                  // 'collation'
      lookahead1W(17);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    try_GroupingVariable();
    lookahead1W(184);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 53                    // ':='
     || l1 == 84)                   // 'as'
    {
      if (l1 == 84)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(29);              // S^WS | '(:' | ':='
      consumeT(53);                 // ':='
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    if (l1 == 99)                   // 'collation'
    {
      consumeT(99);                 // 'collation'
      lookahead1W(17);              // URILiteral | S^WS | '(:'
      consumeT(7);                  // URILiteral
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    consume(32);                    // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    consumeT(32);                   // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 207:                       // 'order'
      consume(207);                 // 'order'
      lookahead1W(36);              // S^WS | '(:' | 'by'
      consume(92);                  // 'by'
      break;
    default:
      consume(242);                 // 'stable'
      lookahead1W(69);              // S^WS | '(:' | 'order'
      consume(207);                 // 'order'
      lookahead1W(36);              // S^WS | '(:' | 'by'
      consume(92);                  // 'by'
    }
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 207:                       // 'order'
      consumeT(207);                // 'order'
      lookahead1W(36);              // S^WS | '(:' | 'by'
      consumeT(92);                 // 'by'
      break;
    default:
      consumeT(242);                // 'stable'
      lookahead1W(69);              // S^WS | '(:' | 'order'
      consumeT(207);                // 'order'
      lookahead1W(36);              // S^WS | '(:' | 'by'
      consumeT(92);                 // 'by'
    }
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(178);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(178);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      consumeT(42);                 // ','
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 85                    // 'ascending'
     || l1 == 118)                  // 'descending'
    {
      switch (l1)
      {
      case 85:                      // 'ascending'
        consume(85);                // 'ascending'
        break;
      default:
        consume(118);               // 'descending'
      }
    }
    lookahead1W(181);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 128)                  // 'empty'
    {
      consume(128);                 // 'empty'
      lookahead1W(123);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 152:                     // 'greatest'
        consume(152);               // 'greatest'
        break;
      default:
        consume(178);               // 'least'
      }
    }
    lookahead1W(179);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 99)                   // 'collation'
    {
      consume(99);                  // 'collation'
      lookahead1W(17);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 85                    // 'ascending'
     || l1 == 118)                  // 'descending'
    {
      switch (l1)
      {
      case 85:                      // 'ascending'
        consumeT(85);               // 'ascending'
        break;
      default:
        consumeT(118);              // 'descending'
      }
    }
    lookahead1W(181);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 128)                  // 'empty'
    {
      consumeT(128);                // 'empty'
      lookahead1W(123);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 152:                     // 'greatest'
        consumeT(152);              // 'greatest'
        break;
      default:
        consumeT(178);              // 'least'
      }
    }
    lookahead1W(179);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 99)                   // 'collation'
    {
      consumeT(99);                 // 'collation'
      lookahead1W(17);              // URILiteral | S^WS | '(:'
      consumeT(7);                  // URILiteral
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    consume(226);                   // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    consumeT(226);                  // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 241:                       // 'some'
      consume(241);                 // 'some'
      break;
    default:
      consume(134);                 // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(112);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(55);                // S^WS | '(:' | 'in'
    consume(159);                   // 'in'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(32);                  // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(112);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 84)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(55);              // S^WS | '(:' | 'in'
      consume(159);                 // 'in'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    consume(230);                   // 'satisfies'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 241:                       // 'some'
      consumeT(241);                // 'some'
      break;
    default:
      consumeT(134);                // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(112);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 84)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(55);                // S^WS | '(:' | 'in'
    consumeT(159);                  // 'in'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consumeT(42);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(32);                 // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(112);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 84)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(55);              // S^WS | '(:' | 'in'
      consumeT(159);                // 'in'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    consumeT(230);                  // 'satisfies'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    consume(249);                   // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(38);                    // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consume(114);                   // 'default'
    lookahead1W(72);                // S^WS | '(:' | 'return'
    consume(226);                   // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    consumeT(249);                  // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(38);                   // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consumeT(114);                  // 'default'
    lookahead1W(72);                // S^WS | '(:' | 'return'
    consumeT(226);                  // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      consume(93);                  // 'case'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consume(226);                   // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      consumeT(93);                 // 'case'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consumeT(226);                  // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    consume(259);                   // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(38);                    // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consume(114);                   // 'default'
    lookahead1W(97);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 32)                   // '$'
    {
      consume(32);                  // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(72);                // S^WS | '(:' | 'return'
    consume(226);                   // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    consumeT(259);                  // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(38);                   // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      try_CaseClause();
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consumeT(114);                  // 'default'
    lookahead1W(97);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 32)                   // '$'
    {
      consumeT(32);                 // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
    }
    lookahead1W(72);                // S^WS | '(:' | 'return'
    consumeT(226);                  // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    consume(93);                    // 'case'
    lookahead1W(269);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 32)                   // '$'
    {
      consume(32);                  // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(32);              // S^WS | '(:' | 'as'
      consume(84);                  // 'as'
    }
    lookahead1W(268);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    consume(226);                   // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    consumeT(93);                   // 'case'
    lookahead1W(269);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 32)                   // '$'
    {
      consumeT(32);                 // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(32);              // S^WS | '(:' | 'as'
      consumeT(84);                 // 'as'
    }
    lookahead1W(268);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceTypeUnion();
    consumeT(226);                  // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 285)                // '|'
      {
        break;
      }
      consume(285);                 // '|'
      lookahead1W(268);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 285)                // '|'
      {
        break;
      }
      consumeT(285);                // '|'
      lookahead1W(268);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    consume(157);                   // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(38);                    // ')'
    lookahead1W(79);                // S^WS | '(:' | 'then'
    consume(251);                   // 'then'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(127);                   // 'else'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    consumeT(157);                  // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(38);                   // ')'
    lookahead1W(79);                // S^WS | '(:' | 'then'
    consumeT(251);                  // 'then'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(127);                  // 'else'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(186);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}' | '}`'
      if (l1 != 96)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(186);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}' | '}`'
      if (l1 != 96)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    consume(256);                   // 'try'
    lookahead1W(89);                // S^WS | '(:' | '{'
    consume(282);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TryTargetExpr();
    consume(288);                   // '}'
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    consumeT(256);                  // 'try'
    lookahead1W(89);                // S^WS | '(:' | '{'
    consumeT(282);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TryTargetExpr();
    consumeT(288);                  // '}'
  }

  function parse_TryTargetExpr()
  {
    eventHandler.startNonterminal("TryTargetExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("TryTargetExpr", e0);
  }

  function try_TryTargetExpr()
  {
    try_Expr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    consume(96);                    // 'catch'
    lookahead1W(261);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_CatchErrorList();
    consume(282);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(288);                   // '}'
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    consumeT(96);                   // 'catch'
    lookahead1W(261);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_CatchErrorList();
    consumeT(282);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(288);                  // '}'
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(138);             // S^WS | '(:' | '{' | '|'
      if (l1 != 285)                // '|'
      {
        break;
      }
      consume(285);                 // '|'
      lookahead1W(261);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(138);             // S^WS | '(:' | '{' | '|'
      if (l1 != 285)                // '|'
      {
        break;
      }
      consumeT(285);                // '|'
      lookahead1W(261);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 206)                // 'or'
      {
        break;
      }
      consume(206);                 // 'or'
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 206)                // 'or'
      {
        break;
      }
      consumeT(206);                // 'or'
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      if (l1 != 80)                 // 'and'
      {
        break;
      }
      consume(80);                  // 'and'
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      if (l1 != 80)                 // 'and'
      {
        break;
      }
      consumeT(80);                 // 'and'
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    if (l1 == 28                    // '!='
     || l1 == 55                    // '<'
     || l1 == 58                    // '<<'
     || l1 == 59                    // '<='
     || l1 == 61                    // '='
     || l1 == 63                    // '>'
     || l1 == 64                    // '>='
     || l1 == 65                    // '>>'
     || l1 == 133                   // 'eq'
     || l1 == 151                   // 'ge'
     || l1 == 155                   // 'gt'
     || l1 == 169                   // 'is'
     || l1 == 177                   // 'le'
     || l1 == 183                   // 'lt'
     || l1 == 192)                  // 'ne'
    {
      switch (l1)
      {
      case 133:                     // 'eq'
      case 151:                     // 'ge'
      case 155:                     // 'gt'
      case 177:                     // 'le'
      case 183:                     // 'lt'
      case 192:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 58:                      // '<<'
      case 65:                      // '>>'
      case 169:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_FTContainsExpr();
    if (l1 == 28                    // '!='
     || l1 == 55                    // '<'
     || l1 == 58                    // '<<'
     || l1 == 59                    // '<='
     || l1 == 61                    // '='
     || l1 == 63                    // '>'
     || l1 == 64                    // '>='
     || l1 == 65                    // '>>'
     || l1 == 133                   // 'eq'
     || l1 == 151                   // 'ge'
     || l1 == 155                   // 'gt'
     || l1 == 169                   // 'is'
     || l1 == 177                   // 'le'
     || l1 == 183                   // 'lt'
     || l1 == 192)                  // 'ne'
    {
      switch (l1)
      {
      case 133:                     // 'eq'
      case 151:                     // 'ge'
      case 155:                     // 'gt'
      case 177:                     // 'le'
      case 183:                     // 'lt'
      case 192:                     // 'ne'
        try_ValueComp();
        break;
      case 58:                      // '<<'
      case 65:                      // '>>'
      case 169:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 104)                  // 'contains'
    {
      consume(104);                 // 'contains'
      lookahead1W(78);              // S^WS | '(:' | 'text'
      consume(250);                 // 'text'
      lookahead1W(164);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 277)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  function try_FTContainsExpr()
  {
    try_StringConcatExpr();
    if (l1 == 104)                  // 'contains'
    {
      consumeT(104);                // 'contains'
      lookahead1W(78);              // S^WS | '(:' | 'text'
      consumeT(250);                // 'text'
      lookahead1W(164);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 277)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 286)                // '||'
      {
        break;
      }
      consume(286);                 // '||'
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 286)                // '||'
      {
        break;
      }
      consumeT(286);                // '||'
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 254)                  // 'to'
    {
      consume(254);                 // 'to'
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 254)                  // 'to'
    {
      consumeT(254);                // 'to'
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '+'
        consume(41);                // '+'
        break;
      default:
        consume(43);                // '-'
      }
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '+'
        consumeT(41);               // '+'
        break;
      default:
        consumeT(43);               // '-'
      }
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 39                  // '*'
       && l1 != 123                 // 'div'
       && l1 != 156                 // 'idiv'
       && l1 != 186)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '*'
        consume(39);                // '*'
        break;
      case 123:                     // 'div'
        consume(123);               // 'div'
        break;
      case 156:                     // 'idiv'
        consume(156);               // 'idiv'
        break;
      default:
        consume(186);               // 'mod'
      }
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 39                  // '*'
       && l1 != 123                 // 'div'
       && l1 != 156                 // 'idiv'
       && l1 != 186)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '*'
        consumeT(39);               // '*'
        break;
      case 123:                     // 'div'
        consumeT(123);              // 'div'
        break;
      case 156:                     // 'idiv'
        consumeT(156);              // 'idiv'
        break;
      default:
        consumeT(186);              // 'mod'
      }
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 260                 // 'union'
       && l1 != 285)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 260:                     // 'union'
        consume(260);               // 'union'
        break;
      default:
        consume(285);               // '|'
      }
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 260                 // 'union'
       && l1 != 285)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 260:                     // 'union'
        consumeT(260);              // 'union'
        break;
      default:
        consumeT(285);              // '|'
      }
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(225);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      if (l1 != 136                 // 'except'
       && l1 != 167)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 167:                     // 'intersect'
        consume(167);               // 'intersect'
        break;
      default:
        consume(136);               // 'except'
      }
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(225);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      if (l1 != 136                 // 'except'
       && l1 != 167)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 167:                     // 'intersect'
        consumeT(167);              // 'intersect'
        break;
      default:
        consumeT(136);              // 'except'
      }
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' |
                                    // '}`'
    if (l1 == 165)                  // 'instance'
    {
      consume(165);                 // 'instance'
      lookahead1W(66);              // S^WS | '(:' | 'of'
      consume(202);                 // 'of'
      lookahead1W(268);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' |
                                    // '}`'
    if (l1 == 165)                  // 'instance'
    {
      consumeT(165);                // 'instance'
      lookahead1W(66);              // S^WS | '(:' | 'of'
      consumeT(202);                // 'of'
      lookahead1W(268);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
    if (l1 == 255)                  // 'treat'
    {
      consume(255);                 // 'treat'
      lookahead1W(32);              // S^WS | '(:' | 'as'
      consume(84);                  // 'as'
      lookahead1W(268);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
    if (l1 == 255)                  // 'treat'
    {
      consumeT(255);                // 'treat'
      lookahead1W(32);              // S^WS | '(:' | 'as'
      consumeT(84);                 // 'as'
      lookahead1W(268);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(228);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
    if (l1 == 95)                   // 'castable'
    {
      consume(95);                  // 'castable'
      lookahead1W(32);              // S^WS | '(:' | 'as'
      consume(84);                  // 'as'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(228);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
    if (l1 == 95)                   // 'castable'
    {
      consumeT(95);                 // 'castable'
      lookahead1W(32);              // S^WS | '(:' | 'as'
      consumeT(84);                 // 'as'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_ArrowExpr();
    if (l1 == 94)                   // 'cast'
    {
      consume(94);                  // 'cast'
      lookahead1W(32);              // S^WS | '(:' | 'as'
      consume(84);                  // 'as'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_ArrowExpr();
    if (l1 == 94)                   // 'cast'
    {
      consumeT(94);                 // 'cast'
      lookahead1W(32);              // S^WS | '(:' | 'as'
      consumeT(84);                 // 'as'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_SingleType();
    }
  }

  function parse_ArrowExpr()
  {
    eventHandler.startNonterminal("ArrowExpr", e0);
    parse_UnaryExpr();
    for (;;)
    {
      lookahead1W(230);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '|}' | '}' | '}`'
      if (l1 != 62)                 // '=>'
      {
        break;
      }
      consume(62);                  // '=>'
      lookahead1W(265);             // EQName^Token | S^WS | '$' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      whitespace();
      parse_ArgumentList();
    }
    eventHandler.endNonterminal("ArrowExpr", e0);
  }

  function try_ArrowExpr()
  {
    try_UnaryExpr();
    for (;;)
    {
      lookahead1W(230);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '|}' | '}' | '}`'
      if (l1 != 62)                 // '=>'
      {
        break;
      }
      consumeT(62);                 // '=>'
      lookahead1W(265);             // EQName^Token | S^WS | '$' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      try_ArgumentList();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 43:                      // '-'
        consume(43);                // '-'
        break;
      default:
        consume(41);                // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 43:                      // '-'
        consumeT(43);               // '-'
        break;
      default:
        consumeT(41);               // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 266:                       // 'validate'
      lookahead2W(251);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'treat' | 'type' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 90378:                     // 'validate' 'lax'
    case 126218:                    // 'validate' 'strict'
    case 132362:                    // 'validate' 'type'
    case 144650:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 36:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 266:                       // 'validate'
      lookahead2W(251);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'treat' | 'type' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 90378:                     // 'validate' 'lax'
    case 126218:                    // 'validate' 'strict'
    case 132362:                    // 'validate' 'type'
    case 144650:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 36:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 27)                 // '!'
      {
        break;
      }
      consume(27);                  // '!'
      lookahead1W(273);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 27)                 // '!'
      {
        break;
      }
      consumeT(27);                 // '!'
      lookahead1W(273);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_PathExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 61:                        // '='
      consume(61);                  // '='
      break;
    case 28:                        // '!='
      consume(28);                  // '!='
      break;
    case 55:                        // '<'
      consume(55);                  // '<'
      break;
    case 59:                        // '<='
      consume(59);                  // '<='
      break;
    case 63:                        // '>'
      consume(63);                  // '>'
      break;
    default:
      consume(64);                  // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 61:                        // '='
      consumeT(61);                 // '='
      break;
    case 28:                        // '!='
      consumeT(28);                 // '!='
      break;
    case 55:                        // '<'
      consumeT(55);                 // '<'
      break;
    case 59:                        // '<='
      consumeT(59);                 // '<='
      break;
    case 63:                        // '>'
      consumeT(63);                 // '>'
      break;
    default:
      consumeT(64);                 // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 133:                       // 'eq'
      consume(133);                 // 'eq'
      break;
    case 192:                       // 'ne'
      consume(192);                 // 'ne'
      break;
    case 183:                       // 'lt'
      consume(183);                 // 'lt'
      break;
    case 177:                       // 'le'
      consume(177);                 // 'le'
      break;
    case 155:                       // 'gt'
      consume(155);                 // 'gt'
      break;
    default:
      consume(151);                 // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 133:                       // 'eq'
      consumeT(133);                // 'eq'
      break;
    case 192:                       // 'ne'
      consumeT(192);                // 'ne'
      break;
    case 183:                       // 'lt'
      consumeT(183);                // 'lt'
      break;
    case 177:                       // 'le'
      consumeT(177);                // 'le'
      break;
    case 155:                       // 'gt'
      consumeT(155);                // 'gt'
      break;
    default:
      consumeT(151);                // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 169:                       // 'is'
      consume(169);                 // 'is'
      break;
    case 58:                        // '<<'
      consume(58);                  // '<<'
      break;
    default:
      consume(65);                  // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 169:                       // 'is'
      consumeT(169);                // 'is'
      break;
    case 58:                        // '<<'
      consumeT(58);                 // '<<'
      break;
    default:
      consumeT(65);                 // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    consume(266);                   // 'validate'
    lookahead1W(162);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 282)                  // '{'
    {
      switch (l1)
      {
      case 258:                     // 'type'
        consume(258);               // 'type'
        lookahead1W(258);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    consume(282);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(288);                   // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    consumeT(266);                  // 'validate'
    lookahead1W(162);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 282)                  // '{'
    {
      switch (l1)
      {
      case 258:                     // 'type'
        consumeT(258);              // 'type'
        lookahead1W(258);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    consumeT(282);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(288);                  // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 176:                       // 'lax'
      consume(176);                 // 'lax'
      break;
    default:
      consume(246);                 // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 176:                       // 'lax'
      consumeT(176);                // 'lax'
      break;
    default:
      consumeT(246);                // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(102);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    consume(282);                   // '{'
    lookahead1W(281);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 288)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(288);                   // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(102);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    consumeT(282);                  // '{'
    lookahead1W(281);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 288)                  // '}'
    {
      try_Expr();
    }
    consumeT(288);                  // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    consume(36);                    // '(#'
    lookahead1(255);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 22)                   // S
    {
      consume(22);                  // S
    }
    parse_EQName();
    lookahead1(11);                 // S | '#)'
    if (l1 == 22)                   // S
    {
      consume(22);                  // S
      lookahead1(0);                // PragmaContents
      consume(1);                   // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consume(31);                    // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    consumeT(36);                   // '(#'
    lookahead1(255);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 22)                   // S
    {
      consumeT(22);                 // S
    }
    try_EQName();
    lookahead1(11);                 // S | '#)'
    if (l1 == 22)                   // S
    {
      consumeT(22);                 // S
      lookahead1(0);                // PragmaContents
      consumeT(1);                  // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consumeT(31);                   // '#)'
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 47:                        // '/'
      consume(47);                  // '/'
      lookahead1W(291);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' | ']' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' |
                                    // 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '{|' | '|' |
                                    // '||' | '|}' | '}' | '}`'
      switch (l1)
      {
      case 26:                      // EOF
      case 27:                      // '!'
      case 28:                      // '!='
      case 38:                      // ')'
      case 39:                      // '*'
      case 41:                      // '+'
      case 42:                      // ','
      case 43:                      // '-'
      case 50:                      // ':'
      case 54:                      // ';'
      case 58:                      // '<<'
      case 59:                      // '<='
      case 61:                      // '='
      case 62:                      // '=>'
      case 63:                      // '>'
      case 64:                      // '>='
      case 65:                      // '>>'
      case 71:                      // ']'
      case 92:                      // 'by'
      case 104:                     // 'contains'
      case 211:                     // 'paragraphs'
      case 238:                     // 'sentences'
      case 253:                     // 'times'
      case 279:                     // 'words'
      case 285:                     // '|'
      case 286:                     // '||'
      case 287:                     // '|}'
      case 288:                     // '}'
      case 289:                     // '}`'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 48:                        // '//'
      consume(48);                  // '//'
      lookahead1W(272);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 47:                        // '/'
      consumeT(47);                 // '/'
      lookahead1W(291);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' | ']' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' |
                                    // 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '{|' | '|' |
                                    // '||' | '|}' | '}' | '}`'
      switch (l1)
      {
      case 26:                      // EOF
      case 27:                      // '!'
      case 28:                      // '!='
      case 38:                      // ')'
      case 39:                      // '*'
      case 41:                      // '+'
      case 42:                      // ','
      case 43:                      // '-'
      case 50:                      // ':'
      case 54:                      // ';'
      case 58:                      // '<<'
      case 59:                      // '<='
      case 61:                      // '='
      case 62:                      // '=>'
      case 63:                      // '>'
      case 64:                      // '>='
      case 65:                      // '>>'
      case 71:                      // ']'
      case 92:                      // 'by'
      case 104:                     // 'contains'
      case 211:                     // 'paragraphs'
      case 238:                     // 'sentences'
      case 253:                     // 'times'
      case 279:                     // 'words'
      case 285:                     // '|'
      case 286:                     // '||'
      case 287:                     // '|}'
      case 288:                     // '}'
      case 289:                     // '}`'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 48:                        // '//'
      consumeT(48);                 // '//'
      lookahead1W(272);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 27:                      // '!'
        lookahead2W(273);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk != 26                  // EOF
       && lk != 28                  // '!='
       && lk != 38                  // ')'
       && lk != 39                  // '*'
       && lk != 41                  // '+'
       && lk != 42                  // ','
       && lk != 43                  // '-'
       && lk != 47                  // '/'
       && lk != 48                  // '//'
       && lk != 50                  // ':'
       && lk != 54                  // ';'
       && lk != 55                  // '<'
       && lk != 58                  // '<<'
       && lk != 59                  // '<='
       && lk != 61                  // '='
       && lk != 62                  // '=>'
       && lk != 63                  // '>'
       && lk != 64                  // '>='
       && lk != 65                  // '>>'
       && lk != 71                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 84                  // 'as'
       && lk != 85                  // 'ascending'
       && lk != 86                  // 'at'
       && lk != 89                  // 'before'
       && lk != 92                  // 'by'
       && lk != 93                  // 'case'
       && lk != 94                  // 'cast'
       && lk != 95                  // 'castable'
       && lk != 99                  // 'collation'
       && lk != 104                 // 'contains'
       && lk != 110                 // 'count'
       && lk != 114                 // 'default'
       && lk != 118                 // 'descending'
       && lk != 123                 // 'div'
       && lk != 127                 // 'else'
       && lk != 128                 // 'empty'
       && lk != 131                 // 'end'
       && lk != 133                 // 'eq'
       && lk != 136                 // 'except'
       && lk != 142                 // 'for'
       && lk != 151                 // 'ge'
       && lk != 153                 // 'group'
       && lk != 155                 // 'gt'
       && lk != 156                 // 'idiv'
       && lk != 165                 // 'instance'
       && lk != 167                 // 'intersect'
       && lk != 168                 // 'into'
       && lk != 169                 // 'is'
       && lk != 177                 // 'le'
       && lk != 179                 // 'let'
       && lk != 183                 // 'lt'
       && lk != 186                 // 'mod'
       && lk != 187                 // 'modify'
       && lk != 192                 // 'ne'
       && lk != 204                 // 'only'
       && lk != 206                 // 'or'
       && lk != 207                 // 'order'
       && lk != 211                 // 'paragraphs'
       && lk != 226                 // 'return'
       && lk != 230                 // 'satisfies'
       && lk != 238                 // 'sentences'
       && lk != 242                 // 'stable'
       && lk != 243                 // 'start'
       && lk != 253                 // 'times'
       && lk != 254                 // 'to'
       && lk != 255                 // 'treat'
       && lk != 260                 // 'union'
       && lk != 272                 // 'where'
       && lk != 276                 // 'with'
       && lk != 279                 // 'words'
       && lk != 285                 // '|'
       && lk != 286                 // '||'
       && lk != 287                 // '|}'
       && lk != 288                 // '}'
       && lk != 289                 // '}`'
       && lk != 24091               // '!' '/'
       && lk != 24603)              // '!' '//'
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 47:                // '/'
              consumeT(47);         // '/'
              break;
            case 48:                // '//'
              consumeT(48);         // '//'
              break;
            default:
              consumeT(27);         // '!'
            }
            lookahead1W(272);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
            try_StepExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0, lk);
        }
      }
      if (lk != -1
       && lk != 47                  // '/'
       && lk != 48)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 47:                      // '/'
        consume(47);                // '/'
        break;
      case 48:                      // '//'
        consume(48);                // '//'
        break;
      default:
        consume(27);                // '!'
      }
      lookahead1W(272);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 27:                      // '!'
        lookahead2W(273);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk != 26                  // EOF
       && lk != 28                  // '!='
       && lk != 38                  // ')'
       && lk != 39                  // '*'
       && lk != 41                  // '+'
       && lk != 42                  // ','
       && lk != 43                  // '-'
       && lk != 47                  // '/'
       && lk != 48                  // '//'
       && lk != 50                  // ':'
       && lk != 54                  // ';'
       && lk != 55                  // '<'
       && lk != 58                  // '<<'
       && lk != 59                  // '<='
       && lk != 61                  // '='
       && lk != 62                  // '=>'
       && lk != 63                  // '>'
       && lk != 64                  // '>='
       && lk != 65                  // '>>'
       && lk != 71                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 84                  // 'as'
       && lk != 85                  // 'ascending'
       && lk != 86                  // 'at'
       && lk != 89                  // 'before'
       && lk != 92                  // 'by'
       && lk != 93                  // 'case'
       && lk != 94                  // 'cast'
       && lk != 95                  // 'castable'
       && lk != 99                  // 'collation'
       && lk != 104                 // 'contains'
       && lk != 110                 // 'count'
       && lk != 114                 // 'default'
       && lk != 118                 // 'descending'
       && lk != 123                 // 'div'
       && lk != 127                 // 'else'
       && lk != 128                 // 'empty'
       && lk != 131                 // 'end'
       && lk != 133                 // 'eq'
       && lk != 136                 // 'except'
       && lk != 142                 // 'for'
       && lk != 151                 // 'ge'
       && lk != 153                 // 'group'
       && lk != 155                 // 'gt'
       && lk != 156                 // 'idiv'
       && lk != 165                 // 'instance'
       && lk != 167                 // 'intersect'
       && lk != 168                 // 'into'
       && lk != 169                 // 'is'
       && lk != 177                 // 'le'
       && lk != 179                 // 'let'
       && lk != 183                 // 'lt'
       && lk != 186                 // 'mod'
       && lk != 187                 // 'modify'
       && lk != 192                 // 'ne'
       && lk != 204                 // 'only'
       && lk != 206                 // 'or'
       && lk != 207                 // 'order'
       && lk != 211                 // 'paragraphs'
       && lk != 226                 // 'return'
       && lk != 230                 // 'satisfies'
       && lk != 238                 // 'sentences'
       && lk != 242                 // 'stable'
       && lk != 243                 // 'start'
       && lk != 253                 // 'times'
       && lk != 254                 // 'to'
       && lk != 255                 // 'treat'
       && lk != 260                 // 'union'
       && lk != 272                 // 'where'
       && lk != 276                 // 'with'
       && lk != 279                 // 'words'
       && lk != 285                 // '|'
       && lk != 286                 // '||'
       && lk != 287                 // '|}'
       && lk != 288                 // '}'
       && lk != 289                 // '}`'
       && lk != 24091               // '!' '/'
       && lk != 24603)              // '!' '//'
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 47:                // '/'
              consumeT(47);         // '/'
              break;
            case 48:                // '//'
              consumeT(48);         // '//'
              break;
            default:
              consumeT(27);         // '!'
            }
            lookahead1W(272);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
            try_StepExpr();
            memoize(2, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(2, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 47                  // '/'
       && lk != 48)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 47:                      // '/'
        consumeT(47);               // '/'
        break;
      case 48:                      // '//'
        consumeT(48);               // '//'
        break;
      default:
        consumeT(27);               // '!'
      }
      lookahead1W(272);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 87:                        // 'attribute'
      lookahead2W(289);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' |
                                    // '>' | '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' |
                                    // 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    case 126:                       // 'element'
      lookahead2W(288);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' |
                                    // 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    case 184:                       // 'map'
      lookahead2W(246);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 190:                       // 'namespace'
    case 222:                       // 'processing-instruction'
      lookahead2W(287);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}' |
                                    // '}`'
      break;
    case 129:                       // 'empty-sequence'
    case 157:                       // 'if'
    case 170:                       // 'item'
    case 249:                       // 'switch'
    case 259:                       // 'typeswitch'
      lookahead2W(242);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 83:                        // 'array'
    case 101:                       // 'comment'
    case 124:                       // 'document'
    case 208:                       // 'ordered'
    case 250:                       // 'text'
    case 262:                       // 'unordered'
      lookahead2W(250);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}' | '}`'
      break;
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 98:                        // 'child'
    case 116:                       // 'descendant'
    case 117:                       // 'descendant-or-self'
    case 140:                       // 'following'
    case 141:                       // 'following-sibling'
    case 212:                       // 'parent'
    case 218:                       // 'preceding'
    case 219:                       // 'preceding-sibling'
    case 235:                       // 'self'
      lookahead2W(249);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    case 6:                         // EQName^Token
    case 75:                        // 'after'
    case 77:                        // 'allowing'
    case 80:                        // 'and'
    case 84:                        // 'as'
    case 85:                        // 'ascending'
    case 86:                        // 'at'
    case 88:                        // 'base-uri'
    case 89:                        // 'before'
    case 90:                        // 'boundary-space'
    case 91:                        // 'break'
    case 93:                        // 'case'
    case 94:                        // 'cast'
    case 95:                        // 'castable'
    case 96:                        // 'catch'
    case 99:                        // 'collation'
    case 102:                       // 'constraint'
    case 103:                       // 'construction'
    case 106:                       // 'context'
    case 107:                       // 'continue'
    case 108:                       // 'copy'
    case 109:                       // 'copy-namespaces'
    case 110:                       // 'count'
    case 111:                       // 'decimal-format'
    case 113:                       // 'declare'
    case 114:                       // 'default'
    case 115:                       // 'delete'
    case 118:                       // 'descending'
    case 123:                       // 'div'
    case 125:                       // 'document-node'
    case 127:                       // 'else'
    case 128:                       // 'empty'
    case 130:                       // 'encoding'
    case 131:                       // 'end'
    case 133:                       // 'eq'
    case 134:                       // 'every'
    case 136:                       // 'except'
    case 137:                       // 'exit'
    case 138:                       // 'external'
    case 139:                       // 'first'
    case 142:                       // 'for'
    case 146:                       // 'ft-option'
    case 150:                       // 'function'
    case 151:                       // 'ge'
    case 153:                       // 'group'
    case 155:                       // 'gt'
    case 156:                       // 'idiv'
    case 158:                       // 'import'
    case 159:                       // 'in'
    case 160:                       // 'index'
    case 164:                       // 'insert'
    case 165:                       // 'instance'
    case 166:                       // 'integrity'
    case 167:                       // 'intersect'
    case 168:                       // 'into'
    case 169:                       // 'is'
    case 172:                       // 'json-item'
    case 175:                       // 'last'
    case 176:                       // 'lax'
    case 177:                       // 'le'
    case 179:                       // 'let'
    case 181:                       // 'loop'
    case 183:                       // 'lt'
    case 186:                       // 'mod'
    case 187:                       // 'modify'
    case 188:                       // 'module'
    case 191:                       // 'namespace-node'
    case 192:                       // 'ne'
    case 197:                       // 'node'
    case 198:                       // 'nodes'
    case 200:                       // 'object'
    case 204:                       // 'only'
    case 205:                       // 'option'
    case 206:                       // 'or'
    case 207:                       // 'order'
    case 209:                       // 'ordering'
    case 224:                       // 'rename'
    case 225:                       // 'replace'
    case 226:                       // 'return'
    case 227:                       // 'returning'
    case 228:                       // 'revalidation'
    case 230:                       // 'satisfies'
    case 231:                       // 'schema'
    case 232:                       // 'schema-attribute'
    case 233:                       // 'schema-element'
    case 234:                       // 'score'
    case 240:                       // 'sliding'
    case 241:                       // 'some'
    case 242:                       // 'stable'
    case 243:                       // 'start'
    case 246:                       // 'strict'
    case 254:                       // 'to'
    case 255:                       // 'treat'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
    case 280:                       // 'xquery'
      lookahead2W(245);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 18003                 // 'array' '('
     || lk == 18092                 // 'json-item' '('
     || lk == 18120                 // 'object' '('
     || lk == 38487                 // 'attribute' 'after'
     || lk == 38526                 // 'element' 'after'
     || lk == 38590                 // 'namespace' 'after'
     || lk == 38622                 // 'processing-instruction' 'after'
     || lk == 41047                 // 'attribute' 'and'
     || lk == 41086                 // 'element' 'and'
     || lk == 41150                 // 'namespace' 'and'
     || lk == 41182                 // 'processing-instruction' 'and'
     || lk == 43095                 // 'attribute' 'as'
     || lk == 43134                 // 'element' 'as'
     || lk == 43198                 // 'namespace' 'as'
     || lk == 43230                 // 'processing-instruction' 'as'
     || lk == 43607                 // 'attribute' 'ascending'
     || lk == 43646                 // 'element' 'ascending'
     || lk == 43710                 // 'namespace' 'ascending'
     || lk == 43742                 // 'processing-instruction' 'ascending'
     || lk == 44119                 // 'attribute' 'at'
     || lk == 44158                 // 'element' 'at'
     || lk == 44222                 // 'namespace' 'at'
     || lk == 44254                 // 'processing-instruction' 'at'
     || lk == 45655                 // 'attribute' 'before'
     || lk == 45694                 // 'element' 'before'
     || lk == 45758                 // 'namespace' 'before'
     || lk == 45790                 // 'processing-instruction' 'before'
     || lk == 47703                 // 'attribute' 'case'
     || lk == 47742                 // 'element' 'case'
     || lk == 47806                 // 'namespace' 'case'
     || lk == 47838                 // 'processing-instruction' 'case'
     || lk == 48215                 // 'attribute' 'cast'
     || lk == 48254                 // 'element' 'cast'
     || lk == 48318                 // 'namespace' 'cast'
     || lk == 48350                 // 'processing-instruction' 'cast'
     || lk == 48727                 // 'attribute' 'castable'
     || lk == 48766                 // 'element' 'castable'
     || lk == 48830                 // 'namespace' 'castable'
     || lk == 48862                 // 'processing-instruction' 'castable'
     || lk == 50775                 // 'attribute' 'collation'
     || lk == 50814                 // 'element' 'collation'
     || lk == 50878                 // 'namespace' 'collation'
     || lk == 50910                 // 'processing-instruction' 'collation'
     || lk == 56407                 // 'attribute' 'count'
     || lk == 56446                 // 'element' 'count'
     || lk == 56510                 // 'namespace' 'count'
     || lk == 56542                 // 'processing-instruction' 'count'
     || lk == 58455                 // 'attribute' 'default'
     || lk == 58494                 // 'element' 'default'
     || lk == 58558                 // 'namespace' 'default'
     || lk == 58590                 // 'processing-instruction' 'default'
     || lk == 60503                 // 'attribute' 'descending'
     || lk == 60542                 // 'element' 'descending'
     || lk == 60606                 // 'namespace' 'descending'
     || lk == 60638                 // 'processing-instruction' 'descending'
     || lk == 63063                 // 'attribute' 'div'
     || lk == 63102                 // 'element' 'div'
     || lk == 63166                 // 'namespace' 'div'
     || lk == 63198                 // 'processing-instruction' 'div'
     || lk == 65111                 // 'attribute' 'else'
     || lk == 65150                 // 'element' 'else'
     || lk == 65214                 // 'namespace' 'else'
     || lk == 65246                 // 'processing-instruction' 'else'
     || lk == 65623                 // 'attribute' 'empty'
     || lk == 65662                 // 'element' 'empty'
     || lk == 65726                 // 'namespace' 'empty'
     || lk == 65758                 // 'processing-instruction' 'empty'
     || lk == 67159                 // 'attribute' 'end'
     || lk == 67198                 // 'element' 'end'
     || lk == 67262                 // 'namespace' 'end'
     || lk == 67294                 // 'processing-instruction' 'end'
     || lk == 68183                 // 'attribute' 'eq'
     || lk == 68222                 // 'element' 'eq'
     || lk == 68286                 // 'namespace' 'eq'
     || lk == 68318                 // 'processing-instruction' 'eq'
     || lk == 69719                 // 'attribute' 'except'
     || lk == 69758                 // 'element' 'except'
     || lk == 69822                 // 'namespace' 'except'
     || lk == 69854                 // 'processing-instruction' 'except'
     || lk == 72791                 // 'attribute' 'for'
     || lk == 72830                 // 'element' 'for'
     || lk == 72894                 // 'namespace' 'for'
     || lk == 72926                 // 'processing-instruction' 'for'
     || lk == 77399                 // 'attribute' 'ge'
     || lk == 77438                 // 'element' 'ge'
     || lk == 77502                 // 'namespace' 'ge'
     || lk == 77534                 // 'processing-instruction' 'ge'
     || lk == 78423                 // 'attribute' 'group'
     || lk == 78462                 // 'element' 'group'
     || lk == 78526                 // 'namespace' 'group'
     || lk == 78558                 // 'processing-instruction' 'group'
     || lk == 79447                 // 'attribute' 'gt'
     || lk == 79486                 // 'element' 'gt'
     || lk == 79550                 // 'namespace' 'gt'
     || lk == 79582                 // 'processing-instruction' 'gt'
     || lk == 79959                 // 'attribute' 'idiv'
     || lk == 79998                 // 'element' 'idiv'
     || lk == 80062                 // 'namespace' 'idiv'
     || lk == 80094                 // 'processing-instruction' 'idiv'
     || lk == 84567                 // 'attribute' 'instance'
     || lk == 84606                 // 'element' 'instance'
     || lk == 84670                 // 'namespace' 'instance'
     || lk == 84702                 // 'processing-instruction' 'instance'
     || lk == 85591                 // 'attribute' 'intersect'
     || lk == 85630                 // 'element' 'intersect'
     || lk == 85694                 // 'namespace' 'intersect'
     || lk == 85726                 // 'processing-instruction' 'intersect'
     || lk == 86103                 // 'attribute' 'into'
     || lk == 86142                 // 'element' 'into'
     || lk == 86206                 // 'namespace' 'into'
     || lk == 86238                 // 'processing-instruction' 'into'
     || lk == 86615                 // 'attribute' 'is'
     || lk == 86654                 // 'element' 'is'
     || lk == 86718                 // 'namespace' 'is'
     || lk == 86750                 // 'processing-instruction' 'is'
     || lk == 90711                 // 'attribute' 'le'
     || lk == 90750                 // 'element' 'le'
     || lk == 90814                 // 'namespace' 'le'
     || lk == 90846                 // 'processing-instruction' 'le'
     || lk == 91735                 // 'attribute' 'let'
     || lk == 91774                 // 'element' 'let'
     || lk == 91838                 // 'namespace' 'let'
     || lk == 91870                 // 'processing-instruction' 'let'
     || lk == 93783                 // 'attribute' 'lt'
     || lk == 93822                 // 'element' 'lt'
     || lk == 93886                 // 'namespace' 'lt'
     || lk == 93918                 // 'processing-instruction' 'lt'
     || lk == 95319                 // 'attribute' 'mod'
     || lk == 95358                 // 'element' 'mod'
     || lk == 95422                 // 'namespace' 'mod'
     || lk == 95454                 // 'processing-instruction' 'mod'
     || lk == 95831                 // 'attribute' 'modify'
     || lk == 95870                 // 'element' 'modify'
     || lk == 95934                 // 'namespace' 'modify'
     || lk == 95966                 // 'processing-instruction' 'modify'
     || lk == 98391                 // 'attribute' 'ne'
     || lk == 98430                 // 'element' 'ne'
     || lk == 98494                 // 'namespace' 'ne'
     || lk == 98526                 // 'processing-instruction' 'ne'
     || lk == 104535                // 'attribute' 'only'
     || lk == 104574                // 'element' 'only'
     || lk == 104638                // 'namespace' 'only'
     || lk == 104670                // 'processing-instruction' 'only'
     || lk == 105559                // 'attribute' 'or'
     || lk == 105598                // 'element' 'or'
     || lk == 105662                // 'namespace' 'or'
     || lk == 105694                // 'processing-instruction' 'or'
     || lk == 106071                // 'attribute' 'order'
     || lk == 106110                // 'element' 'order'
     || lk == 106174                // 'namespace' 'order'
     || lk == 106206                // 'processing-instruction' 'order'
     || lk == 115799                // 'attribute' 'return'
     || lk == 115838                // 'element' 'return'
     || lk == 115902                // 'namespace' 'return'
     || lk == 115934                // 'processing-instruction' 'return'
     || lk == 117847                // 'attribute' 'satisfies'
     || lk == 117886                // 'element' 'satisfies'
     || lk == 117950                // 'namespace' 'satisfies'
     || lk == 117982                // 'processing-instruction' 'satisfies'
     || lk == 123991                // 'attribute' 'stable'
     || lk == 124030                // 'element' 'stable'
     || lk == 124094                // 'namespace' 'stable'
     || lk == 124126                // 'processing-instruction' 'stable'
     || lk == 124503                // 'attribute' 'start'
     || lk == 124542                // 'element' 'start'
     || lk == 124606                // 'namespace' 'start'
     || lk == 124638                // 'processing-instruction' 'start'
     || lk == 130135                // 'attribute' 'to'
     || lk == 130174                // 'element' 'to'
     || lk == 130238                // 'namespace' 'to'
     || lk == 130270                // 'processing-instruction' 'to'
     || lk == 130647                // 'attribute' 'treat'
     || lk == 130686                // 'element' 'treat'
     || lk == 130750                // 'namespace' 'treat'
     || lk == 130782                // 'processing-instruction' 'treat'
     || lk == 133207                // 'attribute' 'union'
     || lk == 133246                // 'element' 'union'
     || lk == 133310                // 'namespace' 'union'
     || lk == 133342                // 'processing-instruction' 'union'
     || lk == 139351                // 'attribute' 'where'
     || lk == 139390                // 'element' 'where'
     || lk == 139454                // 'namespace' 'where'
     || lk == 139486                // 'processing-instruction' 'where'
     || lk == 141399                // 'attribute' 'with'
     || lk == 141438                // 'element' 'with'
     || lk == 141502                // 'namespace' 'with'
     || lk == 141534)               // 'processing-instruction' 'with'
    {
      lk = memoized(3, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(3, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 32:                        // '$'
    case 33:                        // '%'
    case 35:                        // '('
    case 45:                        // '.'
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
    case 66:                        // '?'
    case 70:                        // '['
    case 73:                        // '``['
    case 282:                       // '{'
    case 284:                       // '{|'
    case 3159:                      // 'attribute' EQName^Token
    case 3198:                      // 'element' EQName^Token
    case 9918:                      // 'namespace' NCName^Token
    case 9950:                      // 'processing-instruction' NCName^Token
    case 15366:                     // EQName^Token '#'
    case 15435:                     // 'after' '#'
    case 15437:                     // 'allowing' '#'
    case 15438:                     // 'ancestor' '#'
    case 15439:                     // 'ancestor-or-self' '#'
    case 15440:                     // 'and' '#'
    case 15443:                     // 'array' '#'
    case 15444:                     // 'as' '#'
    case 15445:                     // 'ascending' '#'
    case 15446:                     // 'at' '#'
    case 15447:                     // 'attribute' '#'
    case 15448:                     // 'base-uri' '#'
    case 15449:                     // 'before' '#'
    case 15450:                     // 'boundary-space' '#'
    case 15451:                     // 'break' '#'
    case 15453:                     // 'case' '#'
    case 15454:                     // 'cast' '#'
    case 15455:                     // 'castable' '#'
    case 15456:                     // 'catch' '#'
    case 15458:                     // 'child' '#'
    case 15459:                     // 'collation' '#'
    case 15461:                     // 'comment' '#'
    case 15462:                     // 'constraint' '#'
    case 15463:                     // 'construction' '#'
    case 15466:                     // 'context' '#'
    case 15467:                     // 'continue' '#'
    case 15468:                     // 'copy' '#'
    case 15469:                     // 'copy-namespaces' '#'
    case 15470:                     // 'count' '#'
    case 15471:                     // 'decimal-format' '#'
    case 15473:                     // 'declare' '#'
    case 15474:                     // 'default' '#'
    case 15475:                     // 'delete' '#'
    case 15476:                     // 'descendant' '#'
    case 15477:                     // 'descendant-or-self' '#'
    case 15478:                     // 'descending' '#'
    case 15483:                     // 'div' '#'
    case 15484:                     // 'document' '#'
    case 15485:                     // 'document-node' '#'
    case 15486:                     // 'element' '#'
    case 15487:                     // 'else' '#'
    case 15488:                     // 'empty' '#'
    case 15489:                     // 'empty-sequence' '#'
    case 15490:                     // 'encoding' '#'
    case 15491:                     // 'end' '#'
    case 15493:                     // 'eq' '#'
    case 15494:                     // 'every' '#'
    case 15496:                     // 'except' '#'
    case 15497:                     // 'exit' '#'
    case 15498:                     // 'external' '#'
    case 15499:                     // 'first' '#'
    case 15500:                     // 'following' '#'
    case 15501:                     // 'following-sibling' '#'
    case 15502:                     // 'for' '#'
    case 15506:                     // 'ft-option' '#'
    case 15510:                     // 'function' '#'
    case 15511:                     // 'ge' '#'
    case 15513:                     // 'group' '#'
    case 15515:                     // 'gt' '#'
    case 15516:                     // 'idiv' '#'
    case 15517:                     // 'if' '#'
    case 15518:                     // 'import' '#'
    case 15519:                     // 'in' '#'
    case 15520:                     // 'index' '#'
    case 15524:                     // 'insert' '#'
    case 15525:                     // 'instance' '#'
    case 15526:                     // 'integrity' '#'
    case 15527:                     // 'intersect' '#'
    case 15528:                     // 'into' '#'
    case 15529:                     // 'is' '#'
    case 15530:                     // 'item' '#'
    case 15532:                     // 'json-item' '#'
    case 15535:                     // 'last' '#'
    case 15536:                     // 'lax' '#'
    case 15537:                     // 'le' '#'
    case 15539:                     // 'let' '#'
    case 15541:                     // 'loop' '#'
    case 15543:                     // 'lt' '#'
    case 15544:                     // 'map' '#'
    case 15546:                     // 'mod' '#'
    case 15547:                     // 'modify' '#'
    case 15548:                     // 'module' '#'
    case 15550:                     // 'namespace' '#'
    case 15551:                     // 'namespace-node' '#'
    case 15552:                     // 'ne' '#'
    case 15557:                     // 'node' '#'
    case 15558:                     // 'nodes' '#'
    case 15560:                     // 'object' '#'
    case 15564:                     // 'only' '#'
    case 15565:                     // 'option' '#'
    case 15566:                     // 'or' '#'
    case 15567:                     // 'order' '#'
    case 15568:                     // 'ordered' '#'
    case 15569:                     // 'ordering' '#'
    case 15572:                     // 'parent' '#'
    case 15578:                     // 'preceding' '#'
    case 15579:                     // 'preceding-sibling' '#'
    case 15582:                     // 'processing-instruction' '#'
    case 15584:                     // 'rename' '#'
    case 15585:                     // 'replace' '#'
    case 15586:                     // 'return' '#'
    case 15587:                     // 'returning' '#'
    case 15588:                     // 'revalidation' '#'
    case 15590:                     // 'satisfies' '#'
    case 15591:                     // 'schema' '#'
    case 15592:                     // 'schema-attribute' '#'
    case 15593:                     // 'schema-element' '#'
    case 15594:                     // 'score' '#'
    case 15595:                     // 'self' '#'
    case 15600:                     // 'sliding' '#'
    case 15601:                     // 'some' '#'
    case 15602:                     // 'stable' '#'
    case 15603:                     // 'start' '#'
    case 15606:                     // 'strict' '#'
    case 15609:                     // 'switch' '#'
    case 15610:                     // 'text' '#'
    case 15614:                     // 'to' '#'
    case 15615:                     // 'treat' '#'
    case 15616:                     // 'try' '#'
    case 15617:                     // 'tumbling' '#'
    case 15618:                     // 'type' '#'
    case 15619:                     // 'typeswitch' '#'
    case 15620:                     // 'union' '#'
    case 15622:                     // 'unordered' '#'
    case 15623:                     // 'updating' '#'
    case 15626:                     // 'validate' '#'
    case 15627:                     // 'value' '#'
    case 15628:                     // 'variable' '#'
    case 15629:                     // 'version' '#'
    case 15632:                     // 'where' '#'
    case 15633:                     // 'while' '#'
    case 15636:                     // 'with' '#'
    case 15640:                     // 'xquery' '#'
    case 17926:                     // EQName^Token '('
    case 17995:                     // 'after' '('
    case 17997:                     // 'allowing' '('
    case 17998:                     // 'ancestor' '('
    case 17999:                     // 'ancestor-or-self' '('
    case 18000:                     // 'and' '('
    case 18004:                     // 'as' '('
    case 18005:                     // 'ascending' '('
    case 18006:                     // 'at' '('
    case 18008:                     // 'base-uri' '('
    case 18009:                     // 'before' '('
    case 18010:                     // 'boundary-space' '('
    case 18011:                     // 'break' '('
    case 18013:                     // 'case' '('
    case 18014:                     // 'cast' '('
    case 18015:                     // 'castable' '('
    case 18016:                     // 'catch' '('
    case 18018:                     // 'child' '('
    case 18019:                     // 'collation' '('
    case 18022:                     // 'constraint' '('
    case 18023:                     // 'construction' '('
    case 18026:                     // 'context' '('
    case 18027:                     // 'continue' '('
    case 18028:                     // 'copy' '('
    case 18029:                     // 'copy-namespaces' '('
    case 18030:                     // 'count' '('
    case 18031:                     // 'decimal-format' '('
    case 18033:                     // 'declare' '('
    case 18034:                     // 'default' '('
    case 18035:                     // 'delete' '('
    case 18036:                     // 'descendant' '('
    case 18037:                     // 'descendant-or-self' '('
    case 18038:                     // 'descending' '('
    case 18043:                     // 'div' '('
    case 18044:                     // 'document' '('
    case 18047:                     // 'else' '('
    case 18048:                     // 'empty' '('
    case 18050:                     // 'encoding' '('
    case 18051:                     // 'end' '('
    case 18053:                     // 'eq' '('
    case 18054:                     // 'every' '('
    case 18056:                     // 'except' '('
    case 18057:                     // 'exit' '('
    case 18058:                     // 'external' '('
    case 18059:                     // 'first' '('
    case 18060:                     // 'following' '('
    case 18061:                     // 'following-sibling' '('
    case 18062:                     // 'for' '('
    case 18066:                     // 'ft-option' '('
    case 18070:                     // 'function' '('
    case 18071:                     // 'ge' '('
    case 18073:                     // 'group' '('
    case 18075:                     // 'gt' '('
    case 18076:                     // 'idiv' '('
    case 18078:                     // 'import' '('
    case 18079:                     // 'in' '('
    case 18080:                     // 'index' '('
    case 18084:                     // 'insert' '('
    case 18085:                     // 'instance' '('
    case 18086:                     // 'integrity' '('
    case 18087:                     // 'intersect' '('
    case 18088:                     // 'into' '('
    case 18089:                     // 'is' '('
    case 18095:                     // 'last' '('
    case 18096:                     // 'lax' '('
    case 18097:                     // 'le' '('
    case 18099:                     // 'let' '('
    case 18101:                     // 'loop' '('
    case 18103:                     // 'lt' '('
    case 18106:                     // 'mod' '('
    case 18107:                     // 'modify' '('
    case 18108:                     // 'module' '('
    case 18110:                     // 'namespace' '('
    case 18112:                     // 'ne' '('
    case 18118:                     // 'nodes' '('
    case 18124:                     // 'only' '('
    case 18125:                     // 'option' '('
    case 18126:                     // 'or' '('
    case 18127:                     // 'order' '('
    case 18128:                     // 'ordered' '('
    case 18129:                     // 'ordering' '('
    case 18132:                     // 'parent' '('
    case 18138:                     // 'preceding' '('
    case 18139:                     // 'preceding-sibling' '('
    case 18144:                     // 'rename' '('
    case 18145:                     // 'replace' '('
    case 18146:                     // 'return' '('
    case 18147:                     // 'returning' '('
    case 18148:                     // 'revalidation' '('
    case 18150:                     // 'satisfies' '('
    case 18151:                     // 'schema' '('
    case 18154:                     // 'score' '('
    case 18155:                     // 'self' '('
    case 18160:                     // 'sliding' '('
    case 18161:                     // 'some' '('
    case 18162:                     // 'stable' '('
    case 18163:                     // 'start' '('
    case 18166:                     // 'strict' '('
    case 18174:                     // 'to' '('
    case 18175:                     // 'treat' '('
    case 18176:                     // 'try' '('
    case 18177:                     // 'tumbling' '('
    case 18178:                     // 'type' '('
    case 18180:                     // 'union' '('
    case 18182:                     // 'unordered' '('
    case 18183:                     // 'updating' '('
    case 18186:                     // 'validate' '('
    case 18187:                     // 'value' '('
    case 18188:                     // 'variable' '('
    case 18189:                     // 'version' '('
    case 18192:                     // 'where' '('
    case 18193:                     // 'while' '('
    case 18196:                     // 'with' '('
    case 18200:                     // 'xquery' '('
    case 39511:                     // 'attribute' 'allowing'
    case 39550:                     // 'element' 'allowing'
    case 39614:                     // 'namespace' 'allowing'
    case 39646:                     // 'processing-instruction' 'allowing'
    case 40023:                     // 'attribute' 'ancestor'
    case 40062:                     // 'element' 'ancestor'
    case 40126:                     // 'namespace' 'ancestor'
    case 40158:                     // 'processing-instruction' 'ancestor'
    case 40535:                     // 'attribute' 'ancestor-or-self'
    case 40574:                     // 'element' 'ancestor-or-self'
    case 40638:                     // 'namespace' 'ancestor-or-self'
    case 40670:                     // 'processing-instruction' 'ancestor-or-self'
    case 42583:                     // 'attribute' 'array'
    case 42622:                     // 'element' 'array'
    case 44631:                     // 'attribute' 'attribute'
    case 44670:                     // 'element' 'attribute'
    case 44734:                     // 'namespace' 'attribute'
    case 44766:                     // 'processing-instruction' 'attribute'
    case 45143:                     // 'attribute' 'base-uri'
    case 45182:                     // 'element' 'base-uri'
    case 45246:                     // 'namespace' 'base-uri'
    case 45278:                     // 'processing-instruction' 'base-uri'
    case 46167:                     // 'attribute' 'boundary-space'
    case 46206:                     // 'element' 'boundary-space'
    case 46270:                     // 'namespace' 'boundary-space'
    case 46302:                     // 'processing-instruction' 'boundary-space'
    case 46679:                     // 'attribute' 'break'
    case 46718:                     // 'element' 'break'
    case 46782:                     // 'namespace' 'break'
    case 46814:                     // 'processing-instruction' 'break'
    case 49239:                     // 'attribute' 'catch'
    case 49278:                     // 'element' 'catch'
    case 49342:                     // 'namespace' 'catch'
    case 49374:                     // 'processing-instruction' 'catch'
    case 50263:                     // 'attribute' 'child'
    case 50302:                     // 'element' 'child'
    case 50366:                     // 'namespace' 'child'
    case 50398:                     // 'processing-instruction' 'child'
    case 51799:                     // 'attribute' 'comment'
    case 51838:                     // 'element' 'comment'
    case 51902:                     // 'namespace' 'comment'
    case 51934:                     // 'processing-instruction' 'comment'
    case 52311:                     // 'attribute' 'constraint'
    case 52350:                     // 'element' 'constraint'
    case 52414:                     // 'namespace' 'constraint'
    case 52446:                     // 'processing-instruction' 'constraint'
    case 52823:                     // 'attribute' 'construction'
    case 52862:                     // 'element' 'construction'
    case 52926:                     // 'namespace' 'construction'
    case 52958:                     // 'processing-instruction' 'construction'
    case 54359:                     // 'attribute' 'context'
    case 54398:                     // 'element' 'context'
    case 54462:                     // 'namespace' 'context'
    case 54494:                     // 'processing-instruction' 'context'
    case 54871:                     // 'attribute' 'continue'
    case 54910:                     // 'element' 'continue'
    case 54974:                     // 'namespace' 'continue'
    case 55006:                     // 'processing-instruction' 'continue'
    case 55383:                     // 'attribute' 'copy'
    case 55422:                     // 'element' 'copy'
    case 55486:                     // 'namespace' 'copy'
    case 55518:                     // 'processing-instruction' 'copy'
    case 55895:                     // 'attribute' 'copy-namespaces'
    case 55934:                     // 'element' 'copy-namespaces'
    case 55998:                     // 'namespace' 'copy-namespaces'
    case 56030:                     // 'processing-instruction' 'copy-namespaces'
    case 56919:                     // 'attribute' 'decimal-format'
    case 56958:                     // 'element' 'decimal-format'
    case 57022:                     // 'namespace' 'decimal-format'
    case 57054:                     // 'processing-instruction' 'decimal-format'
    case 57943:                     // 'attribute' 'declare'
    case 57982:                     // 'element' 'declare'
    case 58046:                     // 'namespace' 'declare'
    case 58078:                     // 'processing-instruction' 'declare'
    case 58967:                     // 'attribute' 'delete'
    case 59006:                     // 'element' 'delete'
    case 59070:                     // 'namespace' 'delete'
    case 59102:                     // 'processing-instruction' 'delete'
    case 59479:                     // 'attribute' 'descendant'
    case 59518:                     // 'element' 'descendant'
    case 59582:                     // 'namespace' 'descendant'
    case 59614:                     // 'processing-instruction' 'descendant'
    case 59991:                     // 'attribute' 'descendant-or-self'
    case 60030:                     // 'element' 'descendant-or-self'
    case 60094:                     // 'namespace' 'descendant-or-self'
    case 60126:                     // 'processing-instruction' 'descendant-or-self'
    case 63575:                     // 'attribute' 'document'
    case 63614:                     // 'element' 'document'
    case 63678:                     // 'namespace' 'document'
    case 63710:                     // 'processing-instruction' 'document'
    case 64087:                     // 'attribute' 'document-node'
    case 64126:                     // 'element' 'document-node'
    case 64190:                     // 'namespace' 'document-node'
    case 64222:                     // 'processing-instruction' 'document-node'
    case 64599:                     // 'attribute' 'element'
    case 64638:                     // 'element' 'element'
    case 64702:                     // 'namespace' 'element'
    case 64734:                     // 'processing-instruction' 'element'
    case 66135:                     // 'attribute' 'empty-sequence'
    case 66174:                     // 'element' 'empty-sequence'
    case 66238:                     // 'namespace' 'empty-sequence'
    case 66270:                     // 'processing-instruction' 'empty-sequence'
    case 66647:                     // 'attribute' 'encoding'
    case 66686:                     // 'element' 'encoding'
    case 66750:                     // 'namespace' 'encoding'
    case 66782:                     // 'processing-instruction' 'encoding'
    case 68695:                     // 'attribute' 'every'
    case 68734:                     // 'element' 'every'
    case 68798:                     // 'namespace' 'every'
    case 68830:                     // 'processing-instruction' 'every'
    case 70231:                     // 'attribute' 'exit'
    case 70270:                     // 'element' 'exit'
    case 70334:                     // 'namespace' 'exit'
    case 70366:                     // 'processing-instruction' 'exit'
    case 70743:                     // 'attribute' 'external'
    case 70782:                     // 'element' 'external'
    case 70846:                     // 'namespace' 'external'
    case 70878:                     // 'processing-instruction' 'external'
    case 71255:                     // 'attribute' 'first'
    case 71294:                     // 'element' 'first'
    case 71358:                     // 'namespace' 'first'
    case 71390:                     // 'processing-instruction' 'first'
    case 71767:                     // 'attribute' 'following'
    case 71806:                     // 'element' 'following'
    case 71870:                     // 'namespace' 'following'
    case 71902:                     // 'processing-instruction' 'following'
    case 72279:                     // 'attribute' 'following-sibling'
    case 72318:                     // 'element' 'following-sibling'
    case 72382:                     // 'namespace' 'following-sibling'
    case 72414:                     // 'processing-instruction' 'following-sibling'
    case 74839:                     // 'attribute' 'ft-option'
    case 74878:                     // 'element' 'ft-option'
    case 74942:                     // 'namespace' 'ft-option'
    case 74974:                     // 'processing-instruction' 'ft-option'
    case 76887:                     // 'attribute' 'function'
    case 76926:                     // 'element' 'function'
    case 76990:                     // 'namespace' 'function'
    case 77022:                     // 'processing-instruction' 'function'
    case 80471:                     // 'attribute' 'if'
    case 80510:                     // 'element' 'if'
    case 80574:                     // 'namespace' 'if'
    case 80606:                     // 'processing-instruction' 'if'
    case 80983:                     // 'attribute' 'import'
    case 81022:                     // 'element' 'import'
    case 81086:                     // 'namespace' 'import'
    case 81118:                     // 'processing-instruction' 'import'
    case 81495:                     // 'attribute' 'in'
    case 81534:                     // 'element' 'in'
    case 81598:                     // 'namespace' 'in'
    case 81630:                     // 'processing-instruction' 'in'
    case 82007:                     // 'attribute' 'index'
    case 82046:                     // 'element' 'index'
    case 82110:                     // 'namespace' 'index'
    case 82142:                     // 'processing-instruction' 'index'
    case 84055:                     // 'attribute' 'insert'
    case 84094:                     // 'element' 'insert'
    case 84158:                     // 'namespace' 'insert'
    case 84190:                     // 'processing-instruction' 'insert'
    case 85079:                     // 'attribute' 'integrity'
    case 85118:                     // 'element' 'integrity'
    case 85182:                     // 'namespace' 'integrity'
    case 85214:                     // 'processing-instruction' 'integrity'
    case 87127:                     // 'attribute' 'item'
    case 87166:                     // 'element' 'item'
    case 87230:                     // 'namespace' 'item'
    case 87262:                     // 'processing-instruction' 'item'
    case 88151:                     // 'attribute' 'json-item'
    case 88190:                     // 'element' 'json-item'
    case 89687:                     // 'attribute' 'last'
    case 89726:                     // 'element' 'last'
    case 89790:                     // 'namespace' 'last'
    case 89822:                     // 'processing-instruction' 'last'
    case 90199:                     // 'attribute' 'lax'
    case 90238:                     // 'element' 'lax'
    case 90302:                     // 'namespace' 'lax'
    case 90334:                     // 'processing-instruction' 'lax'
    case 92759:                     // 'attribute' 'loop'
    case 92798:                     // 'element' 'loop'
    case 92862:                     // 'namespace' 'loop'
    case 92894:                     // 'processing-instruction' 'loop'
    case 94295:                     // 'attribute' 'map'
    case 94334:                     // 'element' 'map'
    case 94398:                     // 'namespace' 'map'
    case 94430:                     // 'processing-instruction' 'map'
    case 96343:                     // 'attribute' 'module'
    case 96382:                     // 'element' 'module'
    case 96446:                     // 'namespace' 'module'
    case 96478:                     // 'processing-instruction' 'module'
    case 97367:                     // 'attribute' 'namespace'
    case 97406:                     // 'element' 'namespace'
    case 97470:                     // 'namespace' 'namespace'
    case 97502:                     // 'processing-instruction' 'namespace'
    case 97879:                     // 'attribute' 'namespace-node'
    case 97918:                     // 'element' 'namespace-node'
    case 97982:                     // 'namespace' 'namespace-node'
    case 98014:                     // 'processing-instruction' 'namespace-node'
    case 100951:                    // 'attribute' 'node'
    case 100990:                    // 'element' 'node'
    case 101054:                    // 'namespace' 'node'
    case 101086:                    // 'processing-instruction' 'node'
    case 101463:                    // 'attribute' 'nodes'
    case 101502:                    // 'element' 'nodes'
    case 101566:                    // 'namespace' 'nodes'
    case 101598:                    // 'processing-instruction' 'nodes'
    case 102487:                    // 'attribute' 'object'
    case 102526:                    // 'element' 'object'
    case 105047:                    // 'attribute' 'option'
    case 105086:                    // 'element' 'option'
    case 105150:                    // 'namespace' 'option'
    case 105182:                    // 'processing-instruction' 'option'
    case 106583:                    // 'attribute' 'ordered'
    case 106622:                    // 'element' 'ordered'
    case 106686:                    // 'namespace' 'ordered'
    case 106718:                    // 'processing-instruction' 'ordered'
    case 107095:                    // 'attribute' 'ordering'
    case 107134:                    // 'element' 'ordering'
    case 107198:                    // 'namespace' 'ordering'
    case 107230:                    // 'processing-instruction' 'ordering'
    case 108631:                    // 'attribute' 'parent'
    case 108670:                    // 'element' 'parent'
    case 108734:                    // 'namespace' 'parent'
    case 108766:                    // 'processing-instruction' 'parent'
    case 111703:                    // 'attribute' 'preceding'
    case 111742:                    // 'element' 'preceding'
    case 111806:                    // 'namespace' 'preceding'
    case 111838:                    // 'processing-instruction' 'preceding'
    case 112215:                    // 'attribute' 'preceding-sibling'
    case 112254:                    // 'element' 'preceding-sibling'
    case 112318:                    // 'namespace' 'preceding-sibling'
    case 112350:                    // 'processing-instruction' 'preceding-sibling'
    case 113751:                    // 'attribute' 'processing-instruction'
    case 113790:                    // 'element' 'processing-instruction'
    case 113854:                    // 'namespace' 'processing-instruction'
    case 113886:                    // 'processing-instruction' 'processing-instruction'
    case 114775:                    // 'attribute' 'rename'
    case 114814:                    // 'element' 'rename'
    case 114878:                    // 'namespace' 'rename'
    case 114910:                    // 'processing-instruction' 'rename'
    case 115287:                    // 'attribute' 'replace'
    case 115326:                    // 'element' 'replace'
    case 115390:                    // 'namespace' 'replace'
    case 115422:                    // 'processing-instruction' 'replace'
    case 116311:                    // 'attribute' 'returning'
    case 116350:                    // 'element' 'returning'
    case 116414:                    // 'namespace' 'returning'
    case 116446:                    // 'processing-instruction' 'returning'
    case 116823:                    // 'attribute' 'revalidation'
    case 116862:                    // 'element' 'revalidation'
    case 116926:                    // 'namespace' 'revalidation'
    case 116958:                    // 'processing-instruction' 'revalidation'
    case 118359:                    // 'attribute' 'schema'
    case 118398:                    // 'element' 'schema'
    case 118462:                    // 'namespace' 'schema'
    case 118494:                    // 'processing-instruction' 'schema'
    case 118871:                    // 'attribute' 'schema-attribute'
    case 118910:                    // 'element' 'schema-attribute'
    case 118974:                    // 'namespace' 'schema-attribute'
    case 119006:                    // 'processing-instruction' 'schema-attribute'
    case 119383:                    // 'attribute' 'schema-element'
    case 119422:                    // 'element' 'schema-element'
    case 119486:                    // 'namespace' 'schema-element'
    case 119518:                    // 'processing-instruction' 'schema-element'
    case 119895:                    // 'attribute' 'score'
    case 119934:                    // 'element' 'score'
    case 119998:                    // 'namespace' 'score'
    case 120030:                    // 'processing-instruction' 'score'
    case 120407:                    // 'attribute' 'self'
    case 120446:                    // 'element' 'self'
    case 120510:                    // 'namespace' 'self'
    case 120542:                    // 'processing-instruction' 'self'
    case 122967:                    // 'attribute' 'sliding'
    case 123006:                    // 'element' 'sliding'
    case 123070:                    // 'namespace' 'sliding'
    case 123102:                    // 'processing-instruction' 'sliding'
    case 123479:                    // 'attribute' 'some'
    case 123518:                    // 'element' 'some'
    case 123582:                    // 'namespace' 'some'
    case 123614:                    // 'processing-instruction' 'some'
    case 126039:                    // 'attribute' 'strict'
    case 126078:                    // 'element' 'strict'
    case 126142:                    // 'namespace' 'strict'
    case 126174:                    // 'processing-instruction' 'strict'
    case 127575:                    // 'attribute' 'switch'
    case 127614:                    // 'element' 'switch'
    case 127678:                    // 'namespace' 'switch'
    case 127710:                    // 'processing-instruction' 'switch'
    case 128087:                    // 'attribute' 'text'
    case 128126:                    // 'element' 'text'
    case 128190:                    // 'namespace' 'text'
    case 128222:                    // 'processing-instruction' 'text'
    case 131159:                    // 'attribute' 'try'
    case 131198:                    // 'element' 'try'
    case 131262:                    // 'namespace' 'try'
    case 131294:                    // 'processing-instruction' 'try'
    case 131671:                    // 'attribute' 'tumbling'
    case 131710:                    // 'element' 'tumbling'
    case 131774:                    // 'namespace' 'tumbling'
    case 131806:                    // 'processing-instruction' 'tumbling'
    case 132183:                    // 'attribute' 'type'
    case 132222:                    // 'element' 'type'
    case 132286:                    // 'namespace' 'type'
    case 132318:                    // 'processing-instruction' 'type'
    case 132695:                    // 'attribute' 'typeswitch'
    case 132734:                    // 'element' 'typeswitch'
    case 132798:                    // 'namespace' 'typeswitch'
    case 132830:                    // 'processing-instruction' 'typeswitch'
    case 134231:                    // 'attribute' 'unordered'
    case 134270:                    // 'element' 'unordered'
    case 134334:                    // 'namespace' 'unordered'
    case 134366:                    // 'processing-instruction' 'unordered'
    case 134743:                    // 'attribute' 'updating'
    case 134782:                    // 'element' 'updating'
    case 134846:                    // 'namespace' 'updating'
    case 134878:                    // 'processing-instruction' 'updating'
    case 136279:                    // 'attribute' 'validate'
    case 136318:                    // 'element' 'validate'
    case 136382:                    // 'namespace' 'validate'
    case 136414:                    // 'processing-instruction' 'validate'
    case 136791:                    // 'attribute' 'value'
    case 136830:                    // 'element' 'value'
    case 136894:                    // 'namespace' 'value'
    case 136926:                    // 'processing-instruction' 'value'
    case 137303:                    // 'attribute' 'variable'
    case 137342:                    // 'element' 'variable'
    case 137406:                    // 'namespace' 'variable'
    case 137438:                    // 'processing-instruction' 'variable'
    case 137815:                    // 'attribute' 'version'
    case 137854:                    // 'element' 'version'
    case 137918:                    // 'namespace' 'version'
    case 137950:                    // 'processing-instruction' 'version'
    case 139863:                    // 'attribute' 'while'
    case 139902:                    // 'element' 'while'
    case 139966:                    // 'namespace' 'while'
    case 139998:                    // 'processing-instruction' 'while'
    case 143447:                    // 'attribute' 'xquery'
    case 143486:                    // 'element' 'xquery'
    case 143550:                    // 'namespace' 'xquery'
    case 143582:                    // 'processing-instruction' 'xquery'
    case 144467:                    // 'array' '{'
    case 144471:                    // 'attribute' '{'
    case 144485:                    // 'comment' '{'
    case 144508:                    // 'document' '{'
    case 144510:                    // 'element' '{'
    case 144568:                    // 'map' '{'
    case 144574:                    // 'namespace' '{'
    case 144592:                    // 'ordered' '{'
    case 144606:                    // 'processing-instruction' '{'
    case 144634:                    // 'text' '{'
    case 144646:                    // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    switch (l1)
    {
    case 87:                        // 'attribute'
      lookahead2W(289);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' |
                                    // '>' | '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' |
                                    // 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    case 126:                       // 'element'
      lookahead2W(288);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' |
                                    // 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    case 184:                       // 'map'
      lookahead2W(246);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 190:                       // 'namespace'
    case 222:                       // 'processing-instruction'
      lookahead2W(287);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}' |
                                    // '}`'
      break;
    case 129:                       // 'empty-sequence'
    case 157:                       // 'if'
    case 170:                       // 'item'
    case 249:                       // 'switch'
    case 259:                       // 'typeswitch'
      lookahead2W(242);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 83:                        // 'array'
    case 101:                       // 'comment'
    case 124:                       // 'document'
    case 208:                       // 'ordered'
    case 250:                       // 'text'
    case 262:                       // 'unordered'
      lookahead2W(250);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}' | '}`'
      break;
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 98:                        // 'child'
    case 116:                       // 'descendant'
    case 117:                       // 'descendant-or-self'
    case 140:                       // 'following'
    case 141:                       // 'following-sibling'
    case 212:                       // 'parent'
    case 218:                       // 'preceding'
    case 219:                       // 'preceding-sibling'
    case 235:                       // 'self'
      lookahead2W(249);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    case 6:                         // EQName^Token
    case 75:                        // 'after'
    case 77:                        // 'allowing'
    case 80:                        // 'and'
    case 84:                        // 'as'
    case 85:                        // 'ascending'
    case 86:                        // 'at'
    case 88:                        // 'base-uri'
    case 89:                        // 'before'
    case 90:                        // 'boundary-space'
    case 91:                        // 'break'
    case 93:                        // 'case'
    case 94:                        // 'cast'
    case 95:                        // 'castable'
    case 96:                        // 'catch'
    case 99:                        // 'collation'
    case 102:                       // 'constraint'
    case 103:                       // 'construction'
    case 106:                       // 'context'
    case 107:                       // 'continue'
    case 108:                       // 'copy'
    case 109:                       // 'copy-namespaces'
    case 110:                       // 'count'
    case 111:                       // 'decimal-format'
    case 113:                       // 'declare'
    case 114:                       // 'default'
    case 115:                       // 'delete'
    case 118:                       // 'descending'
    case 123:                       // 'div'
    case 125:                       // 'document-node'
    case 127:                       // 'else'
    case 128:                       // 'empty'
    case 130:                       // 'encoding'
    case 131:                       // 'end'
    case 133:                       // 'eq'
    case 134:                       // 'every'
    case 136:                       // 'except'
    case 137:                       // 'exit'
    case 138:                       // 'external'
    case 139:                       // 'first'
    case 142:                       // 'for'
    case 146:                       // 'ft-option'
    case 150:                       // 'function'
    case 151:                       // 'ge'
    case 153:                       // 'group'
    case 155:                       // 'gt'
    case 156:                       // 'idiv'
    case 158:                       // 'import'
    case 159:                       // 'in'
    case 160:                       // 'index'
    case 164:                       // 'insert'
    case 165:                       // 'instance'
    case 166:                       // 'integrity'
    case 167:                       // 'intersect'
    case 168:                       // 'into'
    case 169:                       // 'is'
    case 172:                       // 'json-item'
    case 175:                       // 'last'
    case 176:                       // 'lax'
    case 177:                       // 'le'
    case 179:                       // 'let'
    case 181:                       // 'loop'
    case 183:                       // 'lt'
    case 186:                       // 'mod'
    case 187:                       // 'modify'
    case 188:                       // 'module'
    case 191:                       // 'namespace-node'
    case 192:                       // 'ne'
    case 197:                       // 'node'
    case 198:                       // 'nodes'
    case 200:                       // 'object'
    case 204:                       // 'only'
    case 205:                       // 'option'
    case 206:                       // 'or'
    case 207:                       // 'order'
    case 209:                       // 'ordering'
    case 224:                       // 'rename'
    case 225:                       // 'replace'
    case 226:                       // 'return'
    case 227:                       // 'returning'
    case 228:                       // 'revalidation'
    case 230:                       // 'satisfies'
    case 231:                       // 'schema'
    case 232:                       // 'schema-attribute'
    case 233:                       // 'schema-element'
    case 234:                       // 'score'
    case 240:                       // 'sliding'
    case 241:                       // 'some'
    case 242:                       // 'stable'
    case 243:                       // 'start'
    case 246:                       // 'strict'
    case 254:                       // 'to'
    case 255:                       // 'treat'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
    case 280:                       // 'xquery'
      lookahead2W(245);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 18003                 // 'array' '('
     || lk == 18092                 // 'json-item' '('
     || lk == 18120                 // 'object' '('
     || lk == 38487                 // 'attribute' 'after'
     || lk == 38526                 // 'element' 'after'
     || lk == 38590                 // 'namespace' 'after'
     || lk == 38622                 // 'processing-instruction' 'after'
     || lk == 41047                 // 'attribute' 'and'
     || lk == 41086                 // 'element' 'and'
     || lk == 41150                 // 'namespace' 'and'
     || lk == 41182                 // 'processing-instruction' 'and'
     || lk == 43095                 // 'attribute' 'as'
     || lk == 43134                 // 'element' 'as'
     || lk == 43198                 // 'namespace' 'as'
     || lk == 43230                 // 'processing-instruction' 'as'
     || lk == 43607                 // 'attribute' 'ascending'
     || lk == 43646                 // 'element' 'ascending'
     || lk == 43710                 // 'namespace' 'ascending'
     || lk == 43742                 // 'processing-instruction' 'ascending'
     || lk == 44119                 // 'attribute' 'at'
     || lk == 44158                 // 'element' 'at'
     || lk == 44222                 // 'namespace' 'at'
     || lk == 44254                 // 'processing-instruction' 'at'
     || lk == 45655                 // 'attribute' 'before'
     || lk == 45694                 // 'element' 'before'
     || lk == 45758                 // 'namespace' 'before'
     || lk == 45790                 // 'processing-instruction' 'before'
     || lk == 47703                 // 'attribute' 'case'
     || lk == 47742                 // 'element' 'case'
     || lk == 47806                 // 'namespace' 'case'
     || lk == 47838                 // 'processing-instruction' 'case'
     || lk == 48215                 // 'attribute' 'cast'
     || lk == 48254                 // 'element' 'cast'
     || lk == 48318                 // 'namespace' 'cast'
     || lk == 48350                 // 'processing-instruction' 'cast'
     || lk == 48727                 // 'attribute' 'castable'
     || lk == 48766                 // 'element' 'castable'
     || lk == 48830                 // 'namespace' 'castable'
     || lk == 48862                 // 'processing-instruction' 'castable'
     || lk == 50775                 // 'attribute' 'collation'
     || lk == 50814                 // 'element' 'collation'
     || lk == 50878                 // 'namespace' 'collation'
     || lk == 50910                 // 'processing-instruction' 'collation'
     || lk == 56407                 // 'attribute' 'count'
     || lk == 56446                 // 'element' 'count'
     || lk == 56510                 // 'namespace' 'count'
     || lk == 56542                 // 'processing-instruction' 'count'
     || lk == 58455                 // 'attribute' 'default'
     || lk == 58494                 // 'element' 'default'
     || lk == 58558                 // 'namespace' 'default'
     || lk == 58590                 // 'processing-instruction' 'default'
     || lk == 60503                 // 'attribute' 'descending'
     || lk == 60542                 // 'element' 'descending'
     || lk == 60606                 // 'namespace' 'descending'
     || lk == 60638                 // 'processing-instruction' 'descending'
     || lk == 63063                 // 'attribute' 'div'
     || lk == 63102                 // 'element' 'div'
     || lk == 63166                 // 'namespace' 'div'
     || lk == 63198                 // 'processing-instruction' 'div'
     || lk == 65111                 // 'attribute' 'else'
     || lk == 65150                 // 'element' 'else'
     || lk == 65214                 // 'namespace' 'else'
     || lk == 65246                 // 'processing-instruction' 'else'
     || lk == 65623                 // 'attribute' 'empty'
     || lk == 65662                 // 'element' 'empty'
     || lk == 65726                 // 'namespace' 'empty'
     || lk == 65758                 // 'processing-instruction' 'empty'
     || lk == 67159                 // 'attribute' 'end'
     || lk == 67198                 // 'element' 'end'
     || lk == 67262                 // 'namespace' 'end'
     || lk == 67294                 // 'processing-instruction' 'end'
     || lk == 68183                 // 'attribute' 'eq'
     || lk == 68222                 // 'element' 'eq'
     || lk == 68286                 // 'namespace' 'eq'
     || lk == 68318                 // 'processing-instruction' 'eq'
     || lk == 69719                 // 'attribute' 'except'
     || lk == 69758                 // 'element' 'except'
     || lk == 69822                 // 'namespace' 'except'
     || lk == 69854                 // 'processing-instruction' 'except'
     || lk == 72791                 // 'attribute' 'for'
     || lk == 72830                 // 'element' 'for'
     || lk == 72894                 // 'namespace' 'for'
     || lk == 72926                 // 'processing-instruction' 'for'
     || lk == 77399                 // 'attribute' 'ge'
     || lk == 77438                 // 'element' 'ge'
     || lk == 77502                 // 'namespace' 'ge'
     || lk == 77534                 // 'processing-instruction' 'ge'
     || lk == 78423                 // 'attribute' 'group'
     || lk == 78462                 // 'element' 'group'
     || lk == 78526                 // 'namespace' 'group'
     || lk == 78558                 // 'processing-instruction' 'group'
     || lk == 79447                 // 'attribute' 'gt'
     || lk == 79486                 // 'element' 'gt'
     || lk == 79550                 // 'namespace' 'gt'
     || lk == 79582                 // 'processing-instruction' 'gt'
     || lk == 79959                 // 'attribute' 'idiv'
     || lk == 79998                 // 'element' 'idiv'
     || lk == 80062                 // 'namespace' 'idiv'
     || lk == 80094                 // 'processing-instruction' 'idiv'
     || lk == 84567                 // 'attribute' 'instance'
     || lk == 84606                 // 'element' 'instance'
     || lk == 84670                 // 'namespace' 'instance'
     || lk == 84702                 // 'processing-instruction' 'instance'
     || lk == 85591                 // 'attribute' 'intersect'
     || lk == 85630                 // 'element' 'intersect'
     || lk == 85694                 // 'namespace' 'intersect'
     || lk == 85726                 // 'processing-instruction' 'intersect'
     || lk == 86103                 // 'attribute' 'into'
     || lk == 86142                 // 'element' 'into'
     || lk == 86206                 // 'namespace' 'into'
     || lk == 86238                 // 'processing-instruction' 'into'
     || lk == 86615                 // 'attribute' 'is'
     || lk == 86654                 // 'element' 'is'
     || lk == 86718                 // 'namespace' 'is'
     || lk == 86750                 // 'processing-instruction' 'is'
     || lk == 90711                 // 'attribute' 'le'
     || lk == 90750                 // 'element' 'le'
     || lk == 90814                 // 'namespace' 'le'
     || lk == 90846                 // 'processing-instruction' 'le'
     || lk == 91735                 // 'attribute' 'let'
     || lk == 91774                 // 'element' 'let'
     || lk == 91838                 // 'namespace' 'let'
     || lk == 91870                 // 'processing-instruction' 'let'
     || lk == 93783                 // 'attribute' 'lt'
     || lk == 93822                 // 'element' 'lt'
     || lk == 93886                 // 'namespace' 'lt'
     || lk == 93918                 // 'processing-instruction' 'lt'
     || lk == 95319                 // 'attribute' 'mod'
     || lk == 95358                 // 'element' 'mod'
     || lk == 95422                 // 'namespace' 'mod'
     || lk == 95454                 // 'processing-instruction' 'mod'
     || lk == 95831                 // 'attribute' 'modify'
     || lk == 95870                 // 'element' 'modify'
     || lk == 95934                 // 'namespace' 'modify'
     || lk == 95966                 // 'processing-instruction' 'modify'
     || lk == 98391                 // 'attribute' 'ne'
     || lk == 98430                 // 'element' 'ne'
     || lk == 98494                 // 'namespace' 'ne'
     || lk == 98526                 // 'processing-instruction' 'ne'
     || lk == 104535                // 'attribute' 'only'
     || lk == 104574                // 'element' 'only'
     || lk == 104638                // 'namespace' 'only'
     || lk == 104670                // 'processing-instruction' 'only'
     || lk == 105559                // 'attribute' 'or'
     || lk == 105598                // 'element' 'or'
     || lk == 105662                // 'namespace' 'or'
     || lk == 105694                // 'processing-instruction' 'or'
     || lk == 106071                // 'attribute' 'order'
     || lk == 106110                // 'element' 'order'
     || lk == 106174                // 'namespace' 'order'
     || lk == 106206                // 'processing-instruction' 'order'
     || lk == 115799                // 'attribute' 'return'
     || lk == 115838                // 'element' 'return'
     || lk == 115902                // 'namespace' 'return'
     || lk == 115934                // 'processing-instruction' 'return'
     || lk == 117847                // 'attribute' 'satisfies'
     || lk == 117886                // 'element' 'satisfies'
     || lk == 117950                // 'namespace' 'satisfies'
     || lk == 117982                // 'processing-instruction' 'satisfies'
     || lk == 123991                // 'attribute' 'stable'
     || lk == 124030                // 'element' 'stable'
     || lk == 124094                // 'namespace' 'stable'
     || lk == 124126                // 'processing-instruction' 'stable'
     || lk == 124503                // 'attribute' 'start'
     || lk == 124542                // 'element' 'start'
     || lk == 124606                // 'namespace' 'start'
     || lk == 124638                // 'processing-instruction' 'start'
     || lk == 130135                // 'attribute' 'to'
     || lk == 130174                // 'element' 'to'
     || lk == 130238                // 'namespace' 'to'
     || lk == 130270                // 'processing-instruction' 'to'
     || lk == 130647                // 'attribute' 'treat'
     || lk == 130686                // 'element' 'treat'
     || lk == 130750                // 'namespace' 'treat'
     || lk == 130782                // 'processing-instruction' 'treat'
     || lk == 133207                // 'attribute' 'union'
     || lk == 133246                // 'element' 'union'
     || lk == 133310                // 'namespace' 'union'
     || lk == 133342                // 'processing-instruction' 'union'
     || lk == 139351                // 'attribute' 'where'
     || lk == 139390                // 'element' 'where'
     || lk == 139454                // 'namespace' 'where'
     || lk == 139486                // 'processing-instruction' 'where'
     || lk == 141399                // 'attribute' 'with'
     || lk == 141438                // 'element' 'with'
     || lk == 141502                // 'namespace' 'with'
     || lk == 141534)               // 'processing-instruction' 'with'
    {
      lk = memoized(3, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(3, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 32:                        // '$'
    case 33:                        // '%'
    case 35:                        // '('
    case 45:                        // '.'
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
    case 66:                        // '?'
    case 70:                        // '['
    case 73:                        // '``['
    case 282:                       // '{'
    case 284:                       // '{|'
    case 3159:                      // 'attribute' EQName^Token
    case 3198:                      // 'element' EQName^Token
    case 9918:                      // 'namespace' NCName^Token
    case 9950:                      // 'processing-instruction' NCName^Token
    case 15366:                     // EQName^Token '#'
    case 15435:                     // 'after' '#'
    case 15437:                     // 'allowing' '#'
    case 15438:                     // 'ancestor' '#'
    case 15439:                     // 'ancestor-or-self' '#'
    case 15440:                     // 'and' '#'
    case 15443:                     // 'array' '#'
    case 15444:                     // 'as' '#'
    case 15445:                     // 'ascending' '#'
    case 15446:                     // 'at' '#'
    case 15447:                     // 'attribute' '#'
    case 15448:                     // 'base-uri' '#'
    case 15449:                     // 'before' '#'
    case 15450:                     // 'boundary-space' '#'
    case 15451:                     // 'break' '#'
    case 15453:                     // 'case' '#'
    case 15454:                     // 'cast' '#'
    case 15455:                     // 'castable' '#'
    case 15456:                     // 'catch' '#'
    case 15458:                     // 'child' '#'
    case 15459:                     // 'collation' '#'
    case 15461:                     // 'comment' '#'
    case 15462:                     // 'constraint' '#'
    case 15463:                     // 'construction' '#'
    case 15466:                     // 'context' '#'
    case 15467:                     // 'continue' '#'
    case 15468:                     // 'copy' '#'
    case 15469:                     // 'copy-namespaces' '#'
    case 15470:                     // 'count' '#'
    case 15471:                     // 'decimal-format' '#'
    case 15473:                     // 'declare' '#'
    case 15474:                     // 'default' '#'
    case 15475:                     // 'delete' '#'
    case 15476:                     // 'descendant' '#'
    case 15477:                     // 'descendant-or-self' '#'
    case 15478:                     // 'descending' '#'
    case 15483:                     // 'div' '#'
    case 15484:                     // 'document' '#'
    case 15485:                     // 'document-node' '#'
    case 15486:                     // 'element' '#'
    case 15487:                     // 'else' '#'
    case 15488:                     // 'empty' '#'
    case 15489:                     // 'empty-sequence' '#'
    case 15490:                     // 'encoding' '#'
    case 15491:                     // 'end' '#'
    case 15493:                     // 'eq' '#'
    case 15494:                     // 'every' '#'
    case 15496:                     // 'except' '#'
    case 15497:                     // 'exit' '#'
    case 15498:                     // 'external' '#'
    case 15499:                     // 'first' '#'
    case 15500:                     // 'following' '#'
    case 15501:                     // 'following-sibling' '#'
    case 15502:                     // 'for' '#'
    case 15506:                     // 'ft-option' '#'
    case 15510:                     // 'function' '#'
    case 15511:                     // 'ge' '#'
    case 15513:                     // 'group' '#'
    case 15515:                     // 'gt' '#'
    case 15516:                     // 'idiv' '#'
    case 15517:                     // 'if' '#'
    case 15518:                     // 'import' '#'
    case 15519:                     // 'in' '#'
    case 15520:                     // 'index' '#'
    case 15524:                     // 'insert' '#'
    case 15525:                     // 'instance' '#'
    case 15526:                     // 'integrity' '#'
    case 15527:                     // 'intersect' '#'
    case 15528:                     // 'into' '#'
    case 15529:                     // 'is' '#'
    case 15530:                     // 'item' '#'
    case 15532:                     // 'json-item' '#'
    case 15535:                     // 'last' '#'
    case 15536:                     // 'lax' '#'
    case 15537:                     // 'le' '#'
    case 15539:                     // 'let' '#'
    case 15541:                     // 'loop' '#'
    case 15543:                     // 'lt' '#'
    case 15544:                     // 'map' '#'
    case 15546:                     // 'mod' '#'
    case 15547:                     // 'modify' '#'
    case 15548:                     // 'module' '#'
    case 15550:                     // 'namespace' '#'
    case 15551:                     // 'namespace-node' '#'
    case 15552:                     // 'ne' '#'
    case 15557:                     // 'node' '#'
    case 15558:                     // 'nodes' '#'
    case 15560:                     // 'object' '#'
    case 15564:                     // 'only' '#'
    case 15565:                     // 'option' '#'
    case 15566:                     // 'or' '#'
    case 15567:                     // 'order' '#'
    case 15568:                     // 'ordered' '#'
    case 15569:                     // 'ordering' '#'
    case 15572:                     // 'parent' '#'
    case 15578:                     // 'preceding' '#'
    case 15579:                     // 'preceding-sibling' '#'
    case 15582:                     // 'processing-instruction' '#'
    case 15584:                     // 'rename' '#'
    case 15585:                     // 'replace' '#'
    case 15586:                     // 'return' '#'
    case 15587:                     // 'returning' '#'
    case 15588:                     // 'revalidation' '#'
    case 15590:                     // 'satisfies' '#'
    case 15591:                     // 'schema' '#'
    case 15592:                     // 'schema-attribute' '#'
    case 15593:                     // 'schema-element' '#'
    case 15594:                     // 'score' '#'
    case 15595:                     // 'self' '#'
    case 15600:                     // 'sliding' '#'
    case 15601:                     // 'some' '#'
    case 15602:                     // 'stable' '#'
    case 15603:                     // 'start' '#'
    case 15606:                     // 'strict' '#'
    case 15609:                     // 'switch' '#'
    case 15610:                     // 'text' '#'
    case 15614:                     // 'to' '#'
    case 15615:                     // 'treat' '#'
    case 15616:                     // 'try' '#'
    case 15617:                     // 'tumbling' '#'
    case 15618:                     // 'type' '#'
    case 15619:                     // 'typeswitch' '#'
    case 15620:                     // 'union' '#'
    case 15622:                     // 'unordered' '#'
    case 15623:                     // 'updating' '#'
    case 15626:                     // 'validate' '#'
    case 15627:                     // 'value' '#'
    case 15628:                     // 'variable' '#'
    case 15629:                     // 'version' '#'
    case 15632:                     // 'where' '#'
    case 15633:                     // 'while' '#'
    case 15636:                     // 'with' '#'
    case 15640:                     // 'xquery' '#'
    case 17926:                     // EQName^Token '('
    case 17995:                     // 'after' '('
    case 17997:                     // 'allowing' '('
    case 17998:                     // 'ancestor' '('
    case 17999:                     // 'ancestor-or-self' '('
    case 18000:                     // 'and' '('
    case 18004:                     // 'as' '('
    case 18005:                     // 'ascending' '('
    case 18006:                     // 'at' '('
    case 18008:                     // 'base-uri' '('
    case 18009:                     // 'before' '('
    case 18010:                     // 'boundary-space' '('
    case 18011:                     // 'break' '('
    case 18013:                     // 'case' '('
    case 18014:                     // 'cast' '('
    case 18015:                     // 'castable' '('
    case 18016:                     // 'catch' '('
    case 18018:                     // 'child' '('
    case 18019:                     // 'collation' '('
    case 18022:                     // 'constraint' '('
    case 18023:                     // 'construction' '('
    case 18026:                     // 'context' '('
    case 18027:                     // 'continue' '('
    case 18028:                     // 'copy' '('
    case 18029:                     // 'copy-namespaces' '('
    case 18030:                     // 'count' '('
    case 18031:                     // 'decimal-format' '('
    case 18033:                     // 'declare' '('
    case 18034:                     // 'default' '('
    case 18035:                     // 'delete' '('
    case 18036:                     // 'descendant' '('
    case 18037:                     // 'descendant-or-self' '('
    case 18038:                     // 'descending' '('
    case 18043:                     // 'div' '('
    case 18044:                     // 'document' '('
    case 18047:                     // 'else' '('
    case 18048:                     // 'empty' '('
    case 18050:                     // 'encoding' '('
    case 18051:                     // 'end' '('
    case 18053:                     // 'eq' '('
    case 18054:                     // 'every' '('
    case 18056:                     // 'except' '('
    case 18057:                     // 'exit' '('
    case 18058:                     // 'external' '('
    case 18059:                     // 'first' '('
    case 18060:                     // 'following' '('
    case 18061:                     // 'following-sibling' '('
    case 18062:                     // 'for' '('
    case 18066:                     // 'ft-option' '('
    case 18070:                     // 'function' '('
    case 18071:                     // 'ge' '('
    case 18073:                     // 'group' '('
    case 18075:                     // 'gt' '('
    case 18076:                     // 'idiv' '('
    case 18078:                     // 'import' '('
    case 18079:                     // 'in' '('
    case 18080:                     // 'index' '('
    case 18084:                     // 'insert' '('
    case 18085:                     // 'instance' '('
    case 18086:                     // 'integrity' '('
    case 18087:                     // 'intersect' '('
    case 18088:                     // 'into' '('
    case 18089:                     // 'is' '('
    case 18095:                     // 'last' '('
    case 18096:                     // 'lax' '('
    case 18097:                     // 'le' '('
    case 18099:                     // 'let' '('
    case 18101:                     // 'loop' '('
    case 18103:                     // 'lt' '('
    case 18106:                     // 'mod' '('
    case 18107:                     // 'modify' '('
    case 18108:                     // 'module' '('
    case 18110:                     // 'namespace' '('
    case 18112:                     // 'ne' '('
    case 18118:                     // 'nodes' '('
    case 18124:                     // 'only' '('
    case 18125:                     // 'option' '('
    case 18126:                     // 'or' '('
    case 18127:                     // 'order' '('
    case 18128:                     // 'ordered' '('
    case 18129:                     // 'ordering' '('
    case 18132:                     // 'parent' '('
    case 18138:                     // 'preceding' '('
    case 18139:                     // 'preceding-sibling' '('
    case 18144:                     // 'rename' '('
    case 18145:                     // 'replace' '('
    case 18146:                     // 'return' '('
    case 18147:                     // 'returning' '('
    case 18148:                     // 'revalidation' '('
    case 18150:                     // 'satisfies' '('
    case 18151:                     // 'schema' '('
    case 18154:                     // 'score' '('
    case 18155:                     // 'self' '('
    case 18160:                     // 'sliding' '('
    case 18161:                     // 'some' '('
    case 18162:                     // 'stable' '('
    case 18163:                     // 'start' '('
    case 18166:                     // 'strict' '('
    case 18174:                     // 'to' '('
    case 18175:                     // 'treat' '('
    case 18176:                     // 'try' '('
    case 18177:                     // 'tumbling' '('
    case 18178:                     // 'type' '('
    case 18180:                     // 'union' '('
    case 18182:                     // 'unordered' '('
    case 18183:                     // 'updating' '('
    case 18186:                     // 'validate' '('
    case 18187:                     // 'value' '('
    case 18188:                     // 'variable' '('
    case 18189:                     // 'version' '('
    case 18192:                     // 'where' '('
    case 18193:                     // 'while' '('
    case 18196:                     // 'with' '('
    case 18200:                     // 'xquery' '('
    case 39511:                     // 'attribute' 'allowing'
    case 39550:                     // 'element' 'allowing'
    case 39614:                     // 'namespace' 'allowing'
    case 39646:                     // 'processing-instruction' 'allowing'
    case 40023:                     // 'attribute' 'ancestor'
    case 40062:                     // 'element' 'ancestor'
    case 40126:                     // 'namespace' 'ancestor'
    case 40158:                     // 'processing-instruction' 'ancestor'
    case 40535:                     // 'attribute' 'ancestor-or-self'
    case 40574:                     // 'element' 'ancestor-or-self'
    case 40638:                     // 'namespace' 'ancestor-or-self'
    case 40670:                     // 'processing-instruction' 'ancestor-or-self'
    case 42583:                     // 'attribute' 'array'
    case 42622:                     // 'element' 'array'
    case 44631:                     // 'attribute' 'attribute'
    case 44670:                     // 'element' 'attribute'
    case 44734:                     // 'namespace' 'attribute'
    case 44766:                     // 'processing-instruction' 'attribute'
    case 45143:                     // 'attribute' 'base-uri'
    case 45182:                     // 'element' 'base-uri'
    case 45246:                     // 'namespace' 'base-uri'
    case 45278:                     // 'processing-instruction' 'base-uri'
    case 46167:                     // 'attribute' 'boundary-space'
    case 46206:                     // 'element' 'boundary-space'
    case 46270:                     // 'namespace' 'boundary-space'
    case 46302:                     // 'processing-instruction' 'boundary-space'
    case 46679:                     // 'attribute' 'break'
    case 46718:                     // 'element' 'break'
    case 46782:                     // 'namespace' 'break'
    case 46814:                     // 'processing-instruction' 'break'
    case 49239:                     // 'attribute' 'catch'
    case 49278:                     // 'element' 'catch'
    case 49342:                     // 'namespace' 'catch'
    case 49374:                     // 'processing-instruction' 'catch'
    case 50263:                     // 'attribute' 'child'
    case 50302:                     // 'element' 'child'
    case 50366:                     // 'namespace' 'child'
    case 50398:                     // 'processing-instruction' 'child'
    case 51799:                     // 'attribute' 'comment'
    case 51838:                     // 'element' 'comment'
    case 51902:                     // 'namespace' 'comment'
    case 51934:                     // 'processing-instruction' 'comment'
    case 52311:                     // 'attribute' 'constraint'
    case 52350:                     // 'element' 'constraint'
    case 52414:                     // 'namespace' 'constraint'
    case 52446:                     // 'processing-instruction' 'constraint'
    case 52823:                     // 'attribute' 'construction'
    case 52862:                     // 'element' 'construction'
    case 52926:                     // 'namespace' 'construction'
    case 52958:                     // 'processing-instruction' 'construction'
    case 54359:                     // 'attribute' 'context'
    case 54398:                     // 'element' 'context'
    case 54462:                     // 'namespace' 'context'
    case 54494:                     // 'processing-instruction' 'context'
    case 54871:                     // 'attribute' 'continue'
    case 54910:                     // 'element' 'continue'
    case 54974:                     // 'namespace' 'continue'
    case 55006:                     // 'processing-instruction' 'continue'
    case 55383:                     // 'attribute' 'copy'
    case 55422:                     // 'element' 'copy'
    case 55486:                     // 'namespace' 'copy'
    case 55518:                     // 'processing-instruction' 'copy'
    case 55895:                     // 'attribute' 'copy-namespaces'
    case 55934:                     // 'element' 'copy-namespaces'
    case 55998:                     // 'namespace' 'copy-namespaces'
    case 56030:                     // 'processing-instruction' 'copy-namespaces'
    case 56919:                     // 'attribute' 'decimal-format'
    case 56958:                     // 'element' 'decimal-format'
    case 57022:                     // 'namespace' 'decimal-format'
    case 57054:                     // 'processing-instruction' 'decimal-format'
    case 57943:                     // 'attribute' 'declare'
    case 57982:                     // 'element' 'declare'
    case 58046:                     // 'namespace' 'declare'
    case 58078:                     // 'processing-instruction' 'declare'
    case 58967:                     // 'attribute' 'delete'
    case 59006:                     // 'element' 'delete'
    case 59070:                     // 'namespace' 'delete'
    case 59102:                     // 'processing-instruction' 'delete'
    case 59479:                     // 'attribute' 'descendant'
    case 59518:                     // 'element' 'descendant'
    case 59582:                     // 'namespace' 'descendant'
    case 59614:                     // 'processing-instruction' 'descendant'
    case 59991:                     // 'attribute' 'descendant-or-self'
    case 60030:                     // 'element' 'descendant-or-self'
    case 60094:                     // 'namespace' 'descendant-or-self'
    case 60126:                     // 'processing-instruction' 'descendant-or-self'
    case 63575:                     // 'attribute' 'document'
    case 63614:                     // 'element' 'document'
    case 63678:                     // 'namespace' 'document'
    case 63710:                     // 'processing-instruction' 'document'
    case 64087:                     // 'attribute' 'document-node'
    case 64126:                     // 'element' 'document-node'
    case 64190:                     // 'namespace' 'document-node'
    case 64222:                     // 'processing-instruction' 'document-node'
    case 64599:                     // 'attribute' 'element'
    case 64638:                     // 'element' 'element'
    case 64702:                     // 'namespace' 'element'
    case 64734:                     // 'processing-instruction' 'element'
    case 66135:                     // 'attribute' 'empty-sequence'
    case 66174:                     // 'element' 'empty-sequence'
    case 66238:                     // 'namespace' 'empty-sequence'
    case 66270:                     // 'processing-instruction' 'empty-sequence'
    case 66647:                     // 'attribute' 'encoding'
    case 66686:                     // 'element' 'encoding'
    case 66750:                     // 'namespace' 'encoding'
    case 66782:                     // 'processing-instruction' 'encoding'
    case 68695:                     // 'attribute' 'every'
    case 68734:                     // 'element' 'every'
    case 68798:                     // 'namespace' 'every'
    case 68830:                     // 'processing-instruction' 'every'
    case 70231:                     // 'attribute' 'exit'
    case 70270:                     // 'element' 'exit'
    case 70334:                     // 'namespace' 'exit'
    case 70366:                     // 'processing-instruction' 'exit'
    case 70743:                     // 'attribute' 'external'
    case 70782:                     // 'element' 'external'
    case 70846:                     // 'namespace' 'external'
    case 70878:                     // 'processing-instruction' 'external'
    case 71255:                     // 'attribute' 'first'
    case 71294:                     // 'element' 'first'
    case 71358:                     // 'namespace' 'first'
    case 71390:                     // 'processing-instruction' 'first'
    case 71767:                     // 'attribute' 'following'
    case 71806:                     // 'element' 'following'
    case 71870:                     // 'namespace' 'following'
    case 71902:                     // 'processing-instruction' 'following'
    case 72279:                     // 'attribute' 'following-sibling'
    case 72318:                     // 'element' 'following-sibling'
    case 72382:                     // 'namespace' 'following-sibling'
    case 72414:                     // 'processing-instruction' 'following-sibling'
    case 74839:                     // 'attribute' 'ft-option'
    case 74878:                     // 'element' 'ft-option'
    case 74942:                     // 'namespace' 'ft-option'
    case 74974:                     // 'processing-instruction' 'ft-option'
    case 76887:                     // 'attribute' 'function'
    case 76926:                     // 'element' 'function'
    case 76990:                     // 'namespace' 'function'
    case 77022:                     // 'processing-instruction' 'function'
    case 80471:                     // 'attribute' 'if'
    case 80510:                     // 'element' 'if'
    case 80574:                     // 'namespace' 'if'
    case 80606:                     // 'processing-instruction' 'if'
    case 80983:                     // 'attribute' 'import'
    case 81022:                     // 'element' 'import'
    case 81086:                     // 'namespace' 'import'
    case 81118:                     // 'processing-instruction' 'import'
    case 81495:                     // 'attribute' 'in'
    case 81534:                     // 'element' 'in'
    case 81598:                     // 'namespace' 'in'
    case 81630:                     // 'processing-instruction' 'in'
    case 82007:                     // 'attribute' 'index'
    case 82046:                     // 'element' 'index'
    case 82110:                     // 'namespace' 'index'
    case 82142:                     // 'processing-instruction' 'index'
    case 84055:                     // 'attribute' 'insert'
    case 84094:                     // 'element' 'insert'
    case 84158:                     // 'namespace' 'insert'
    case 84190:                     // 'processing-instruction' 'insert'
    case 85079:                     // 'attribute' 'integrity'
    case 85118:                     // 'element' 'integrity'
    case 85182:                     // 'namespace' 'integrity'
    case 85214:                     // 'processing-instruction' 'integrity'
    case 87127:                     // 'attribute' 'item'
    case 87166:                     // 'element' 'item'
    case 87230:                     // 'namespace' 'item'
    case 87262:                     // 'processing-instruction' 'item'
    case 88151:                     // 'attribute' 'json-item'
    case 88190:                     // 'element' 'json-item'
    case 89687:                     // 'attribute' 'last'
    case 89726:                     // 'element' 'last'
    case 89790:                     // 'namespace' 'last'
    case 89822:                     // 'processing-instruction' 'last'
    case 90199:                     // 'attribute' 'lax'
    case 90238:                     // 'element' 'lax'
    case 90302:                     // 'namespace' 'lax'
    case 90334:                     // 'processing-instruction' 'lax'
    case 92759:                     // 'attribute' 'loop'
    case 92798:                     // 'element' 'loop'
    case 92862:                     // 'namespace' 'loop'
    case 92894:                     // 'processing-instruction' 'loop'
    case 94295:                     // 'attribute' 'map'
    case 94334:                     // 'element' 'map'
    case 94398:                     // 'namespace' 'map'
    case 94430:                     // 'processing-instruction' 'map'
    case 96343:                     // 'attribute' 'module'
    case 96382:                     // 'element' 'module'
    case 96446:                     // 'namespace' 'module'
    case 96478:                     // 'processing-instruction' 'module'
    case 97367:                     // 'attribute' 'namespace'
    case 97406:                     // 'element' 'namespace'
    case 97470:                     // 'namespace' 'namespace'
    case 97502:                     // 'processing-instruction' 'namespace'
    case 97879:                     // 'attribute' 'namespace-node'
    case 97918:                     // 'element' 'namespace-node'
    case 97982:                     // 'namespace' 'namespace-node'
    case 98014:                     // 'processing-instruction' 'namespace-node'
    case 100951:                    // 'attribute' 'node'
    case 100990:                    // 'element' 'node'
    case 101054:                    // 'namespace' 'node'
    case 101086:                    // 'processing-instruction' 'node'
    case 101463:                    // 'attribute' 'nodes'
    case 101502:                    // 'element' 'nodes'
    case 101566:                    // 'namespace' 'nodes'
    case 101598:                    // 'processing-instruction' 'nodes'
    case 102487:                    // 'attribute' 'object'
    case 102526:                    // 'element' 'object'
    case 105047:                    // 'attribute' 'option'
    case 105086:                    // 'element' 'option'
    case 105150:                    // 'namespace' 'option'
    case 105182:                    // 'processing-instruction' 'option'
    case 106583:                    // 'attribute' 'ordered'
    case 106622:                    // 'element' 'ordered'
    case 106686:                    // 'namespace' 'ordered'
    case 106718:                    // 'processing-instruction' 'ordered'
    case 107095:                    // 'attribute' 'ordering'
    case 107134:                    // 'element' 'ordering'
    case 107198:                    // 'namespace' 'ordering'
    case 107230:                    // 'processing-instruction' 'ordering'
    case 108631:                    // 'attribute' 'parent'
    case 108670:                    // 'element' 'parent'
    case 108734:                    // 'namespace' 'parent'
    case 108766:                    // 'processing-instruction' 'parent'
    case 111703:                    // 'attribute' 'preceding'
    case 111742:                    // 'element' 'preceding'
    case 111806:                    // 'namespace' 'preceding'
    case 111838:                    // 'processing-instruction' 'preceding'
    case 112215:                    // 'attribute' 'preceding-sibling'
    case 112254:                    // 'element' 'preceding-sibling'
    case 112318:                    // 'namespace' 'preceding-sibling'
    case 112350:                    // 'processing-instruction' 'preceding-sibling'
    case 113751:                    // 'attribute' 'processing-instruction'
    case 113790:                    // 'element' 'processing-instruction'
    case 113854:                    // 'namespace' 'processing-instruction'
    case 113886:                    // 'processing-instruction' 'processing-instruction'
    case 114775:                    // 'attribute' 'rename'
    case 114814:                    // 'element' 'rename'
    case 114878:                    // 'namespace' 'rename'
    case 114910:                    // 'processing-instruction' 'rename'
    case 115287:                    // 'attribute' 'replace'
    case 115326:                    // 'element' 'replace'
    case 115390:                    // 'namespace' 'replace'
    case 115422:                    // 'processing-instruction' 'replace'
    case 116311:                    // 'attribute' 'returning'
    case 116350:                    // 'element' 'returning'
    case 116414:                    // 'namespace' 'returning'
    case 116446:                    // 'processing-instruction' 'returning'
    case 116823:                    // 'attribute' 'revalidation'
    case 116862:                    // 'element' 'revalidation'
    case 116926:                    // 'namespace' 'revalidation'
    case 116958:                    // 'processing-instruction' 'revalidation'
    case 118359:                    // 'attribute' 'schema'
    case 118398:                    // 'element' 'schema'
    case 118462:                    // 'namespace' 'schema'
    case 118494:                    // 'processing-instruction' 'schema'
    case 118871:                    // 'attribute' 'schema-attribute'
    case 118910:                    // 'element' 'schema-attribute'
    case 118974:                    // 'namespace' 'schema-attribute'
    case 119006:                    // 'processing-instruction' 'schema-attribute'
    case 119383:                    // 'attribute' 'schema-element'
    case 119422:                    // 'element' 'schema-element'
    case 119486:                    // 'namespace' 'schema-element'
    case 119518:                    // 'processing-instruction' 'schema-element'
    case 119895:                    // 'attribute' 'score'
    case 119934:                    // 'element' 'score'
    case 119998:                    // 'namespace' 'score'
    case 120030:                    // 'processing-instruction' 'score'
    case 120407:                    // 'attribute' 'self'
    case 120446:                    // 'element' 'self'
    case 120510:                    // 'namespace' 'self'
    case 120542:                    // 'processing-instruction' 'self'
    case 122967:                    // 'attribute' 'sliding'
    case 123006:                    // 'element' 'sliding'
    case 123070:                    // 'namespace' 'sliding'
    case 123102:                    // 'processing-instruction' 'sliding'
    case 123479:                    // 'attribute' 'some'
    case 123518:                    // 'element' 'some'
    case 123582:                    // 'namespace' 'some'
    case 123614:                    // 'processing-instruction' 'some'
    case 126039:                    // 'attribute' 'strict'
    case 126078:                    // 'element' 'strict'
    case 126142:                    // 'namespace' 'strict'
    case 126174:                    // 'processing-instruction' 'strict'
    case 127575:                    // 'attribute' 'switch'
    case 127614:                    // 'element' 'switch'
    case 127678:                    // 'namespace' 'switch'
    case 127710:                    // 'processing-instruction' 'switch'
    case 128087:                    // 'attribute' 'text'
    case 128126:                    // 'element' 'text'
    case 128190:                    // 'namespace' 'text'
    case 128222:                    // 'processing-instruction' 'text'
    case 131159:                    // 'attribute' 'try'
    case 131198:                    // 'element' 'try'
    case 131262:                    // 'namespace' 'try'
    case 131294:                    // 'processing-instruction' 'try'
    case 131671:                    // 'attribute' 'tumbling'
    case 131710:                    // 'element' 'tumbling'
    case 131774:                    // 'namespace' 'tumbling'
    case 131806:                    // 'processing-instruction' 'tumbling'
    case 132183:                    // 'attribute' 'type'
    case 132222:                    // 'element' 'type'
    case 132286:                    // 'namespace' 'type'
    case 132318:                    // 'processing-instruction' 'type'
    case 132695:                    // 'attribute' 'typeswitch'
    case 132734:                    // 'element' 'typeswitch'
    case 132798:                    // 'namespace' 'typeswitch'
    case 132830:                    // 'processing-instruction' 'typeswitch'
    case 134231:                    // 'attribute' 'unordered'
    case 134270:                    // 'element' 'unordered'
    case 134334:                    // 'namespace' 'unordered'
    case 134366:                    // 'processing-instruction' 'unordered'
    case 134743:                    // 'attribute' 'updating'
    case 134782:                    // 'element' 'updating'
    case 134846:                    // 'namespace' 'updating'
    case 134878:                    // 'processing-instruction' 'updating'
    case 136279:                    // 'attribute' 'validate'
    case 136318:                    // 'element' 'validate'
    case 136382:                    // 'namespace' 'validate'
    case 136414:                    // 'processing-instruction' 'validate'
    case 136791:                    // 'attribute' 'value'
    case 136830:                    // 'element' 'value'
    case 136894:                    // 'namespace' 'value'
    case 136926:                    // 'processing-instruction' 'value'
    case 137303:                    // 'attribute' 'variable'
    case 137342:                    // 'element' 'variable'
    case 137406:                    // 'namespace' 'variable'
    case 137438:                    // 'processing-instruction' 'variable'
    case 137815:                    // 'attribute' 'version'
    case 137854:                    // 'element' 'version'
    case 137918:                    // 'namespace' 'version'
    case 137950:                    // 'processing-instruction' 'version'
    case 139863:                    // 'attribute' 'while'
    case 139902:                    // 'element' 'while'
    case 139966:                    // 'namespace' 'while'
    case 139998:                    // 'processing-instruction' 'while'
    case 143447:                    // 'attribute' 'xquery'
    case 143486:                    // 'element' 'xquery'
    case 143550:                    // 'namespace' 'xquery'
    case 143582:                    // 'processing-instruction' 'xquery'
    case 144467:                    // 'array' '{'
    case 144471:                    // 'attribute' '{'
    case 144485:                    // 'comment' '{'
    case 144508:                    // 'document' '{'
    case 144510:                    // 'element' '{'
    case 144568:                    // 'map' '{'
    case 144574:                    // 'namespace' '{'
    case 144592:                    // 'ordered' '{'
    case 144606:                    // 'processing-instruction' '{'
    case 144634:                    // 'text' '{'
    case 144646:                    // 'unordered' '{'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 212:                       // 'parent'
    case 218:                       // 'preceding'
    case 219:                       // 'preceding-sibling'
      lookahead2W(244);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 46:                        // '..'
    case 26702:                     // 'ancestor' '::'
    case 26703:                     // 'ancestor-or-self' '::'
    case 26836:                     // 'parent' '::'
    case 26842:                     // 'preceding' '::'
    case 26843:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(240);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    switch (l1)
    {
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 212:                       // 'parent'
    case 218:                       // 'preceding'
    case 219:                       // 'preceding-sibling'
      lookahead2W(244);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 46:                        // '..'
    case 26702:                     // 'ancestor' '::'
    case 26703:                     // 'ancestor-or-self' '::'
    case 26836:                     // 'parent' '::'
    case 26842:                     // 'preceding' '::'
    case 26843:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(240);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 87:                        // 'attribute'
      lookahead2W(247);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    case 98:                        // 'child'
    case 116:                       // 'descendant'
    case 117:                       // 'descendant-or-self'
    case 140:                       // 'following'
    case 141:                       // 'following-sibling'
    case 235:                       // 'self'
      lookahead2W(244);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26711:                     // 'attribute' '::'
    case 26722:                     // 'child' '::'
    case 26740:                     // 'descendant' '::'
    case 26741:                     // 'descendant-or-self' '::'
    case 26764:                     // 'following' '::'
    case 26765:                     // 'following-sibling' '::'
    case 26859:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(261);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    switch (l1)
    {
    case 87:                        // 'attribute'
      lookahead2W(247);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    case 98:                        // 'child'
    case 116:                       // 'descendant'
    case 117:                       // 'descendant-or-self'
    case 140:                       // 'following'
    case 141:                       // 'following-sibling'
    case 235:                       // 'self'
      lookahead2W(244);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26711:                     // 'attribute' '::'
    case 26722:                     // 'child' '::'
    case 26740:                     // 'descendant' '::'
    case 26741:                     // 'descendant-or-self' '::'
    case 26764:                     // 'following' '::'
    case 26765:                     // 'following-sibling' '::'
    case 26859:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(261);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 98:                        // 'child'
      consume(98);                  // 'child'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
      break;
    case 116:                       // 'descendant'
      consume(116);                 // 'descendant'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
      break;
    case 87:                        // 'attribute'
      consume(87);                  // 'attribute'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
      break;
    case 235:                       // 'self'
      consume(235);                 // 'self'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
      break;
    case 117:                       // 'descendant-or-self'
      consume(117);                 // 'descendant-or-self'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
      break;
    case 141:                       // 'following-sibling'
      consume(141);                 // 'following-sibling'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
      break;
    default:
      consume(140);                 // 'following'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 98:                        // 'child'
      consumeT(98);                 // 'child'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
      break;
    case 116:                       // 'descendant'
      consumeT(116);                // 'descendant'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
      break;
    case 87:                        // 'attribute'
      consumeT(87);                 // 'attribute'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
      break;
    case 235:                       // 'self'
      consumeT(235);                // 'self'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
      break;
    case 117:                       // 'descendant-or-self'
      consumeT(117);                // 'descendant-or-self'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
      break;
    case 141:                       // 'following-sibling'
      consumeT(141);                // 'following-sibling'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
      break;
    default:
      consumeT(140);                // 'following'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 68)                   // '@'
    {
      consume(68);                  // '@'
    }
    lookahead1W(261);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 68)                   // '@'
    {
      consumeT(68);                 // '@'
    }
    lookahead1W(261);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 46:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(261);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 46:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(261);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 212:                       // 'parent'
      consume(212);                 // 'parent'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
      break;
    case 219:                       // 'preceding-sibling'
      consume(219);                 // 'preceding-sibling'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
      break;
    case 218:                       // 'preceding'
      consume(218);                 // 'preceding'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
      break;
    default:
      consume(79);                  // 'ancestor-or-self'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 212:                       // 'parent'
      consumeT(212);                // 'parent'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
      break;
    case 219:                       // 'preceding-sibling'
      consumeT(219);                // 'preceding-sibling'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
      break;
    case 218:                       // 'preceding'
      consumeT(218);                // 'preceding'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
      break;
    default:
      consumeT(79);                 // 'ancestor-or-self'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    consume(46);                    // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    consumeT(46);                   // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 83:                        // 'array'
    case 87:                        // 'attribute'
    case 101:                       // 'comment'
    case 125:                       // 'document-node'
    case 126:                       // 'element'
    case 172:                       // 'json-item'
    case 191:                       // 'namespace-node'
    case 197:                       // 'node'
    case 200:                       // 'object'
    case 222:                       // 'processing-instruction'
    case 232:                       // 'schema-attribute'
    case 233:                       // 'schema-element'
    case 250:                       // 'text'
      lookahead2W(243);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 18003:                     // 'array' '('
    case 18007:                     // 'attribute' '('
    case 18021:                     // 'comment' '('
    case 18045:                     // 'document-node' '('
    case 18046:                     // 'element' '('
    case 18092:                     // 'json-item' '('
    case 18111:                     // 'namespace-node' '('
    case 18117:                     // 'node' '('
    case 18120:                     // 'object' '('
    case 18142:                     // 'processing-instruction' '('
    case 18152:                     // 'schema-attribute' '('
    case 18153:                     // 'schema-element' '('
    case 18170:                     // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    switch (l1)
    {
    case 83:                        // 'array'
    case 87:                        // 'attribute'
    case 101:                       // 'comment'
    case 125:                       // 'document-node'
    case 126:                       // 'element'
    case 172:                       // 'json-item'
    case 191:                       // 'namespace-node'
    case 197:                       // 'node'
    case 200:                       // 'object'
    case 222:                       // 'processing-instruction'
    case 232:                       // 'schema-attribute'
    case 233:                       // 'schema-element'
    case 250:                       // 'text'
      lookahead2W(243);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 18003:                     // 'array' '('
    case 18007:                     // 'attribute' '('
    case 18021:                     // 'comment' '('
    case 18045:                     // 'document-node' '('
    case 18046:                     // 'element' '('
    case 18092:                     // 'json-item' '('
    case 18111:                     // 'namespace-node' '('
    case 18117:                     // 'node' '('
    case 18120:                     // 'object' '('
    case 18142:                     // 'processing-instruction' '('
    case 18152:                     // 'schema-attribute' '('
    case 18153:                     // 'schema-element' '('
    case 18170:                     // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 5:                         // Wildcard
      consume(5);                   // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 5:                         // Wildcard
      consumeT(5);                  // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(248);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      if (l1 != 35                  // '('
       && l1 != 66                  // '?'
       && l1 != 70)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 70:                      // '['
        whitespace();
        parse_Predicate();
        break;
      case 35:                      // '('
        whitespace();
        parse_ArgumentList();
        break;
      default:
        whitespace();
        parse_Lookup();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(248);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      if (l1 != 35                  // '('
       && l1 != 66                  // '?'
       && l1 != 70)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 70:                      // '['
        try_Predicate();
        break;
      case 35:                      // '('
        try_ArgumentList();
        break;
      default:
        try_Lookup();
      }
    }
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    consume(35);                    // '('
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        consume(42);                // ','
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_Argument();
      }
    }
    consume(38);                    // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    consumeT(35);                   // '('
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 38)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        consumeT(42);               // ','
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_Argument();
      }
    }
    consumeT(38);                   // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(240);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      if (l1 != 70)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(240);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      if (l1 != 70)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    consume(70);                    // '['
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(71);                    // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    consumeT(70);                   // '['
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(71);                   // ']'
  }

  function parse_Lookup()
  {
    eventHandler.startNonterminal("Lookup", e0);
    consume(66);                    // '?'
    lookahead1W(259);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("Lookup", e0);
  }

  function try_Lookup()
  {
    consumeT(66);                   // '?'
    lookahead1W(259);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_KeySpecifier();
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      consume(11);                  // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      consumeT(11);                 // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consume(8);                   // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      consume(9);                   // DecimalLiteral
      break;
    default:
      consume(10);                  // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consumeT(8);                  // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      consumeT(9);                  // DecimalLiteral
      break;
    default:
      consumeT(10);                 // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    consume(32);                    // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    consumeT(32);                   // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    consume(35);                    // '('
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    consume(38);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    consumeT(35);                   // '('
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 38)                   // ')'
    {
      try_Expr();
    }
    consumeT(38);                   // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    consume(45);                    // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    consumeT(45);                   // '.'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    consume(208);                   // 'ordered'
    lookahead1W(89);                // S^WS | '(:' | '{'
    consume(282);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(288);                   // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    consumeT(208);                  // 'ordered'
    lookahead1W(89);                // S^WS | '(:' | '{'
    consumeT(282);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(288);                  // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    consume(262);                   // 'unordered'
    lookahead1W(89);                // S^WS | '(:' | '{'
    consume(282);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(288);                   // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    consumeT(262);                  // 'unordered'
    lookahead1W(89);                // S^WS | '(:' | '{'
    consumeT(282);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(288);                  // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 66:                        // '?'
      lookahead2W(267);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19522:                     // '?' ')'
    case 21570:                     // '?' ','
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 66:                        // '?'
      lookahead2W(267);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19522:                     // '?' ')'
    case 21570:                     // '?' ','
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    consume(66);                    // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    consumeT(66);                   // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 55:                        // '<'
      parse_DirElemConstructor();
      break;
    case 56:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 55:                        // '<'
      try_DirElemConstructor();
      break;
    case 56:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    consume(55);                    // '<'
    lookahead1(4);                  // QName
    consume(20);                    // QName
    parse_DirAttributeList();
    switch (l1)
    {
    case 49:                        // '/>'
      consume(49);                  // '/>'
      break;
    default:
      consume(63);                  // '>'
      for (;;)
      {
        lookahead1(176);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 57)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      consume(57);                  // '</'
      lookahead1(4);                // QName
      consume(20);                  // QName
      lookahead1(13);               // S | '>'
      if (l1 == 22)                 // S
      {
        consume(22);                // S
      }
      lookahead1(9);                // '>'
      consume(63);                  // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    consumeT(55);                   // '<'
    lookahead1(4);                  // QName
    consumeT(20);                   // QName
    try_DirAttributeList();
    switch (l1)
    {
    case 49:                        // '/>'
      consumeT(49);                 // '/>'
      break;
    default:
      consumeT(63);                 // '>'
      for (;;)
      {
        lookahead1(176);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 57)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      consumeT(57);                 // '</'
      lookahead1(4);                // QName
      consumeT(20);                 // QName
      lookahead1(13);               // S | '>'
      if (l1 == 22)                 // S
      {
        consumeT(22);               // S
      }
      lookahead1(9);                // '>'
      consumeT(63);                 // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 22)                 // S
      {
        break;
      }
      consume(22);                  // S
      lookahead1(93);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        consume(20);                // QName
        lookahead1(12);             // S | '='
        if (l1 == 22)               // S
        {
          consume(22);              // S
        }
        lookahead1(8);              // '='
        consume(61);                // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 22)               // S
        {
          consume(22);              // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 22)                 // S
      {
        break;
      }
      consumeT(22);                 // S
      lookahead1(93);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        consumeT(20);               // QName
        lookahead1(12);             // S | '='
        if (l1 == 22)               // S
        {
          consumeT(22);             // S
        }
        lookahead1(8);              // '='
        consumeT(61);               // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 22)               // S
        {
          consumeT(22);             // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(15);                 // '"' | "'"
    switch (l1)
    {
    case 29:                        // '"'
      consume(29);                  // '"'
      for (;;)
      {
        lookahead1(169);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 29)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          consume(13);              // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      consume(29);                  // '"'
      break;
    default:
      consume(34);                  // "'"
      for (;;)
      {
        lookahead1(170);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 34)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          consume(14);              // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      consume(34);                  // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(15);                 // '"' | "'"
    switch (l1)
    {
    case 29:                        // '"'
      consumeT(29);                 // '"'
      for (;;)
      {
        lookahead1(169);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 29)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          consumeT(13);             // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      consumeT(29);                 // '"'
      break;
    default:
      consumeT(34);                 // "'"
      for (;;)
      {
        lookahead1(170);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 34)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          consumeT(14);             // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      consumeT(34);                 // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      consume(16);                  // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      consumeT(16);                 // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      consume(17);                  // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      consumeT(17);                 // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
      parse_DirectConstructor();
      break;
    case 4:                         // CDataSection
      consume(4);                   // CDataSection
      break;
    case 15:                        // ElementContentChar
      consume(15);                  // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
      try_DirectConstructor();
      break;
    case 4:                         // CDataSection
      consumeT(4);                  // CDataSection
      break;
    case 15:                        // ElementContentChar
      consumeT(15);                 // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    consume(56);                    // '<!--'
    lookahead1(1);                  // DirCommentContents
    consume(2);                     // DirCommentContents
    lookahead1(7);                  // '-->'
    consume(44);                    // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    consumeT(56);                   // '<!--'
    lookahead1(1);                  // DirCommentContents
    consumeT(2);                    // DirCommentContents
    lookahead1(7);                  // '-->'
    consumeT(44);                   // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    consume(60);                    // '<?'
    lookahead1(3);                  // PITarget
    consume(18);                    // PITarget
    lookahead1(14);                 // S | '?>'
    if (l1 == 22)                   // S
    {
      consume(22);                  // S
      lookahead1(2);                // DirPIContents
      consume(3);                   // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consume(67);                    // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    consumeT(60);                   // '<?'
    lookahead1(3);                  // PITarget
    consumeT(18);                   // PITarget
    lookahead1(14);                 // S | '?>'
    if (l1 == 22)                   // S
    {
      consumeT(22);                 // S
      lookahead1(2);                // DirPIContents
      consumeT(3);                  // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consumeT(67);                   // '?>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 124:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 126:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 87:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 190:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 250:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 101:                       // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 124:                       // 'document'
      try_CompDocConstructor();
      break;
    case 126:                       // 'element'
      try_CompElemConstructor();
      break;
    case 87:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 190:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 250:                       // 'text'
      try_CompTextConstructor();
      break;
    case 101:                       // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    consume(126);                   // 'element'
    lookahead1W(263);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      consume(282);                 // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(288);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    consume(282);                   // '{'
    lookahead1W(281);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 288)                  // '}'
    {
      whitespace();
      parse_ContentExpr();
    }
    consume(288);                   // '}'
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    consumeT(126);                  // 'element'
    lookahead1W(263);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      consumeT(282);                // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(288);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    consumeT(282);                  // '{'
    lookahead1W(281);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 288)                  // '}'
    {
      try_ContentExpr();
    }
    consumeT(288);                  // '}'
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    consume(190);                   // 'namespace'
    lookahead1W(254);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      consume(282);                 // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_PrefixExpr();
      consume(288);                 // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    consume(282);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_URIExpr();
    consume(288);                   // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    consumeT(190);                  // 'namespace'
    lookahead1W(254);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      consumeT(282);                // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_PrefixExpr();
      consumeT(288);                // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    consumeT(282);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_URIExpr();
    consumeT(288);                  // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 150:                       // 'function'
      lookahead2W(94);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 33:                        // '%'
    case 18070:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 150:                       // 'function'
      lookahead2W(94);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 33:                        // '%'
    case 18070:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consume(30);                    // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consume(8);                     // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consumeT(30);                   // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consumeT(8);                    // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(99);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(150);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(96);                // S^WS | '$' | '(:' | ')'
    if (l1 == 32)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(38);                    // ')'
    lookahead1W(113);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 84)                   // 'as'
    {
      consume(84);                  // 'as'
      lookahead1W(268);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(99);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(150);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(96);                // S^WS | '$' | '(:' | ')'
    if (l1 == 32)                   // '$'
    {
      try_ParamList();
    }
    consumeT(38);                   // ')'
    lookahead1W(113);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 84)                   // 'as'
    {
      consumeT(84);                 // 'as'
      lookahead1W(268);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(229);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}' | '}`'
    if (l1 == 66)                   // '?'
    {
      consume(66);                  // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(229);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}' | '}`'
    if (l1 == 66)                   // '?'
    {
      consumeT(66);                 // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    consume(84);                    // 'as'
    lookahead1W(268);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    consumeT(84);                   // 'as'
    lookahead1W(268);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 129:                       // 'empty-sequence'
      lookahead2W(241);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 18049:                     // 'empty-sequence' '('
      consume(129);                 // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(35);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(38);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(236);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}' | '}`'
      switch (l1)
      {
      case 40:                      // '*'
      case 41:                      // '+'
      case 66:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 129:                       // 'empty-sequence'
      lookahead2W(241);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 18049:                     // 'empty-sequence' '('
      consumeT(129);                // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(35);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(38);                 // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(236);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}' | '}`'
      switch (l1)
      {
      case 40:                      // '*'
      case 41:                      // '+'
      case 66:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 66:                        // '?'
      consume(66);                  // '?'
      break;
    case 40:                        // '*'
      consume(40);                  // '*'
      break;
    default:
      consume(41);                  // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 66:                        // '?'
      consumeT(66);                 // '?'
      break;
    case 40:                        // '*'
      consumeT(40);                 // '*'
      break;
    default:
      consumeT(41);                 // '+'
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 83:                        // 'array'
    case 87:                        // 'attribute'
    case 101:                       // 'comment'
    case 125:                       // 'document-node'
    case 126:                       // 'element'
    case 150:                       // 'function'
    case 170:                       // 'item'
    case 172:                       // 'json-item'
    case 184:                       // 'map'
    case 191:                       // 'namespace-node'
    case 197:                       // 'node'
    case 200:                       // 'object'
    case 222:                       // 'processing-instruction'
    case 232:                       // 'schema-attribute'
    case 233:                       // 'schema-element'
    case 250:                       // 'text'
      lookahead2W(241);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 18003                 // 'array' '('
     || lk == 18092                 // 'json-item' '('
     || lk == 18120)                // 'object' '('
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_KindTest();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_ArrayType();
            lk = -7;
          }
          catch (p7A)
          {
            lk = -8;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(4, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 18007:                     // 'attribute' '('
    case 18021:                     // 'comment' '('
    case 18045:                     // 'document-node' '('
    case 18046:                     // 'element' '('
    case 18111:                     // 'namespace-node' '('
    case 18117:                     // 'node' '('
    case 18142:                     // 'processing-instruction' '('
    case 18152:                     // 'schema-attribute' '('
    case 18153:                     // 'schema-element' '('
    case 18170:                     // 'text' '('
      parse_KindTest();
      break;
    case 18090:                     // 'item' '('
      consume(170);                 // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(35);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(38);                  // ')'
      break;
    case 33:                        // '%'
    case 18070:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 35:                        // '('
      parse_ParenthesizedItemType();
      break;
    case 18104:                     // 'map' '('
      parse_MapType();
      break;
    case -7:
      parse_ArrayType();
      break;
    case -8:
      parse_JSONTest();
      break;
    case 248:                       // 'structured-item'
      parse_StructuredItemTest();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 83:                        // 'array'
    case 87:                        // 'attribute'
    case 101:                       // 'comment'
    case 125:                       // 'document-node'
    case 126:                       // 'element'
    case 150:                       // 'function'
    case 170:                       // 'item'
    case 172:                       // 'json-item'
    case 184:                       // 'map'
    case 191:                       // 'namespace-node'
    case 197:                       // 'node'
    case 200:                       // 'object'
    case 222:                       // 'processing-instruction'
    case 232:                       // 'schema-attribute'
    case 233:                       // 'schema-element'
    case 250:                       // 'text'
      lookahead2W(241);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 18003                 // 'array' '('
     || lk == 18092                 // 'json-item' '('
     || lk == 18120)                // 'object' '('
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_KindTest();
          memoize(4, e0A, -1);
          lk = -10;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_ArrayType();
            memoize(4, e0A, -7);
            lk = -10;
          }
          catch (p7A)
          {
            lk = -8;
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(4, e0A, -8);
          }
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 18007:                     // 'attribute' '('
    case 18021:                     // 'comment' '('
    case 18045:                     // 'document-node' '('
    case 18046:                     // 'element' '('
    case 18111:                     // 'namespace-node' '('
    case 18117:                     // 'node' '('
    case 18142:                     // 'processing-instruction' '('
    case 18152:                     // 'schema-attribute' '('
    case 18153:                     // 'schema-element' '('
    case 18170:                     // 'text' '('
      try_KindTest();
      break;
    case 18090:                     // 'item' '('
      consumeT(170);                // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(35);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(38);                 // ')'
      break;
    case 33:                        // '%'
    case 18070:                     // 'function' '('
      try_FunctionTest();
      break;
    case 35:                        // '('
      try_ParenthesizedItemType();
      break;
    case 18104:                     // 'map' '('
      try_MapType();
      break;
    case -7:
      try_ArrayType();
      break;
    case -8:
      try_JSONTest();
      break;
    case 248:                       // 'structured-item'
      try_StructuredItemTest();
      break;
    case -10:
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_JSONTest()
  {
    eventHandler.startNonterminal("JSONTest", e0);
    switch (l1)
    {
    case 172:                       // 'json-item'
      parse_JSONItemTest();
      break;
    case 200:                       // 'object'
      parse_JSONObjectTest();
      break;
    default:
      parse_JSONArrayTest();
    }
    eventHandler.endNonterminal("JSONTest", e0);
  }

  function try_JSONTest()
  {
    switch (l1)
    {
    case 172:                       // 'json-item'
      try_JSONItemTest();
      break;
    case 200:                       // 'object'
      try_JSONObjectTest();
      break;
    default:
      try_JSONArrayTest();
    }
  }

  function parse_MapType()
  {
    eventHandler.startNonterminal("MapType", e0);
    consume(184);                   // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(262);               // EQName^Token | S^WS | '(:' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      whitespace();
      parse_AtomicOrUnionType();
      lookahead1W(27);              // S^WS | '(:' | ','
      consume(42);                  // ','
      lookahead1W(268);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("MapType", e0);
  }

  function try_MapType()
  {
    consumeT(184);                  // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(262);               // EQName^Token | S^WS | '(:' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      try_AtomicOrUnionType();
      lookahead1W(27);              // S^WS | '(:' | ','
      consumeT(42);                 // ','
      lookahead1W(268);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_ArrayType()
  {
    eventHandler.startNonterminal("ArrayType", e0);
    consume(83);                    // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(39);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("ArrayType", e0);
  }

  function try_ArrayType()
  {
    consumeT(83);                   // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(39);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_StructuredItemTest()
  {
    eventHandler.startNonterminal("StructuredItemTest", e0);
    consume(248);                   // 'structured-item'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("StructuredItemTest", e0);
  }

  function try_StructuredItemTest()
  {
    consumeT(248);                  // 'structured-item'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_JSONItemTest()
  {
    eventHandler.startNonterminal("JSONItemTest", e0);
    consume(172);                   // 'json-item'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("JSONItemTest", e0);
  }

  function try_JSONItemTest()
  {
    consumeT(172);                  // 'json-item'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_JSONObjectTest()
  {
    eventHandler.startNonterminal("JSONObjectTest", e0);
    consume(200);                   // 'object'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("JSONObjectTest", e0);
  }

  function try_JSONObjectTest()
  {
    consumeT(200);                  // 'object'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_JSONArrayTest()
  {
    eventHandler.startNonterminal("JSONArrayTest", e0);
    consume(83);                    // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("JSONArrayTest", e0);
  }

  function try_JSONArrayTest()
  {
    consumeT(83);                   // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 125:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 126:                       // 'element'
      parse_ElementTest();
      break;
    case 87:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 233:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 232:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 222:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 101:                       // 'comment'
      parse_CommentTest();
      break;
    case 250:                       // 'text'
      parse_TextTest();
      break;
    case 191:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    case 197:                       // 'node'
      parse_AnyKindTest();
      break;
    default:
      parse_JSONTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 125:                       // 'document-node'
      try_DocumentTest();
      break;
    case 126:                       // 'element'
      try_ElementTest();
      break;
    case 87:                        // 'attribute'
      try_AttributeTest();
      break;
    case 233:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 232:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 222:                       // 'processing-instruction'
      try_PITest();
      break;
    case 101:                       // 'comment'
      try_CommentTest();
      break;
    case 250:                       // 'text'
      try_TextTest();
      break;
    case 191:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    case 197:                       // 'node'
      try_AnyKindTest();
      break;
    default:
      try_JSONTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    consume(197);                   // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    consumeT(197);                  // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    consume(125);                   // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(146);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 126:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    consumeT(125);                  // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(146);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 126:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    consume(250);                   // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    consumeT(250);                  // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    consume(101);                   // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    consumeT(101);                  // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    consume(191);                   // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    consumeT(191);                  // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    consume(222);                   // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(256);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        consume(11);                // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    consumeT(222);                  // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(256);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        consumeT(11);               // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    consume(87);                    // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(266);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(103);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        consume(42);                // ','
        lookahead1W(258);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    consumeT(87);                   // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(266);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(103);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        consumeT(42);               // ','
        lookahead1W(258);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    consume(232);                   // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    consumeT(232);                  // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    consume(126);                   // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(266);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(103);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        consume(42);                // ','
        lookahead1W(258);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(104);           // S^WS | '(:' | ')' | '?'
        if (l1 == 66)               // '?'
        {
          consume(66);              // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    consumeT(126);                  // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(266);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(103);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        consumeT(42);               // ','
        lookahead1W(258);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
        lookahead1W(104);           // S^WS | '(:' | ')' | '?'
        if (l1 == 66)               // '?'
        {
          consumeT(66);             // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    consume(233);                   // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    consumeT(233);                  // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(99);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 150:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(5, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(5, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(99);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 150:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(5, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(5, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    consume(150);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(39);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    consumeT(150);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(39);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    consume(150);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(270);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        consume(42);                // ','
        lookahead1W(268);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    consume(38);                    // ')'
    lookahead1W(32);                // S^WS | '(:' | 'as'
    consume(84);                    // 'as'
    lookahead1W(268);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    consumeT(150);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(270);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        consumeT(42);               // ','
        lookahead1W(268);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        try_SequenceType();
      }
    }
    consumeT(38);                   // ')'
    lookahead1W(32);                // S^WS | '(:' | 'as'
    consumeT(84);                   // 'as'
    lookahead1W(268);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    consume(35);                    // '('
    lookahead1W(268);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    consumeT(35);                   // '('
    lookahead1W(268);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(74);                // S^WS | '(:' | 'revalidation'
    consume(228);                   // 'revalidation'
    lookahead1W(154);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 246:                       // 'strict'
      consume(246);                 // 'strict'
      break;
    case 176:                       // 'lax'
      consume(176);                 // 'lax'
      break;
    default:
      consume(239);                 // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 75:                        // 'after'
      consume(75);                  // 'after'
      break;
    case 89:                        // 'before'
      consume(89);                  // 'before'
      break;
    default:
      if (l1 == 84)                 // 'as'
      {
        consume(84);                // 'as'
        lookahead1W(121);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 139:                   // 'first'
          consume(139);             // 'first'
          break;
        default:
          consume(175);             // 'last'
        }
      }
      lookahead1W(56);              // S^WS | '(:' | 'into'
      consume(168);                 // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 75:                        // 'after'
      consumeT(75);                 // 'after'
      break;
    case 89:                        // 'before'
      consumeT(89);                 // 'before'
      break;
    default:
      if (l1 == 84)                 // 'as'
      {
        consumeT(84);               // 'as'
        lookahead1W(121);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 139:                   // 'first'
          consumeT(139);            // 'first'
          break;
        default:
          consumeT(175);            // 'last'
        }
      }
      lookahead1W(56);              // S^WS | '(:' | 'into'
      consumeT(168);                // 'into'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    consume(164);                   // 'insert'
    lookahead1W(131);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 197:                       // 'node'
      consume(197);                 // 'node'
      break;
    default:
      consume(198);                 // 'nodes'
    }
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_SourceExpr();
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    consumeT(164);                  // 'insert'
    lookahead1W(131);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 197:                       // 'node'
      consumeT(197);                // 'node'
      break;
    default:
      consumeT(198);                // 'nodes'
    }
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_SourceExpr();
    try_InsertExprTargetChoice();
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    consume(115);                   // 'delete'
    lookahead1W(131);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 197:                       // 'node'
      consume(197);                 // 'node'
      break;
    default:
      consume(198);                 // 'nodes'
    }
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    consumeT(115);                  // 'delete'
    lookahead1W(131);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 197:                       // 'node'
      consumeT(197);                // 'node'
      break;
    default:
      consumeT(198);                // 'nodes'
    }
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    consume(225);                   // 'replace'
    lookahead1W(132);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 267)                  // 'value'
    {
      consume(267);                 // 'value'
      lookahead1W(66);              // S^WS | '(:' | 'of'
      consume(202);                 // 'of'
    }
    lookahead1W(64);                // S^WS | '(:' | 'node'
    consume(197);                   // 'node'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    consume(276);                   // 'with'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    consumeT(225);                  // 'replace'
    lookahead1W(132);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 267)                  // 'value'
    {
      consumeT(267);                // 'value'
      lookahead1W(66);              // S^WS | '(:' | 'of'
      consumeT(202);                // 'of'
    }
    lookahead1W(64);                // S^WS | '(:' | 'node'
    consumeT(197);                  // 'node'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
    consumeT(276);                  // 'with'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    consume(224);                   // 'rename'
    lookahead1W(64);                // S^WS | '(:' | 'node'
    consume(197);                   // 'node'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    consume(84);                    // 'as'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    consumeT(224);                  // 'rename'
    lookahead1W(64);                // S^WS | '(:' | 'node'
    consumeT(197);                  // 'node'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
    consumeT(84);                   // 'as'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_TransformExpr()
  {
    eventHandler.startNonterminal("TransformExpr", e0);
    consume(108);                   // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(29);                // S^WS | '(:' | ':='
    consume(53);                    // ':='
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(32);                  // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(29);              // S^WS | '(:' | ':='
      consume(53);                  // ':='
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    consume(187);                   // 'modify'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(226);                   // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformExpr", e0);
  }

  function try_TransformExpr()
  {
    consumeT(108);                  // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(29);                // S^WS | '(:' | ':='
    consumeT(53);                   // ':='
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consumeT(42);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(32);                 // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(29);              // S^WS | '(:' | ':='
      consumeT(53);                 // ':='
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    consumeT(187);                  // 'modify'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(226);                  // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
      switch (l1)
      {
      case 86:                      // 'at'
        lookahead2W(153);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 120                 // 'different'
       && lk != 122                 // 'distance'
       && lk != 132                 // 'entire'
       && lk != 208                 // 'ordered'
       && lk != 229                 // 'same'
       && lk != 275                 // 'window'
       && lk != 67158               // 'at' 'end'
       && lk != 124502)             // 'at' 'start'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  function try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
      switch (l1)
      {
      case 86:                      // 'at'
        lookahead2W(153);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 120                 // 'different'
       && lk != 122                 // 'distance'
       && lk != 132                 // 'entire'
       && lk != 208                 // 'ordered'
       && lk != 229                 // 'same'
       && lk != 275                 // 'window'
       && lk != 67158               // 'at' 'end'
       && lk != 124502)             // 'at' 'start'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    consume(270);                   // 'weight'
    lookahead1W(89);                // S^WS | '(:' | '{'
    consume(282);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(288);                   // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  function try_FTWeight()
  {
    consumeT(270);                  // 'weight'
    lookahead1W(89);                // S^WS | '(:' | '{'
    consumeT(282);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(288);                  // '}'
  }

  function parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 149)                // 'ftor'
      {
        break;
      }
      consume(149);                 // 'ftor'
      lookahead1W(164);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  function try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 149)                // 'ftor'
      {
        break;
      }
      consumeT(149);                // 'ftor'
      lookahead1W(164);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 147)                // 'ftand'
      {
        break;
      }
      consume(147);                 // 'ftand'
      lookahead1W(164);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  function try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 147)                // 'ftand'
      {
        break;
      }
      consumeT(147);                // 'ftand'
      lookahead1W(164);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}' | '}`'
      if (l1 != 199)                // 'not'
      {
        break;
      }
      consume(199);                 // 'not'
      lookahead1W(55);              // S^WS | '(:' | 'in'
      consume(159);                 // 'in'
      lookahead1W(164);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  function try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}' | '}`'
      if (l1 != 199)                // 'not'
      {
        break;
      }
      consumeT(199);                // 'not'
      lookahead1W(55);              // S^WS | '(:' | 'in'
      consumeT(159);                // 'in'
      lookahead1W(164);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 148)                  // 'ftnot'
    {
      consume(148);                 // 'ftnot'
    }
    lookahead1W(157);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  function try_FTUnaryNot()
  {
    if (l1 == 148)                  // 'ftnot'
    {
      consumeT(148);                // 'ftnot'
    }
    lookahead1W(157);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(217);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}' | '}`'
    if (l1 == 265)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 270)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  function try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(217);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}' | '}`'
    if (l1 == 265)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 270)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 35:                        // '('
      consume(35);                  // '('
      lookahead1W(164);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      consume(38);                  // ')'
      break;
    case 36:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(218);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
      if (l1 == 201)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  function try_FTPrimary()
  {
    switch (l1)
    {
    case 35:                        // '('
      consumeT(35);                 // '('
      lookahead1W(164);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      consumeT(38);                 // ')'
      break;
    case 36:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(218);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
      if (l1 == 201)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
    if (l1 == 76                    // 'all'
     || l1 == 81                    // 'any'
     || l1 == 216)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  function try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
    if (l1 == 76                    // 'all'
     || l1 == 81                    // 'any'
     || l1 == 216)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      consume(11);                  // StringLiteral
      break;
    default:
      consume(282);                 // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(288);                 // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  function try_FTWordsValue()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      consumeT(11);                 // StringLiteral
      break;
    default:
      consumeT(282);                // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(288);                // '}'
    }
  }

  function parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(102);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    consume(282);                   // '{'
    lookahead1W(168);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 288)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    consume(288);                   // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  function try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(102);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    consumeT(282);                  // '{'
    lookahead1W(168);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 288)                  // '}'
    {
      try_FTSelection();
    }
    consumeT(288);                  // '}'
  }

  function parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 81:                        // 'any'
      consume(81);                  // 'any'
      lookahead1W(221);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}' | '}`'
      if (l1 == 278)                // 'word'
      {
        consume(278);               // 'word'
      }
      break;
    case 76:                        // 'all'
      consume(76);                  // 'all'
      lookahead1W(222);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}' | '}`'
      if (l1 == 279)                // 'words'
      {
        consume(279);               // 'words'
      }
      break;
    default:
      consume(216);                 // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  function try_FTAnyallOption()
  {
    switch (l1)
    {
    case 81:                        // 'any'
      consumeT(81);                 // 'any'
      lookahead1W(221);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}' | '}`'
      if (l1 == 278)                // 'word'
      {
        consumeT(278);              // 'word'
      }
      break;
    case 76:                        // 'all'
      consumeT(76);                 // 'all'
      lookahead1W(222);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}' | '}`'
      if (l1 == 279)                // 'words'
      {
        consumeT(279);              // 'words'
      }
      break;
    default:
      consumeT(216);                // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    consume(201);                   // 'occurs'
    lookahead1W(151);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    consume(253);                   // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  function try_FTTimes()
  {
    consumeT(201);                  // 'occurs'
    lookahead1W(151);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    consumeT(253);                  // 'times'
  }

  function parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 135:                       // 'exactly'
      consume(135);                 // 'exactly'
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 86:                        // 'at'
      consume(86);                  // 'at'
      lookahead1W(127);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 178:                     // 'least'
        consume(178);               // 'least'
        lookahead1W(275);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        consume(189);               // 'most'
        lookahead1W(275);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      consume(145);                 // 'from'
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      consume(254);                 // 'to'
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  function try_FTRange()
  {
    switch (l1)
    {
    case 135:                       // 'exactly'
      consumeT(135);                // 'exactly'
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_AdditiveExpr();
      break;
    case 86:                        // 'at'
      consumeT(86);                 // 'at'
      lookahead1W(127);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 178:                     // 'least'
        consumeT(178);              // 'least'
        lookahead1W(275);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        try_AdditiveExpr();
        break;
      default:
        consumeT(189);              // 'most'
        lookahead1W(275);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        try_AdditiveExpr();
      }
      break;
    default:
      consumeT(145);                // 'from'
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_AdditiveExpr();
      consumeT(254);                // 'to'
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 208:                       // 'ordered'
      parse_FTOrder();
      break;
    case 275:                       // 'window'
      parse_FTWindow();
      break;
    case 122:                       // 'distance'
      parse_FTDistance();
      break;
    case 120:                       // 'different'
    case 229:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  function try_FTPosFilter()
  {
    switch (l1)
    {
    case 208:                       // 'ordered'
      try_FTOrder();
      break;
    case 275:                       // 'window'
      try_FTWindow();
      break;
    case 122:                       // 'distance'
      try_FTDistance();
      break;
    case 120:                       // 'different'
    case 229:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  function parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    consume(208);                   // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  function try_FTOrder()
  {
    consumeT(208);                  // 'ordered'
  }

  function parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    consume(275);                   // 'window'
    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  function try_FTWindow()
  {
    consumeT(275);                  // 'window'
    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_AdditiveExpr();
    try_FTUnit();
  }

  function parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    consume(122);                   // 'distance'
    lookahead1W(151);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  function try_FTDistance()
  {
    consumeT(122);                  // 'distance'
    lookahead1W(151);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  function parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 279:                       // 'words'
      consume(279);                 // 'words'
      break;
    case 238:                       // 'sentences'
      consume(238);                 // 'sentences'
      break;
    default:
      consume(211);                 // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  function try_FTUnit()
  {
    switch (l1)
    {
    case 279:                       // 'words'
      consumeT(279);                // 'words'
      break;
    case 238:                       // 'sentences'
      consumeT(238);                // 'sentences'
      break;
    default:
      consumeT(211);                // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 229:                       // 'same'
      consume(229);                 // 'same'
      break;
    default:
      consume(120);                 // 'different'
    }
    lookahead1W(134);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  function try_FTScope()
  {
    switch (l1)
    {
    case 229:                       // 'same'
      consumeT(229);                // 'same'
      break;
    default:
      consumeT(120);                // 'different'
    }
    lookahead1W(134);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 237:                       // 'sentence'
      consume(237);                 // 'sentence'
      break;
    default:
      consume(210);                 // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  function try_FTBigUnit()
  {
    switch (l1)
    {
    case 237:                       // 'sentence'
      consumeT(237);                // 'sentence'
      break;
    default:
      consumeT(210);                // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 86:                        // 'at'
      consume(86);                  // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 243:                     // 'start'
        consume(243);               // 'start'
        break;
      default:
        consume(131);               // 'end'
      }
      break;
    default:
      consume(132);                 // 'entire'
      lookahead1W(44);              // S^WS | '(:' | 'content'
      consume(105);                 // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  function try_FTContent()
  {
    switch (l1)
    {
    case 86:                        // 'at'
      consumeT(86);                 // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 243:                     // 'start'
        consumeT(243);              // 'start'
        break;
      default:
        consumeT(131);              // 'end'
      }
      break;
    default:
      consumeT(132);                // 'entire'
      lookahead1W(44);              // S^WS | '(:' | 'content'
      consumeT(105);                // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      consume(265);                 // 'using'
      lookahead1W(183);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(217);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}' | '}`'
      if (l1 != 265)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  function try_FTMatchOptions()
  {
    for (;;)
    {
      consumeT(265);                // 'using'
      lookahead1W(183);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(217);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}' | '}`'
      if (l1 != 265)                // 'using'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 194:                       // 'no'
      lookahead2W(163);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 174:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 274:                       // 'wildcards'
    case 140482:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 252:                       // 'thesaurus'
    case 129218:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 244:                       // 'stemming'
    case 125122:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 119:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 245:                       // 'stop'
    case 125634:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 205:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  function try_FTMatchOption()
  {
    switch (l1)
    {
    case 194:                       // 'no'
      lookahead2W(163);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 174:                       // 'language'
      try_FTLanguageOption();
      break;
    case 274:                       // 'wildcards'
    case 140482:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 252:                       // 'thesaurus'
    case 129218:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 244:                       // 'stemming'
    case 125122:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 119:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 245:                       // 'stop'
    case 125634:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 205:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  function parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 93:                        // 'case'
      consume(93);                  // 'case'
      lookahead1W(126);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 163:                     // 'insensitive'
        consume(163);               // 'insensitive'
        break;
      default:
        consume(236);               // 'sensitive'
      }
      break;
    case 182:                       // 'lowercase'
      consume(182);                 // 'lowercase'
      break;
    default:
      consume(264);                 // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  function try_FTCaseOption()
  {
    switch (l1)
    {
    case 93:                        // 'case'
      consumeT(93);                 // 'case'
      lookahead1W(126);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 163:                     // 'insensitive'
        consumeT(163);              // 'insensitive'
        break;
      default:
        consumeT(236);              // 'sensitive'
      }
      break;
    case 182:                       // 'lowercase'
      consumeT(182);                // 'lowercase'
      break;
    default:
      consumeT(264);                // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    consume(119);                   // 'diacritics'
    lookahead1W(126);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 163:                       // 'insensitive'
      consume(163);                 // 'insensitive'
      break;
    default:
      consume(236);                 // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  function try_FTDiacriticsOption()
  {
    consumeT(119);                  // 'diacritics'
    lookahead1W(126);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 163:                       // 'insensitive'
      consumeT(163);                // 'insensitive'
      break;
    default:
      consumeT(236);                // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 244:                       // 'stemming'
      consume(244);                 // 'stemming'
      break;
    default:
      consume(194);                 // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'stemming'
      consume(244);                 // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  function try_FTStemOption()
  {
    switch (l1)
    {
    case 244:                       // 'stemming'
      consumeT(244);                // 'stemming'
      break;
    default:
      consumeT(194);                // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'stemming'
      consumeT(244);                // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 252:                       // 'thesaurus'
      consume(252);                 // 'thesaurus'
      lookahead1W(144);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 86:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 114:                     // 'default'
        consume(114);               // 'default'
        break;
      default:
        consume(35);                // '('
        lookahead1W(114);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 86:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          consume(114);             // 'default'
        }
        for (;;)
        {
          lookahead1W(103);         // S^WS | '(:' | ')' | ','
          if (l1 != 42)             // ','
          {
            break;
          }
          consume(42);              // ','
          lookahead1W(33);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        consume(38);                // ')'
      }
      break;
    default:
      consume(194);                 // 'no'
      lookahead1W(80);              // S^WS | '(:' | 'thesaurus'
      consume(252);                 // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  function try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 252:                       // 'thesaurus'
      consumeT(252);                // 'thesaurus'
      lookahead1W(144);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 86:                      // 'at'
        try_FTThesaurusID();
        break;
      case 114:                     // 'default'
        consumeT(114);              // 'default'
        break;
      default:
        consumeT(35);               // '('
        lookahead1W(114);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 86:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          consumeT(114);            // 'default'
        }
        for (;;)
        {
          lookahead1W(103);         // S^WS | '(:' | ')' | ','
          if (l1 != 42)             // ','
          {
            break;
          }
          consumeT(42);             // ','
          lookahead1W(33);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        consumeT(38);               // ')'
      }
      break;
    default:
      consumeT(194);                // 'no'
      lookahead1W(80);              // S^WS | '(:' | 'thesaurus'
      consumeT(252);                // 'thesaurus'
    }
  }

  function parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    consume(86);                    // 'at'
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(223);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}' | '}`'
    if (l1 == 223)                  // 'relationship'
    {
      consume(223);                 // 'relationship'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
    }
    lookahead1W(219);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
    switch (l1)
    {
    case 86:                        // 'at'
      lookahead2W(167);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 135                   // 'exactly'
     || lk == 145                   // 'from'
     || lk == 91222                 // 'at' 'least'
     || lk == 96854)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(60);              // S^WS | '(:' | 'levels'
      consume(180);                 // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  function try_FTThesaurusID()
  {
    consumeT(86);                   // 'at'
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
    lookahead1W(223);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}' | '}`'
    if (l1 == 223)                  // 'relationship'
    {
      consumeT(223);                // 'relationship'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consumeT(11);                 // StringLiteral
    }
    lookahead1W(219);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
    switch (l1)
    {
    case 86:                        // 'at'
      lookahead2W(167);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 135                   // 'exactly'
     || lk == 145                   // 'from'
     || lk == 91222                 // 'at' 'least'
     || lk == 96854)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(60);              // S^WS | '(:' | 'levels'
      consumeT(180);                // 'levels'
    }
  }

  function parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 135:                       // 'exactly'
      consume(135);                 // 'exactly'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
      break;
    case 86:                        // 'at'
      consume(86);                  // 'at'
      lookahead1W(127);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 178:                     // 'least'
        consume(178);               // 'least'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consume(8);                 // IntegerLiteral
        break;
      default:
        consume(189);               // 'most'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consume(8);                 // IntegerLiteral
      }
      break;
    default:
      consume(145);                 // 'from'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
      lookahead1W(81);              // S^WS | '(:' | 'to'
      consume(254);                 // 'to'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  function try_FTLiteralRange()
  {
    switch (l1)
    {
    case 135:                       // 'exactly'
      consumeT(135);                // 'exactly'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
      break;
    case 86:                        // 'at'
      consumeT(86);                 // 'at'
      lookahead1W(127);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 178:                     // 'least'
        consumeT(178);              // 'least'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consumeT(8);                // IntegerLiteral
        break;
      default:
        consumeT(189);              // 'most'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consumeT(8);                // IntegerLiteral
      }
      break;
    default:
      consumeT(145);                // 'from'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
      lookahead1W(81);              // S^WS | '(:' | 'to'
      consumeT(254);                // 'to'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
    }
  }

  function parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 245:                       // 'stop'
      consume(245);                 // 'stop'
      lookahead1W(88);              // S^WS | '(:' | 'words'
      consume(279);                 // 'words'
      lookahead1W(144);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 114:                     // 'default'
        consume(114);               // 'default'
        for (;;)
        {
          lookahead1W(220);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
          if (l1 != 136             // 'except'
           && l1 != 260)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(220);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
          if (l1 != 136             // 'except'
           && l1 != 260)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consume(194);                 // 'no'
      lookahead1W(77);              // S^WS | '(:' | 'stop'
      consume(245);                 // 'stop'
      lookahead1W(88);              // S^WS | '(:' | 'words'
      consume(279);                 // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  function try_FTStopWordOption()
  {
    switch (l1)
    {
    case 245:                       // 'stop'
      consumeT(245);                // 'stop'
      lookahead1W(88);              // S^WS | '(:' | 'words'
      consumeT(279);                // 'words'
      lookahead1W(144);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 114:                     // 'default'
        consumeT(114);              // 'default'
        for (;;)
        {
          lookahead1W(220);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
          if (l1 != 136             // 'except'
           && l1 != 260)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(220);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
          if (l1 != 136             // 'except'
           && l1 != 260)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consumeT(194);                // 'no'
      lookahead1W(77);              // S^WS | '(:' | 'stop'
      consumeT(245);                // 'stop'
      lookahead1W(88);              // S^WS | '(:' | 'words'
      consumeT(279);                // 'words'
    }
  }

  function parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 86:                        // 'at'
      consume(86);                  // 'at'
      lookahead1W(17);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      break;
    default:
      consume(35);                  // '('
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        consume(42);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(11);                // StringLiteral
      }
      consume(38);                  // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  function try_FTStopWords()
  {
    switch (l1)
    {
    case 86:                        // 'at'
      consumeT(86);                 // 'at'
      lookahead1W(17);              // URILiteral | S^WS | '(:'
      consumeT(7);                  // URILiteral
      break;
    default:
      consumeT(35);                 // '('
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consumeT(11);                 // StringLiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        consumeT(42);               // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consumeT(11);               // StringLiteral
      }
      consumeT(38);                 // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 260:                       // 'union'
      consume(260);                 // 'union'
      break;
    default:
      consume(136);                 // 'except'
    }
    lookahead1W(101);               // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  function try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 260:                       // 'union'
      consumeT(260);                // 'union'
      break;
    default:
      consumeT(136);                // 'except'
    }
    lookahead1W(101);               // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    consume(174);                   // 'language'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  function try_FTLanguageOption()
  {
    consumeT(174);                  // 'language'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consumeT(11);                   // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 274:                       // 'wildcards'
      consume(274);                 // 'wildcards'
      break;
    default:
      consume(194);                 // 'no'
      lookahead1W(86);              // S^WS | '(:' | 'wildcards'
      consume(274);                 // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  function try_FTWildCardOption()
  {
    switch (l1)
    {
    case 274:                       // 'wildcards'
      consumeT(274);                // 'wildcards'
      break;
    default:
      consumeT(194);                // 'no'
      lookahead1W(86);              // S^WS | '(:' | 'wildcards'
      consumeT(274);                // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    consume(205);                   // 'option'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  function try_FTExtensionOption()
  {
    consumeT(205);                  // 'option'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consumeT(11);                   // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    consume(277);                   // 'without'
    lookahead1W(44);                // S^WS | '(:' | 'content'
    consume(105);                   // 'content'
    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  function try_FTIgnoreOption()
  {
    consumeT(277);                  // 'without'
    lookahead1W(44);                // S^WS | '(:' | 'content'
    consumeT(105);                  // 'content'
    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_UnionExpr();
  }

  function parse_CollectionDecl()
  {
    eventHandler.startNonterminal("CollectionDecl", e0);
    consume(100);                   // 'collection'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(109);               // S^WS | '(:' | ';' | 'as'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_CollectionTypeDecl();
    }
    eventHandler.endNonterminal("CollectionDecl", e0);
  }

  function parse_CollectionTypeDecl()
  {
    eventHandler.startNonterminal("CollectionTypeDecl", e0);
    consume(84);                    // 'as'
    lookahead1W(185);               // S^WS | '(:' | 'array' | 'attribute' | 'comment' | 'document-node' | 'element' |
                                    // 'json-item' | 'namespace-node' | 'node' | 'object' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'text'
    whitespace();
    parse_KindTest();
    lookahead1W(158);               // S^WS | '(:' | '*' | '+' | ';' | '?'
    if (l1 != 54)                   // ';'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("CollectionTypeDecl", e0);
  }

  function parse_IndexName()
  {
    eventHandler.startNonterminal("IndexName", e0);
    parse_EQName();
    eventHandler.endNonterminal("IndexName", e0);
  }

  function parse_IndexDomainExpr()
  {
    eventHandler.startNonterminal("IndexDomainExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexDomainExpr", e0);
  }

  function parse_IndexKeySpec()
  {
    eventHandler.startNonterminal("IndexKeySpec", e0);
    parse_IndexKeyExpr();
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_IndexKeyTypeDecl();
    }
    lookahead1W(148);               // S^WS | '(:' | ',' | ';' | 'collation'
    if (l1 == 99)                   // 'collation'
    {
      whitespace();
      parse_IndexKeyCollation();
    }
    eventHandler.endNonterminal("IndexKeySpec", e0);
  }

  function parse_IndexKeyExpr()
  {
    eventHandler.startNonterminal("IndexKeyExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexKeyExpr", e0);
  }

  function parse_IndexKeyTypeDecl()
  {
    eventHandler.startNonterminal("IndexKeyTypeDecl", e0);
    consume(84);                    // 'as'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_AtomicType();
    lookahead1W(171);               // S^WS | '(:' | '*' | '+' | ',' | ';' | '?' | 'collation'
    if (l1 == 40                    // '*'
     || l1 == 41                    // '+'
     || l1 == 66)                   // '?'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("IndexKeyTypeDecl", e0);
  }

  function parse_AtomicType()
  {
    eventHandler.startNonterminal("AtomicType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicType", e0);
  }

  function parse_IndexKeyCollation()
  {
    eventHandler.startNonterminal("IndexKeyCollation", e0);
    consume(99);                    // 'collation'
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("IndexKeyCollation", e0);
  }

  function parse_IndexDecl()
  {
    eventHandler.startNonterminal("IndexDecl", e0);
    consume(160);                   // 'index'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_IndexName();
    lookahead1W(67);                // S^WS | '(:' | 'on'
    consume(203);                   // 'on'
    lookahead1W(65);                // S^WS | '(:' | 'nodes'
    consume(198);                   // 'nodes'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexDomainExpr();
    consume(92);                    // 'by'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexKeySpec();
    for (;;)
    {
      lookahead1W(105);             // S^WS | '(:' | ',' | ';'
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(273);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_IndexKeySpec();
    }
    eventHandler.endNonterminal("IndexDecl", e0);
  }

  function parse_ICDecl()
  {
    eventHandler.startNonterminal("ICDecl", e0);
    consume(166);                   // 'integrity'
    lookahead1W(42);                // S^WS | '(:' | 'constraint'
    consume(102);                   // 'constraint'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(122);               // S^WS | '(:' | 'foreign' | 'on'
    switch (l1)
    {
    case 203:                       // 'on'
      whitespace();
      parse_ICCollection();
      break;
    default:
      whitespace();
      parse_ICForeignKey();
    }
    eventHandler.endNonterminal("ICDecl", e0);
  }

  function parse_ICCollection()
  {
    eventHandler.startNonterminal("ICCollection", e0);
    consume(203);                   // 'on'
    lookahead1W(41);                // S^WS | '(:' | 'collection'
    consume(100);                   // 'collection'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(142);               // S^WS | '$' | '(:' | 'foreach' | 'node'
    switch (l1)
    {
    case 32:                        // '$'
      whitespace();
      parse_ICCollSequence();
      break;
    case 197:                       // 'node'
      whitespace();
      parse_ICCollSequenceUnique();
      break;
    default:
      whitespace();
      parse_ICCollNode();
    }
    eventHandler.endNonterminal("ICCollection", e0);
  }

  function parse_ICCollSequence()
  {
    eventHandler.startNonterminal("ICCollSequence", e0);
    parse_VarRef();
    lookahead1W(39);                // S^WS | '(:' | 'check'
    consume(97);                    // 'check'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollSequence", e0);
  }

  function parse_ICCollSequenceUnique()
  {
    eventHandler.startNonterminal("ICCollSequenceUnique", e0);
    consume(197);                   // 'node'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(39);                // S^WS | '(:' | 'check'
    consume(97);                    // 'check'
    lookahead1W(82);                // S^WS | '(:' | 'unique'
    consume(261);                   // 'unique'
    lookahead1W(59);                // S^WS | '(:' | 'key'
    consume(173);                   // 'key'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICCollSequenceUnique", e0);
  }

  function parse_ICCollNode()
  {
    eventHandler.startNonterminal("ICCollNode", e0);
    consume(143);                   // 'foreach'
    lookahead1W(64);                // S^WS | '(:' | 'node'
    consume(197);                   // 'node'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(39);                // S^WS | '(:' | 'check'
    consume(97);                    // 'check'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollNode", e0);
  }

  function parse_ICForeignKey()
  {
    eventHandler.startNonterminal("ICForeignKey", e0);
    consume(144);                   // 'foreign'
    lookahead1W(59);                // S^WS | '(:' | 'key'
    consume(173);                   // 'key'
    lookahead1W(53);                // S^WS | '(:' | 'from'
    whitespace();
    parse_ICForeignKeySource();
    whitespace();
    parse_ICForeignKeyTarget();
    eventHandler.endNonterminal("ICForeignKey", e0);
  }

  function parse_ICForeignKeySource()
  {
    eventHandler.startNonterminal("ICForeignKeySource", e0);
    consume(145);                   // 'from'
    lookahead1W(41);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeySource", e0);
  }

  function parse_ICForeignKeyTarget()
  {
    eventHandler.startNonterminal("ICForeignKeyTarget", e0);
    consume(254);                   // 'to'
    lookahead1W(41);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeyTarget", e0);
  }

  function parse_ICForeignKeyValues()
  {
    eventHandler.startNonterminal("ICForeignKeyValues", e0);
    consume(100);                   // 'collection'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(64);                // S^WS | '(:' | 'node'
    consume(197);                   // 'node'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(59);                // S^WS | '(:' | 'key'
    consume(173);                   // 'key'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICForeignKeyValues", e0);
  }

  function try_Comment()
  {
    consumeT(37);                   // '(:'
    for (;;)
    {
      lookahead1(91);               // CommentContents | '(:' | ':)'
      if (l1 == 51)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 25:                      // CommentContents
        consumeT(25);               // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consumeT(51);                   // ':)'
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 23:                        // S^WS
      consumeT(23);                 // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(253);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 87:                        // 'attribute'
      consume(87);                  // 'attribute'
      break;
    case 101:                       // 'comment'
      consume(101);                 // 'comment'
      break;
    case 125:                       // 'document-node'
      consume(125);                 // 'document-node'
      break;
    case 126:                       // 'element'
      consume(126);                 // 'element'
      break;
    case 129:                       // 'empty-sequence'
      consume(129);                 // 'empty-sequence'
      break;
    case 150:                       // 'function'
      consume(150);                 // 'function'
      break;
    case 157:                       // 'if'
      consume(157);                 // 'if'
      break;
    case 170:                       // 'item'
      consume(170);                 // 'item'
      break;
    case 184:                       // 'map'
      consume(184);                 // 'map'
      break;
    case 191:                       // 'namespace-node'
      consume(191);                 // 'namespace-node'
      break;
    case 197:                       // 'node'
      consume(197);                 // 'node'
      break;
    case 222:                       // 'processing-instruction'
      consume(222);                 // 'processing-instruction'
      break;
    case 232:                       // 'schema-attribute'
      consume(232);                 // 'schema-attribute'
      break;
    case 233:                       // 'schema-element'
      consume(233);                 // 'schema-element'
      break;
    case 249:                       // 'switch'
      consume(249);                 // 'switch'
      break;
    case 250:                       // 'text'
      consume(250);                 // 'text'
      break;
    case 259:                       // 'typeswitch'
      consume(259);                 // 'typeswitch'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(253);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 87:                        // 'attribute'
      consumeT(87);                 // 'attribute'
      break;
    case 101:                       // 'comment'
      consumeT(101);                // 'comment'
      break;
    case 125:                       // 'document-node'
      consumeT(125);                // 'document-node'
      break;
    case 126:                       // 'element'
      consumeT(126);                // 'element'
      break;
    case 129:                       // 'empty-sequence'
      consumeT(129);                // 'empty-sequence'
      break;
    case 150:                       // 'function'
      consumeT(150);                // 'function'
      break;
    case 157:                       // 'if'
      consumeT(157);                // 'if'
      break;
    case 170:                       // 'item'
      consumeT(170);                // 'item'
      break;
    case 184:                       // 'map'
      consumeT(184);                // 'map'
      break;
    case 191:                       // 'namespace-node'
      consumeT(191);                // 'namespace-node'
      break;
    case 197:                       // 'node'
      consumeT(197);                // 'node'
      break;
    case 222:                       // 'processing-instruction'
      consumeT(222);                // 'processing-instruction'
      break;
    case 232:                       // 'schema-attribute'
      consumeT(232);                // 'schema-attribute'
      break;
    case 233:                       // 'schema-element'
      consumeT(233);                // 'schema-element'
      break;
    case 249:                       // 'switch'
      consumeT(249);                // 'switch'
      break;
    case 250:                       // 'text'
      consumeT(250);                // 'text'
      break;
    case 259:                       // 'typeswitch'
      consumeT(259);                // 'typeswitch'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 6:                         // EQName^Token
      consume(6);                   // EQName^Token
      break;
    case 75:                        // 'after'
      consume(75);                  // 'after'
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consume(79);                  // 'ancestor-or-self'
      break;
    case 80:                        // 'and'
      consume(80);                  // 'and'
      break;
    case 84:                        // 'as'
      consume(84);                  // 'as'
      break;
    case 85:                        // 'ascending'
      consume(85);                  // 'ascending'
      break;
    case 89:                        // 'before'
      consume(89);                  // 'before'
      break;
    case 93:                        // 'case'
      consume(93);                  // 'case'
      break;
    case 94:                        // 'cast'
      consume(94);                  // 'cast'
      break;
    case 95:                        // 'castable'
      consume(95);                  // 'castable'
      break;
    case 98:                        // 'child'
      consume(98);                  // 'child'
      break;
    case 99:                        // 'collation'
      consume(99);                  // 'collation'
      break;
    case 108:                       // 'copy'
      consume(108);                 // 'copy'
      break;
    case 110:                       // 'count'
      consume(110);                 // 'count'
      break;
    case 113:                       // 'declare'
      consume(113);                 // 'declare'
      break;
    case 114:                       // 'default'
      consume(114);                 // 'default'
      break;
    case 115:                       // 'delete'
      consume(115);                 // 'delete'
      break;
    case 116:                       // 'descendant'
      consume(116);                 // 'descendant'
      break;
    case 117:                       // 'descendant-or-self'
      consume(117);                 // 'descendant-or-self'
      break;
    case 118:                       // 'descending'
      consume(118);                 // 'descending'
      break;
    case 123:                       // 'div'
      consume(123);                 // 'div'
      break;
    case 124:                       // 'document'
      consume(124);                 // 'document'
      break;
    case 127:                       // 'else'
      consume(127);                 // 'else'
      break;
    case 128:                       // 'empty'
      consume(128);                 // 'empty'
      break;
    case 131:                       // 'end'
      consume(131);                 // 'end'
      break;
    case 133:                       // 'eq'
      consume(133);                 // 'eq'
      break;
    case 134:                       // 'every'
      consume(134);                 // 'every'
      break;
    case 136:                       // 'except'
      consume(136);                 // 'except'
      break;
    case 139:                       // 'first'
      consume(139);                 // 'first'
      break;
    case 140:                       // 'following'
      consume(140);                 // 'following'
      break;
    case 141:                       // 'following-sibling'
      consume(141);                 // 'following-sibling'
      break;
    case 142:                       // 'for'
      consume(142);                 // 'for'
      break;
    case 151:                       // 'ge'
      consume(151);                 // 'ge'
      break;
    case 153:                       // 'group'
      consume(153);                 // 'group'
      break;
    case 155:                       // 'gt'
      consume(155);                 // 'gt'
      break;
    case 156:                       // 'idiv'
      consume(156);                 // 'idiv'
      break;
    case 158:                       // 'import'
      consume(158);                 // 'import'
      break;
    case 164:                       // 'insert'
      consume(164);                 // 'insert'
      break;
    case 165:                       // 'instance'
      consume(165);                 // 'instance'
      break;
    case 167:                       // 'intersect'
      consume(167);                 // 'intersect'
      break;
    case 168:                       // 'into'
      consume(168);                 // 'into'
      break;
    case 169:                       // 'is'
      consume(169);                 // 'is'
      break;
    case 175:                       // 'last'
      consume(175);                 // 'last'
      break;
    case 177:                       // 'le'
      consume(177);                 // 'le'
      break;
    case 179:                       // 'let'
      consume(179);                 // 'let'
      break;
    case 183:                       // 'lt'
      consume(183);                 // 'lt'
      break;
    case 186:                       // 'mod'
      consume(186);                 // 'mod'
      break;
    case 187:                       // 'modify'
      consume(187);                 // 'modify'
      break;
    case 188:                       // 'module'
      consume(188);                 // 'module'
      break;
    case 190:                       // 'namespace'
      consume(190);                 // 'namespace'
      break;
    case 192:                       // 'ne'
      consume(192);                 // 'ne'
      break;
    case 204:                       // 'only'
      consume(204);                 // 'only'
      break;
    case 206:                       // 'or'
      consume(206);                 // 'or'
      break;
    case 207:                       // 'order'
      consume(207);                 // 'order'
      break;
    case 208:                       // 'ordered'
      consume(208);                 // 'ordered'
      break;
    case 212:                       // 'parent'
      consume(212);                 // 'parent'
      break;
    case 218:                       // 'preceding'
      consume(218);                 // 'preceding'
      break;
    case 219:                       // 'preceding-sibling'
      consume(219);                 // 'preceding-sibling'
      break;
    case 224:                       // 'rename'
      consume(224);                 // 'rename'
      break;
    case 225:                       // 'replace'
      consume(225);                 // 'replace'
      break;
    case 226:                       // 'return'
      consume(226);                 // 'return'
      break;
    case 230:                       // 'satisfies'
      consume(230);                 // 'satisfies'
      break;
    case 235:                       // 'self'
      consume(235);                 // 'self'
      break;
    case 241:                       // 'some'
      consume(241);                 // 'some'
      break;
    case 242:                       // 'stable'
      consume(242);                 // 'stable'
      break;
    case 243:                       // 'start'
      consume(243);                 // 'start'
      break;
    case 254:                       // 'to'
      consume(254);                 // 'to'
      break;
    case 255:                       // 'treat'
      consume(255);                 // 'treat'
      break;
    case 256:                       // 'try'
      consume(256);                 // 'try'
      break;
    case 260:                       // 'union'
      consume(260);                 // 'union'
      break;
    case 262:                       // 'unordered'
      consume(262);                 // 'unordered'
      break;
    case 266:                       // 'validate'
      consume(266);                 // 'validate'
      break;
    case 272:                       // 'where'
      consume(272);                 // 'where'
      break;
    case 276:                       // 'with'
      consume(276);                 // 'with'
      break;
    case 280:                       // 'xquery'
      consume(280);                 // 'xquery'
      break;
    case 77:                        // 'allowing'
      consume(77);                  // 'allowing'
      break;
    case 86:                        // 'at'
      consume(86);                  // 'at'
      break;
    case 88:                        // 'base-uri'
      consume(88);                  // 'base-uri'
      break;
    case 90:                        // 'boundary-space'
      consume(90);                  // 'boundary-space'
      break;
    case 91:                        // 'break'
      consume(91);                  // 'break'
      break;
    case 96:                        // 'catch'
      consume(96);                  // 'catch'
      break;
    case 103:                       // 'construction'
      consume(103);                 // 'construction'
      break;
    case 106:                       // 'context'
      consume(106);                 // 'context'
      break;
    case 107:                       // 'continue'
      consume(107);                 // 'continue'
      break;
    case 109:                       // 'copy-namespaces'
      consume(109);                 // 'copy-namespaces'
      break;
    case 111:                       // 'decimal-format'
      consume(111);                 // 'decimal-format'
      break;
    case 130:                       // 'encoding'
      consume(130);                 // 'encoding'
      break;
    case 137:                       // 'exit'
      consume(137);                 // 'exit'
      break;
    case 138:                       // 'external'
      consume(138);                 // 'external'
      break;
    case 146:                       // 'ft-option'
      consume(146);                 // 'ft-option'
      break;
    case 159:                       // 'in'
      consume(159);                 // 'in'
      break;
    case 160:                       // 'index'
      consume(160);                 // 'index'
      break;
    case 166:                       // 'integrity'
      consume(166);                 // 'integrity'
      break;
    case 176:                       // 'lax'
      consume(176);                 // 'lax'
      break;
    case 198:                       // 'nodes'
      consume(198);                 // 'nodes'
      break;
    case 205:                       // 'option'
      consume(205);                 // 'option'
      break;
    case 209:                       // 'ordering'
      consume(209);                 // 'ordering'
      break;
    case 228:                       // 'revalidation'
      consume(228);                 // 'revalidation'
      break;
    case 231:                       // 'schema'
      consume(231);                 // 'schema'
      break;
    case 234:                       // 'score'
      consume(234);                 // 'score'
      break;
    case 240:                       // 'sliding'
      consume(240);                 // 'sliding'
      break;
    case 246:                       // 'strict'
      consume(246);                 // 'strict'
      break;
    case 257:                       // 'tumbling'
      consume(257);                 // 'tumbling'
      break;
    case 258:                       // 'type'
      consume(258);                 // 'type'
      break;
    case 263:                       // 'updating'
      consume(263);                 // 'updating'
      break;
    case 267:                       // 'value'
      consume(267);                 // 'value'
      break;
    case 268:                       // 'variable'
      consume(268);                 // 'variable'
      break;
    case 269:                       // 'version'
      consume(269);                 // 'version'
      break;
    case 273:                       // 'while'
      consume(273);                 // 'while'
      break;
    case 102:                       // 'constraint'
      consume(102);                 // 'constraint'
      break;
    case 181:                       // 'loop'
      consume(181);                 // 'loop'
      break;
    case 227:                       // 'returning'
      consume(227);                 // 'returning'
      break;
    case 200:                       // 'object'
      consume(200);                 // 'object'
      break;
    case 172:                       // 'json-item'
      consume(172);                 // 'json-item'
      break;
    default:
      consume(83);                  // 'array'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 6:                         // EQName^Token
      consumeT(6);                  // EQName^Token
      break;
    case 75:                        // 'after'
      consumeT(75);                 // 'after'
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consumeT(79);                 // 'ancestor-or-self'
      break;
    case 80:                        // 'and'
      consumeT(80);                 // 'and'
      break;
    case 84:                        // 'as'
      consumeT(84);                 // 'as'
      break;
    case 85:                        // 'ascending'
      consumeT(85);                 // 'ascending'
      break;
    case 89:                        // 'before'
      consumeT(89);                 // 'before'
      break;
    case 93:                        // 'case'
      consumeT(93);                 // 'case'
      break;
    case 94:                        // 'cast'
      consumeT(94);                 // 'cast'
      break;
    case 95:                        // 'castable'
      consumeT(95);                 // 'castable'
      break;
    case 98:                        // 'child'
      consumeT(98);                 // 'child'
      break;
    case 99:                        // 'collation'
      consumeT(99);                 // 'collation'
      break;
    case 108:                       // 'copy'
      consumeT(108);                // 'copy'
      break;
    case 110:                       // 'count'
      consumeT(110);                // 'count'
      break;
    case 113:                       // 'declare'
      consumeT(113);                // 'declare'
      break;
    case 114:                       // 'default'
      consumeT(114);                // 'default'
      break;
    case 115:                       // 'delete'
      consumeT(115);                // 'delete'
      break;
    case 116:                       // 'descendant'
      consumeT(116);                // 'descendant'
      break;
    case 117:                       // 'descendant-or-self'
      consumeT(117);                // 'descendant-or-self'
      break;
    case 118:                       // 'descending'
      consumeT(118);                // 'descending'
      break;
    case 123:                       // 'div'
      consumeT(123);                // 'div'
      break;
    case 124:                       // 'document'
      consumeT(124);                // 'document'
      break;
    case 127:                       // 'else'
      consumeT(127);                // 'else'
      break;
    case 128:                       // 'empty'
      consumeT(128);                // 'empty'
      break;
    case 131:                       // 'end'
      consumeT(131);                // 'end'
      break;
    case 133:                       // 'eq'
      consumeT(133);                // 'eq'
      break;
    case 134:                       // 'every'
      consumeT(134);                // 'every'
      break;
    case 136:                       // 'except'
      consumeT(136);                // 'except'
      break;
    case 139:                       // 'first'
      consumeT(139);                // 'first'
      break;
    case 140:                       // 'following'
      consumeT(140);                // 'following'
      break;
    case 141:                       // 'following-sibling'
      consumeT(141);                // 'following-sibling'
      break;
    case 142:                       // 'for'
      consumeT(142);                // 'for'
      break;
    case 151:                       // 'ge'
      consumeT(151);                // 'ge'
      break;
    case 153:                       // 'group'
      consumeT(153);                // 'group'
      break;
    case 155:                       // 'gt'
      consumeT(155);                // 'gt'
      break;
    case 156:                       // 'idiv'
      consumeT(156);                // 'idiv'
      break;
    case 158:                       // 'import'
      consumeT(158);                // 'import'
      break;
    case 164:                       // 'insert'
      consumeT(164);                // 'insert'
      break;
    case 165:                       // 'instance'
      consumeT(165);                // 'instance'
      break;
    case 167:                       // 'intersect'
      consumeT(167);                // 'intersect'
      break;
    case 168:                       // 'into'
      consumeT(168);                // 'into'
      break;
    case 169:                       // 'is'
      consumeT(169);                // 'is'
      break;
    case 175:                       // 'last'
      consumeT(175);                // 'last'
      break;
    case 177:                       // 'le'
      consumeT(177);                // 'le'
      break;
    case 179:                       // 'let'
      consumeT(179);                // 'let'
      break;
    case 183:                       // 'lt'
      consumeT(183);                // 'lt'
      break;
    case 186:                       // 'mod'
      consumeT(186);                // 'mod'
      break;
    case 187:                       // 'modify'
      consumeT(187);                // 'modify'
      break;
    case 188:                       // 'module'
      consumeT(188);                // 'module'
      break;
    case 190:                       // 'namespace'
      consumeT(190);                // 'namespace'
      break;
    case 192:                       // 'ne'
      consumeT(192);                // 'ne'
      break;
    case 204:                       // 'only'
      consumeT(204);                // 'only'
      break;
    case 206:                       // 'or'
      consumeT(206);                // 'or'
      break;
    case 207:                       // 'order'
      consumeT(207);                // 'order'
      break;
    case 208:                       // 'ordered'
      consumeT(208);                // 'ordered'
      break;
    case 212:                       // 'parent'
      consumeT(212);                // 'parent'
      break;
    case 218:                       // 'preceding'
      consumeT(218);                // 'preceding'
      break;
    case 219:                       // 'preceding-sibling'
      consumeT(219);                // 'preceding-sibling'
      break;
    case 224:                       // 'rename'
      consumeT(224);                // 'rename'
      break;
    case 225:                       // 'replace'
      consumeT(225);                // 'replace'
      break;
    case 226:                       // 'return'
      consumeT(226);                // 'return'
      break;
    case 230:                       // 'satisfies'
      consumeT(230);                // 'satisfies'
      break;
    case 235:                       // 'self'
      consumeT(235);                // 'self'
      break;
    case 241:                       // 'some'
      consumeT(241);                // 'some'
      break;
    case 242:                       // 'stable'
      consumeT(242);                // 'stable'
      break;
    case 243:                       // 'start'
      consumeT(243);                // 'start'
      break;
    case 254:                       // 'to'
      consumeT(254);                // 'to'
      break;
    case 255:                       // 'treat'
      consumeT(255);                // 'treat'
      break;
    case 256:                       // 'try'
      consumeT(256);                // 'try'
      break;
    case 260:                       // 'union'
      consumeT(260);                // 'union'
      break;
    case 262:                       // 'unordered'
      consumeT(262);                // 'unordered'
      break;
    case 266:                       // 'validate'
      consumeT(266);                // 'validate'
      break;
    case 272:                       // 'where'
      consumeT(272);                // 'where'
      break;
    case 276:                       // 'with'
      consumeT(276);                // 'with'
      break;
    case 280:                       // 'xquery'
      consumeT(280);                // 'xquery'
      break;
    case 77:                        // 'allowing'
      consumeT(77);                 // 'allowing'
      break;
    case 86:                        // 'at'
      consumeT(86);                 // 'at'
      break;
    case 88:                        // 'base-uri'
      consumeT(88);                 // 'base-uri'
      break;
    case 90:                        // 'boundary-space'
      consumeT(90);                 // 'boundary-space'
      break;
    case 91:                        // 'break'
      consumeT(91);                 // 'break'
      break;
    case 96:                        // 'catch'
      consumeT(96);                 // 'catch'
      break;
    case 103:                       // 'construction'
      consumeT(103);                // 'construction'
      break;
    case 106:                       // 'context'
      consumeT(106);                // 'context'
      break;
    case 107:                       // 'continue'
      consumeT(107);                // 'continue'
      break;
    case 109:                       // 'copy-namespaces'
      consumeT(109);                // 'copy-namespaces'
      break;
    case 111:                       // 'decimal-format'
      consumeT(111);                // 'decimal-format'
      break;
    case 130:                       // 'encoding'
      consumeT(130);                // 'encoding'
      break;
    case 137:                       // 'exit'
      consumeT(137);                // 'exit'
      break;
    case 138:                       // 'external'
      consumeT(138);                // 'external'
      break;
    case 146:                       // 'ft-option'
      consumeT(146);                // 'ft-option'
      break;
    case 159:                       // 'in'
      consumeT(159);                // 'in'
      break;
    case 160:                       // 'index'
      consumeT(160);                // 'index'
      break;
    case 166:                       // 'integrity'
      consumeT(166);                // 'integrity'
      break;
    case 176:                       // 'lax'
      consumeT(176);                // 'lax'
      break;
    case 198:                       // 'nodes'
      consumeT(198);                // 'nodes'
      break;
    case 205:                       // 'option'
      consumeT(205);                // 'option'
      break;
    case 209:                       // 'ordering'
      consumeT(209);                // 'ordering'
      break;
    case 228:                       // 'revalidation'
      consumeT(228);                // 'revalidation'
      break;
    case 231:                       // 'schema'
      consumeT(231);                // 'schema'
      break;
    case 234:                       // 'score'
      consumeT(234);                // 'score'
      break;
    case 240:                       // 'sliding'
      consumeT(240);                // 'sliding'
      break;
    case 246:                       // 'strict'
      consumeT(246);                // 'strict'
      break;
    case 257:                       // 'tumbling'
      consumeT(257);                // 'tumbling'
      break;
    case 258:                       // 'type'
      consumeT(258);                // 'type'
      break;
    case 263:                       // 'updating'
      consumeT(263);                // 'updating'
      break;
    case 267:                       // 'value'
      consumeT(267);                // 'value'
      break;
    case 268:                       // 'variable'
      consumeT(268);                // 'variable'
      break;
    case 269:                       // 'version'
      consumeT(269);                // 'version'
      break;
    case 273:                       // 'while'
      consumeT(273);                // 'while'
      break;
    case 102:                       // 'constraint'
      consumeT(102);                // 'constraint'
      break;
    case 181:                       // 'loop'
      consumeT(181);                // 'loop'
      break;
    case 227:                       // 'returning'
      consumeT(227);                // 'returning'
      break;
    case 200:                       // 'object'
      consumeT(200);                // 'object'
      break;
    case 172:                       // 'json-item'
      consumeT(172);                // 'json-item'
      break;
    default:
      consumeT(83);                 // 'array'
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 19:                        // NCName^Token
      consume(19);                  // NCName^Token
      break;
    case 75:                        // 'after'
      consume(75);                  // 'after'
      break;
    case 80:                        // 'and'
      consume(80);                  // 'and'
      break;
    case 84:                        // 'as'
      consume(84);                  // 'as'
      break;
    case 85:                        // 'ascending'
      consume(85);                  // 'ascending'
      break;
    case 89:                        // 'before'
      consume(89);                  // 'before'
      break;
    case 93:                        // 'case'
      consume(93);                  // 'case'
      break;
    case 94:                        // 'cast'
      consume(94);                  // 'cast'
      break;
    case 95:                        // 'castable'
      consume(95);                  // 'castable'
      break;
    case 99:                        // 'collation'
      consume(99);                  // 'collation'
      break;
    case 110:                       // 'count'
      consume(110);                 // 'count'
      break;
    case 114:                       // 'default'
      consume(114);                 // 'default'
      break;
    case 118:                       // 'descending'
      consume(118);                 // 'descending'
      break;
    case 123:                       // 'div'
      consume(123);                 // 'div'
      break;
    case 127:                       // 'else'
      consume(127);                 // 'else'
      break;
    case 128:                       // 'empty'
      consume(128);                 // 'empty'
      break;
    case 131:                       // 'end'
      consume(131);                 // 'end'
      break;
    case 133:                       // 'eq'
      consume(133);                 // 'eq'
      break;
    case 136:                       // 'except'
      consume(136);                 // 'except'
      break;
    case 142:                       // 'for'
      consume(142);                 // 'for'
      break;
    case 151:                       // 'ge'
      consume(151);                 // 'ge'
      break;
    case 153:                       // 'group'
      consume(153);                 // 'group'
      break;
    case 155:                       // 'gt'
      consume(155);                 // 'gt'
      break;
    case 156:                       // 'idiv'
      consume(156);                 // 'idiv'
      break;
    case 165:                       // 'instance'
      consume(165);                 // 'instance'
      break;
    case 167:                       // 'intersect'
      consume(167);                 // 'intersect'
      break;
    case 168:                       // 'into'
      consume(168);                 // 'into'
      break;
    case 169:                       // 'is'
      consume(169);                 // 'is'
      break;
    case 177:                       // 'le'
      consume(177);                 // 'le'
      break;
    case 179:                       // 'let'
      consume(179);                 // 'let'
      break;
    case 183:                       // 'lt'
      consume(183);                 // 'lt'
      break;
    case 186:                       // 'mod'
      consume(186);                 // 'mod'
      break;
    case 187:                       // 'modify'
      consume(187);                 // 'modify'
      break;
    case 192:                       // 'ne'
      consume(192);                 // 'ne'
      break;
    case 204:                       // 'only'
      consume(204);                 // 'only'
      break;
    case 206:                       // 'or'
      consume(206);                 // 'or'
      break;
    case 207:                       // 'order'
      consume(207);                 // 'order'
      break;
    case 226:                       // 'return'
      consume(226);                 // 'return'
      break;
    case 230:                       // 'satisfies'
      consume(230);                 // 'satisfies'
      break;
    case 242:                       // 'stable'
      consume(242);                 // 'stable'
      break;
    case 243:                       // 'start'
      consume(243);                 // 'start'
      break;
    case 254:                       // 'to'
      consume(254);                 // 'to'
      break;
    case 255:                       // 'treat'
      consume(255);                 // 'treat'
      break;
    case 260:                       // 'union'
      consume(260);                 // 'union'
      break;
    case 272:                       // 'where'
      consume(272);                 // 'where'
      break;
    case 276:                       // 'with'
      consume(276);                 // 'with'
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consume(79);                  // 'ancestor-or-self'
      break;
    case 87:                        // 'attribute'
      consume(87);                  // 'attribute'
      break;
    case 98:                        // 'child'
      consume(98);                  // 'child'
      break;
    case 101:                       // 'comment'
      consume(101);                 // 'comment'
      break;
    case 108:                       // 'copy'
      consume(108);                 // 'copy'
      break;
    case 113:                       // 'declare'
      consume(113);                 // 'declare'
      break;
    case 115:                       // 'delete'
      consume(115);                 // 'delete'
      break;
    case 116:                       // 'descendant'
      consume(116);                 // 'descendant'
      break;
    case 117:                       // 'descendant-or-self'
      consume(117);                 // 'descendant-or-self'
      break;
    case 124:                       // 'document'
      consume(124);                 // 'document'
      break;
    case 125:                       // 'document-node'
      consume(125);                 // 'document-node'
      break;
    case 126:                       // 'element'
      consume(126);                 // 'element'
      break;
    case 129:                       // 'empty-sequence'
      consume(129);                 // 'empty-sequence'
      break;
    case 134:                       // 'every'
      consume(134);                 // 'every'
      break;
    case 139:                       // 'first'
      consume(139);                 // 'first'
      break;
    case 140:                       // 'following'
      consume(140);                 // 'following'
      break;
    case 141:                       // 'following-sibling'
      consume(141);                 // 'following-sibling'
      break;
    case 150:                       // 'function'
      consume(150);                 // 'function'
      break;
    case 157:                       // 'if'
      consume(157);                 // 'if'
      break;
    case 158:                       // 'import'
      consume(158);                 // 'import'
      break;
    case 164:                       // 'insert'
      consume(164);                 // 'insert'
      break;
    case 170:                       // 'item'
      consume(170);                 // 'item'
      break;
    case 175:                       // 'last'
      consume(175);                 // 'last'
      break;
    case 184:                       // 'map'
      consume(184);                 // 'map'
      break;
    case 188:                       // 'module'
      consume(188);                 // 'module'
      break;
    case 190:                       // 'namespace'
      consume(190);                 // 'namespace'
      break;
    case 191:                       // 'namespace-node'
      consume(191);                 // 'namespace-node'
      break;
    case 197:                       // 'node'
      consume(197);                 // 'node'
      break;
    case 208:                       // 'ordered'
      consume(208);                 // 'ordered'
      break;
    case 212:                       // 'parent'
      consume(212);                 // 'parent'
      break;
    case 218:                       // 'preceding'
      consume(218);                 // 'preceding'
      break;
    case 219:                       // 'preceding-sibling'
      consume(219);                 // 'preceding-sibling'
      break;
    case 222:                       // 'processing-instruction'
      consume(222);                 // 'processing-instruction'
      break;
    case 224:                       // 'rename'
      consume(224);                 // 'rename'
      break;
    case 225:                       // 'replace'
      consume(225);                 // 'replace'
      break;
    case 232:                       // 'schema-attribute'
      consume(232);                 // 'schema-attribute'
      break;
    case 233:                       // 'schema-element'
      consume(233);                 // 'schema-element'
      break;
    case 235:                       // 'self'
      consume(235);                 // 'self'
      break;
    case 241:                       // 'some'
      consume(241);                 // 'some'
      break;
    case 249:                       // 'switch'
      consume(249);                 // 'switch'
      break;
    case 250:                       // 'text'
      consume(250);                 // 'text'
      break;
    case 256:                       // 'try'
      consume(256);                 // 'try'
      break;
    case 259:                       // 'typeswitch'
      consume(259);                 // 'typeswitch'
      break;
    case 262:                       // 'unordered'
      consume(262);                 // 'unordered'
      break;
    case 266:                       // 'validate'
      consume(266);                 // 'validate'
      break;
    case 268:                       // 'variable'
      consume(268);                 // 'variable'
      break;
    case 280:                       // 'xquery'
      consume(280);                 // 'xquery'
      break;
    case 77:                        // 'allowing'
      consume(77);                  // 'allowing'
      break;
    case 86:                        // 'at'
      consume(86);                  // 'at'
      break;
    case 88:                        // 'base-uri'
      consume(88);                  // 'base-uri'
      break;
    case 90:                        // 'boundary-space'
      consume(90);                  // 'boundary-space'
      break;
    case 91:                        // 'break'
      consume(91);                  // 'break'
      break;
    case 96:                        // 'catch'
      consume(96);                  // 'catch'
      break;
    case 103:                       // 'construction'
      consume(103);                 // 'construction'
      break;
    case 106:                       // 'context'
      consume(106);                 // 'context'
      break;
    case 107:                       // 'continue'
      consume(107);                 // 'continue'
      break;
    case 109:                       // 'copy-namespaces'
      consume(109);                 // 'copy-namespaces'
      break;
    case 111:                       // 'decimal-format'
      consume(111);                 // 'decimal-format'
      break;
    case 130:                       // 'encoding'
      consume(130);                 // 'encoding'
      break;
    case 137:                       // 'exit'
      consume(137);                 // 'exit'
      break;
    case 138:                       // 'external'
      consume(138);                 // 'external'
      break;
    case 146:                       // 'ft-option'
      consume(146);                 // 'ft-option'
      break;
    case 159:                       // 'in'
      consume(159);                 // 'in'
      break;
    case 160:                       // 'index'
      consume(160);                 // 'index'
      break;
    case 166:                       // 'integrity'
      consume(166);                 // 'integrity'
      break;
    case 176:                       // 'lax'
      consume(176);                 // 'lax'
      break;
    case 198:                       // 'nodes'
      consume(198);                 // 'nodes'
      break;
    case 205:                       // 'option'
      consume(205);                 // 'option'
      break;
    case 209:                       // 'ordering'
      consume(209);                 // 'ordering'
      break;
    case 228:                       // 'revalidation'
      consume(228);                 // 'revalidation'
      break;
    case 231:                       // 'schema'
      consume(231);                 // 'schema'
      break;
    case 234:                       // 'score'
      consume(234);                 // 'score'
      break;
    case 240:                       // 'sliding'
      consume(240);                 // 'sliding'
      break;
    case 246:                       // 'strict'
      consume(246);                 // 'strict'
      break;
    case 257:                       // 'tumbling'
      consume(257);                 // 'tumbling'
      break;
    case 258:                       // 'type'
      consume(258);                 // 'type'
      break;
    case 263:                       // 'updating'
      consume(263);                 // 'updating'
      break;
    case 267:                       // 'value'
      consume(267);                 // 'value'
      break;
    case 269:                       // 'version'
      consume(269);                 // 'version'
      break;
    case 273:                       // 'while'
      consume(273);                 // 'while'
      break;
    case 102:                       // 'constraint'
      consume(102);                 // 'constraint'
      break;
    case 181:                       // 'loop'
      consume(181);                 // 'loop'
      break;
    default:
      consume(227);                 // 'returning'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 19:                        // NCName^Token
      consumeT(19);                 // NCName^Token
      break;
    case 75:                        // 'after'
      consumeT(75);                 // 'after'
      break;
    case 80:                        // 'and'
      consumeT(80);                 // 'and'
      break;
    case 84:                        // 'as'
      consumeT(84);                 // 'as'
      break;
    case 85:                        // 'ascending'
      consumeT(85);                 // 'ascending'
      break;
    case 89:                        // 'before'
      consumeT(89);                 // 'before'
      break;
    case 93:                        // 'case'
      consumeT(93);                 // 'case'
      break;
    case 94:                        // 'cast'
      consumeT(94);                 // 'cast'
      break;
    case 95:                        // 'castable'
      consumeT(95);                 // 'castable'
      break;
    case 99:                        // 'collation'
      consumeT(99);                 // 'collation'
      break;
    case 110:                       // 'count'
      consumeT(110);                // 'count'
      break;
    case 114:                       // 'default'
      consumeT(114);                // 'default'
      break;
    case 118:                       // 'descending'
      consumeT(118);                // 'descending'
      break;
    case 123:                       // 'div'
      consumeT(123);                // 'div'
      break;
    case 127:                       // 'else'
      consumeT(127);                // 'else'
      break;
    case 128:                       // 'empty'
      consumeT(128);                // 'empty'
      break;
    case 131:                       // 'end'
      consumeT(131);                // 'end'
      break;
    case 133:                       // 'eq'
      consumeT(133);                // 'eq'
      break;
    case 136:                       // 'except'
      consumeT(136);                // 'except'
      break;
    case 142:                       // 'for'
      consumeT(142);                // 'for'
      break;
    case 151:                       // 'ge'
      consumeT(151);                // 'ge'
      break;
    case 153:                       // 'group'
      consumeT(153);                // 'group'
      break;
    case 155:                       // 'gt'
      consumeT(155);                // 'gt'
      break;
    case 156:                       // 'idiv'
      consumeT(156);                // 'idiv'
      break;
    case 165:                       // 'instance'
      consumeT(165);                // 'instance'
      break;
    case 167:                       // 'intersect'
      consumeT(167);                // 'intersect'
      break;
    case 168:                       // 'into'
      consumeT(168);                // 'into'
      break;
    case 169:                       // 'is'
      consumeT(169);                // 'is'
      break;
    case 177:                       // 'le'
      consumeT(177);                // 'le'
      break;
    case 179:                       // 'let'
      consumeT(179);                // 'let'
      break;
    case 183:                       // 'lt'
      consumeT(183);                // 'lt'
      break;
    case 186:                       // 'mod'
      consumeT(186);                // 'mod'
      break;
    case 187:                       // 'modify'
      consumeT(187);                // 'modify'
      break;
    case 192:                       // 'ne'
      consumeT(192);                // 'ne'
      break;
    case 204:                       // 'only'
      consumeT(204);                // 'only'
      break;
    case 206:                       // 'or'
      consumeT(206);                // 'or'
      break;
    case 207:                       // 'order'
      consumeT(207);                // 'order'
      break;
    case 226:                       // 'return'
      consumeT(226);                // 'return'
      break;
    case 230:                       // 'satisfies'
      consumeT(230);                // 'satisfies'
      break;
    case 242:                       // 'stable'
      consumeT(242);                // 'stable'
      break;
    case 243:                       // 'start'
      consumeT(243);                // 'start'
      break;
    case 254:                       // 'to'
      consumeT(254);                // 'to'
      break;
    case 255:                       // 'treat'
      consumeT(255);                // 'treat'
      break;
    case 260:                       // 'union'
      consumeT(260);                // 'union'
      break;
    case 272:                       // 'where'
      consumeT(272);                // 'where'
      break;
    case 276:                       // 'with'
      consumeT(276);                // 'with'
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consumeT(79);                 // 'ancestor-or-self'
      break;
    case 87:                        // 'attribute'
      consumeT(87);                 // 'attribute'
      break;
    case 98:                        // 'child'
      consumeT(98);                 // 'child'
      break;
    case 101:                       // 'comment'
      consumeT(101);                // 'comment'
      break;
    case 108:                       // 'copy'
      consumeT(108);                // 'copy'
      break;
    case 113:                       // 'declare'
      consumeT(113);                // 'declare'
      break;
    case 115:                       // 'delete'
      consumeT(115);                // 'delete'
      break;
    case 116:                       // 'descendant'
      consumeT(116);                // 'descendant'
      break;
    case 117:                       // 'descendant-or-self'
      consumeT(117);                // 'descendant-or-self'
      break;
    case 124:                       // 'document'
      consumeT(124);                // 'document'
      break;
    case 125:                       // 'document-node'
      consumeT(125);                // 'document-node'
      break;
    case 126:                       // 'element'
      consumeT(126);                // 'element'
      break;
    case 129:                       // 'empty-sequence'
      consumeT(129);                // 'empty-sequence'
      break;
    case 134:                       // 'every'
      consumeT(134);                // 'every'
      break;
    case 139:                       // 'first'
      consumeT(139);                // 'first'
      break;
    case 140:                       // 'following'
      consumeT(140);                // 'following'
      break;
    case 141:                       // 'following-sibling'
      consumeT(141);                // 'following-sibling'
      break;
    case 150:                       // 'function'
      consumeT(150);                // 'function'
      break;
    case 157:                       // 'if'
      consumeT(157);                // 'if'
      break;
    case 158:                       // 'import'
      consumeT(158);                // 'import'
      break;
    case 164:                       // 'insert'
      consumeT(164);                // 'insert'
      break;
    case 170:                       // 'item'
      consumeT(170);                // 'item'
      break;
    case 175:                       // 'last'
      consumeT(175);                // 'last'
      break;
    case 184:                       // 'map'
      consumeT(184);                // 'map'
      break;
    case 188:                       // 'module'
      consumeT(188);                // 'module'
      break;
    case 190:                       // 'namespace'
      consumeT(190);                // 'namespace'
      break;
    case 191:                       // 'namespace-node'
      consumeT(191);                // 'namespace-node'
      break;
    case 197:                       // 'node'
      consumeT(197);                // 'node'
      break;
    case 208:                       // 'ordered'
      consumeT(208);                // 'ordered'
      break;
    case 212:                       // 'parent'
      consumeT(212);                // 'parent'
      break;
    case 218:                       // 'preceding'
      consumeT(218);                // 'preceding'
      break;
    case 219:                       // 'preceding-sibling'
      consumeT(219);                // 'preceding-sibling'
      break;
    case 222:                       // 'processing-instruction'
      consumeT(222);                // 'processing-instruction'
      break;
    case 224:                       // 'rename'
      consumeT(224);                // 'rename'
      break;
    case 225:                       // 'replace'
      consumeT(225);                // 'replace'
      break;
    case 232:                       // 'schema-attribute'
      consumeT(232);                // 'schema-attribute'
      break;
    case 233:                       // 'schema-element'
      consumeT(233);                // 'schema-element'
      break;
    case 235:                       // 'self'
      consumeT(235);                // 'self'
      break;
    case 241:                       // 'some'
      consumeT(241);                // 'some'
      break;
    case 249:                       // 'switch'
      consumeT(249);                // 'switch'
      break;
    case 250:                       // 'text'
      consumeT(250);                // 'text'
      break;
    case 256:                       // 'try'
      consumeT(256);                // 'try'
      break;
    case 259:                       // 'typeswitch'
      consumeT(259);                // 'typeswitch'
      break;
    case 262:                       // 'unordered'
      consumeT(262);                // 'unordered'
      break;
    case 266:                       // 'validate'
      consumeT(266);                // 'validate'
      break;
    case 268:                       // 'variable'
      consumeT(268);                // 'variable'
      break;
    case 280:                       // 'xquery'
      consumeT(280);                // 'xquery'
      break;
    case 77:                        // 'allowing'
      consumeT(77);                 // 'allowing'
      break;
    case 86:                        // 'at'
      consumeT(86);                 // 'at'
      break;
    case 88:                        // 'base-uri'
      consumeT(88);                 // 'base-uri'
      break;
    case 90:                        // 'boundary-space'
      consumeT(90);                 // 'boundary-space'
      break;
    case 91:                        // 'break'
      consumeT(91);                 // 'break'
      break;
    case 96:                        // 'catch'
      consumeT(96);                 // 'catch'
      break;
    case 103:                       // 'construction'
      consumeT(103);                // 'construction'
      break;
    case 106:                       // 'context'
      consumeT(106);                // 'context'
      break;
    case 107:                       // 'continue'
      consumeT(107);                // 'continue'
      break;
    case 109:                       // 'copy-namespaces'
      consumeT(109);                // 'copy-namespaces'
      break;
    case 111:                       // 'decimal-format'
      consumeT(111);                // 'decimal-format'
      break;
    case 130:                       // 'encoding'
      consumeT(130);                // 'encoding'
      break;
    case 137:                       // 'exit'
      consumeT(137);                // 'exit'
      break;
    case 138:                       // 'external'
      consumeT(138);                // 'external'
      break;
    case 146:                       // 'ft-option'
      consumeT(146);                // 'ft-option'
      break;
    case 159:                       // 'in'
      consumeT(159);                // 'in'
      break;
    case 160:                       // 'index'
      consumeT(160);                // 'index'
      break;
    case 166:                       // 'integrity'
      consumeT(166);                // 'integrity'
      break;
    case 176:                       // 'lax'
      consumeT(176);                // 'lax'
      break;
    case 198:                       // 'nodes'
      consumeT(198);                // 'nodes'
      break;
    case 205:                       // 'option'
      consumeT(205);                // 'option'
      break;
    case 209:                       // 'ordering'
      consumeT(209);                // 'ordering'
      break;
    case 228:                       // 'revalidation'
      consumeT(228);                // 'revalidation'
      break;
    case 231:                       // 'schema'
      consumeT(231);                // 'schema'
      break;
    case 234:                       // 'score'
      consumeT(234);                // 'score'
      break;
    case 240:                       // 'sliding'
      consumeT(240);                // 'sliding'
      break;
    case 246:                       // 'strict'
      consumeT(246);                // 'strict'
      break;
    case 257:                       // 'tumbling'
      consumeT(257);                // 'tumbling'
      break;
    case 258:                       // 'type'
      consumeT(258);                // 'type'
      break;
    case 263:                       // 'updating'
      consumeT(263);                // 'updating'
      break;
    case 267:                       // 'value'
      consumeT(267);                // 'value'
      break;
    case 269:                       // 'version'
      consumeT(269);                // 'version'
      break;
    case 273:                       // 'while'
      consumeT(273);                // 'while'
      break;
    case 102:                       // 'constraint'
      consumeT(102);                // 'constraint'
      break;
    case 181:                       // 'loop'
      consumeT(181);                // 'loop'
      break;
    default:
      consumeT(227);                // 'returning'
    }
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_Program();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_Program()
  {
    eventHandler.startNonterminal("Program", e0);
    parse_StatementsAndOptionalExpr();
    eventHandler.endNonterminal("Program", e0);
  }

  function parse_Statements()
  {
    eventHandler.startNonterminal("Statements", e0);
    for (;;)
    {
      lookahead1W(285);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      switch (l1)
      {
      case 35:                      // '('
        lookahead2W(278);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 36:                      // '(#'
        lookahead2(255);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
        break;
      case 47:                      // '/'
        lookahead2W(290);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | '*' | '+' |
                                    // ',' | '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' |
                                    // '>' | '>=' | '>>' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '|' | '||' | '}'
        break;
      case 48:                      // '//'
        lookahead2W(272);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      case 55:                      // '<'
        lookahead2(4);              // QName
        break;
      case 56:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 60:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 66:                      // '?'
        lookahead2W(259);           // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 68:                      // '@'
        lookahead2W(261);           // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 70:                      // '['
        lookahead2W(279);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | ']' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 73:                      // '``['
        lookahead2(5);              // StringConstructorChars
        break;
      case 82:                      // 'append'
        lookahead2W(58);            // S^WS | '(:' | 'json'
        break;
      case 87:                      // 'attribute'
        lookahead2W(286);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' |
                                    // '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 126:                     // 'element'
        lookahead2W(284);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 137:                     // 'exit'
        lookahead2W(205);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 142:                     // 'for'
        lookahead2W(209);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'sliding' | 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||' | '}'
        break;
      case 179:                     // 'let'
        lookahead2W(207);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'score' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 184:                     // 'map'
        lookahead2W(197);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 224:                     // 'rename'
        lookahead2W(208);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 225:                     // 'replace'
        lookahead2W(211);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | 'value' | '|' | '||' | '}'
        break;
      case 266:                     // 'validate'
        lookahead2W(212);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'lax' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'strict' | 'to' | 'treat' | 'type' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 282:                     // '{'
        lookahead2W(281);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      case 284:                     // '{|'
        lookahead2W(280);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|}'
        break;
      case 5:                       // Wildcard
      case 46:                      // '..'
        lookahead2W(188);           // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 32:                      // '$'
      case 33:                      // '%'
        lookahead2W(258);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 41:                      // '+'
      case 43:                      // '-'
        lookahead2W(275);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      case 91:                      // 'break'
      case 107:                     // 'continue'
        lookahead2W(203);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 115:                     // 'delete'
      case 164:                     // 'insert'
        lookahead2W(210);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'nodes' | 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 129:                     // 'empty-sequence'
      case 170:                     // 'item'
        lookahead2W(193);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 190:                     // 'namespace'
      case 222:                     // 'processing-instruction'
        lookahead2W(274);           // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 108:                     // 'copy'
      case 134:                     // 'every'
      case 241:                     // 'some'
      case 268:                     // 'variable'
        lookahead2W(200);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 45:                      // '.'
        lookahead2W(198);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 83:                      // 'array'
      case 101:                     // 'comment'
      case 124:                     // 'document'
      case 208:                     // 'ordered'
      case 250:                     // 'text'
      case 256:                     // 'try'
      case 262:                     // 'unordered'
        lookahead2W(206);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 78:                      // 'ancestor'
      case 79:                      // 'ancestor-or-self'
      case 98:                      // 'child'
      case 116:                     // 'descendant'
      case 117:                     // 'descendant-or-self'
      case 140:                     // 'following'
      case 141:                     // 'following-sibling'
      case 212:                     // 'parent'
      case 218:                     // 'preceding'
      case 219:                     // 'preceding-sibling'
      case 235:                     // 'self'
        lookahead2W(201);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 6:                       // EQName^Token
      case 75:                      // 'after'
      case 77:                      // 'allowing'
      case 80:                      // 'and'
      case 84:                      // 'as'
      case 85:                      // 'ascending'
      case 86:                      // 'at'
      case 88:                      // 'base-uri'
      case 89:                      // 'before'
      case 90:                      // 'boundary-space'
      case 93:                      // 'case'
      case 94:                      // 'cast'
      case 95:                      // 'castable'
      case 96:                      // 'catch'
      case 99:                      // 'collation'
      case 102:                     // 'constraint'
      case 103:                     // 'construction'
      case 106:                     // 'context'
      case 109:                     // 'copy-namespaces'
      case 110:                     // 'count'
      case 111:                     // 'decimal-format'
      case 113:                     // 'declare'
      case 114:                     // 'default'
      case 118:                     // 'descending'
      case 123:                     // 'div'
      case 125:                     // 'document-node'
      case 127:                     // 'else'
      case 128:                     // 'empty'
      case 130:                     // 'encoding'
      case 131:                     // 'end'
      case 133:                     // 'eq'
      case 136:                     // 'except'
      case 138:                     // 'external'
      case 139:                     // 'first'
      case 146:                     // 'ft-option'
      case 150:                     // 'function'
      case 151:                     // 'ge'
      case 153:                     // 'group'
      case 155:                     // 'gt'
      case 156:                     // 'idiv'
      case 157:                     // 'if'
      case 158:                     // 'import'
      case 159:                     // 'in'
      case 160:                     // 'index'
      case 165:                     // 'instance'
      case 166:                     // 'integrity'
      case 167:                     // 'intersect'
      case 168:                     // 'into'
      case 169:                     // 'is'
      case 172:                     // 'json-item'
      case 175:                     // 'last'
      case 176:                     // 'lax'
      case 177:                     // 'le'
      case 181:                     // 'loop'
      case 183:                     // 'lt'
      case 186:                     // 'mod'
      case 187:                     // 'modify'
      case 188:                     // 'module'
      case 191:                     // 'namespace-node'
      case 192:                     // 'ne'
      case 197:                     // 'node'
      case 198:                     // 'nodes'
      case 200:                     // 'object'
      case 204:                     // 'only'
      case 205:                     // 'option'
      case 206:                     // 'or'
      case 207:                     // 'order'
      case 209:                     // 'ordering'
      case 226:                     // 'return'
      case 227:                     // 'returning'
      case 228:                     // 'revalidation'
      case 230:                     // 'satisfies'
      case 231:                     // 'schema'
      case 232:                     // 'schema-attribute'
      case 233:                     // 'schema-element'
      case 234:                     // 'score'
      case 240:                     // 'sliding'
      case 242:                     // 'stable'
      case 243:                     // 'start'
      case 246:                     // 'strict'
      case 249:                     // 'switch'
      case 254:                     // 'to'
      case 255:                     // 'treat'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 259:                     // 'typeswitch'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 267:                     // 'value'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
      case 280:                     // 'xquery'
        lookahead2W(196);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 26                  // EOF
       && lk != 288                 // '}'
       && lk != 13317               // Wildcard EOF
       && lk != 13318               // EQName^Token EOF
       && lk != 13320               // IntegerLiteral EOF
       && lk != 13321               // DecimalLiteral EOF
       && lk != 13322               // DoubleLiteral EOF
       && lk != 13323               // StringLiteral EOF
       && lk != 13357               // '.' EOF
       && lk != 13358               // '..' EOF
       && lk != 13359               // '/' EOF
       && lk != 13387               // 'after' EOF
       && lk != 13389               // 'allowing' EOF
       && lk != 13390               // 'ancestor' EOF
       && lk != 13391               // 'ancestor-or-self' EOF
       && lk != 13392               // 'and' EOF
       && lk != 13395               // 'array' EOF
       && lk != 13396               // 'as' EOF
       && lk != 13397               // 'ascending' EOF
       && lk != 13398               // 'at' EOF
       && lk != 13399               // 'attribute' EOF
       && lk != 13400               // 'base-uri' EOF
       && lk != 13401               // 'before' EOF
       && lk != 13402               // 'boundary-space' EOF
       && lk != 13403               // 'break' EOF
       && lk != 13405               // 'case' EOF
       && lk != 13406               // 'cast' EOF
       && lk != 13407               // 'castable' EOF
       && lk != 13408               // 'catch' EOF
       && lk != 13410               // 'child' EOF
       && lk != 13411               // 'collation' EOF
       && lk != 13413               // 'comment' EOF
       && lk != 13414               // 'constraint' EOF
       && lk != 13415               // 'construction' EOF
       && lk != 13418               // 'context' EOF
       && lk != 13419               // 'continue' EOF
       && lk != 13420               // 'copy' EOF
       && lk != 13421               // 'copy-namespaces' EOF
       && lk != 13422               // 'count' EOF
       && lk != 13423               // 'decimal-format' EOF
       && lk != 13425               // 'declare' EOF
       && lk != 13426               // 'default' EOF
       && lk != 13427               // 'delete' EOF
       && lk != 13428               // 'descendant' EOF
       && lk != 13429               // 'descendant-or-self' EOF
       && lk != 13430               // 'descending' EOF
       && lk != 13435               // 'div' EOF
       && lk != 13436               // 'document' EOF
       && lk != 13437               // 'document-node' EOF
       && lk != 13438               // 'element' EOF
       && lk != 13439               // 'else' EOF
       && lk != 13440               // 'empty' EOF
       && lk != 13441               // 'empty-sequence' EOF
       && lk != 13442               // 'encoding' EOF
       && lk != 13443               // 'end' EOF
       && lk != 13445               // 'eq' EOF
       && lk != 13446               // 'every' EOF
       && lk != 13448               // 'except' EOF
       && lk != 13449               // 'exit' EOF
       && lk != 13450               // 'external' EOF
       && lk != 13451               // 'first' EOF
       && lk != 13452               // 'following' EOF
       && lk != 13453               // 'following-sibling' EOF
       && lk != 13454               // 'for' EOF
       && lk != 13458               // 'ft-option' EOF
       && lk != 13462               // 'function' EOF
       && lk != 13463               // 'ge' EOF
       && lk != 13465               // 'group' EOF
       && lk != 13467               // 'gt' EOF
       && lk != 13468               // 'idiv' EOF
       && lk != 13469               // 'if' EOF
       && lk != 13470               // 'import' EOF
       && lk != 13471               // 'in' EOF
       && lk != 13472               // 'index' EOF
       && lk != 13476               // 'insert' EOF
       && lk != 13477               // 'instance' EOF
       && lk != 13478               // 'integrity' EOF
       && lk != 13479               // 'intersect' EOF
       && lk != 13480               // 'into' EOF
       && lk != 13481               // 'is' EOF
       && lk != 13482               // 'item' EOF
       && lk != 13484               // 'json-item' EOF
       && lk != 13487               // 'last' EOF
       && lk != 13488               // 'lax' EOF
       && lk != 13489               // 'le' EOF
       && lk != 13491               // 'let' EOF
       && lk != 13493               // 'loop' EOF
       && lk != 13495               // 'lt' EOF
       && lk != 13496               // 'map' EOF
       && lk != 13498               // 'mod' EOF
       && lk != 13499               // 'modify' EOF
       && lk != 13500               // 'module' EOF
       && lk != 13502               // 'namespace' EOF
       && lk != 13503               // 'namespace-node' EOF
       && lk != 13504               // 'ne' EOF
       && lk != 13509               // 'node' EOF
       && lk != 13510               // 'nodes' EOF
       && lk != 13512               // 'object' EOF
       && lk != 13516               // 'only' EOF
       && lk != 13517               // 'option' EOF
       && lk != 13518               // 'or' EOF
       && lk != 13519               // 'order' EOF
       && lk != 13520               // 'ordered' EOF
       && lk != 13521               // 'ordering' EOF
       && lk != 13524               // 'parent' EOF
       && lk != 13530               // 'preceding' EOF
       && lk != 13531               // 'preceding-sibling' EOF
       && lk != 13534               // 'processing-instruction' EOF
       && lk != 13536               // 'rename' EOF
       && lk != 13537               // 'replace' EOF
       && lk != 13538               // 'return' EOF
       && lk != 13539               // 'returning' EOF
       && lk != 13540               // 'revalidation' EOF
       && lk != 13542               // 'satisfies' EOF
       && lk != 13543               // 'schema' EOF
       && lk != 13544               // 'schema-attribute' EOF
       && lk != 13545               // 'schema-element' EOF
       && lk != 13546               // 'score' EOF
       && lk != 13547               // 'self' EOF
       && lk != 13552               // 'sliding' EOF
       && lk != 13553               // 'some' EOF
       && lk != 13554               // 'stable' EOF
       && lk != 13555               // 'start' EOF
       && lk != 13558               // 'strict' EOF
       && lk != 13561               // 'switch' EOF
       && lk != 13562               // 'text' EOF
       && lk != 13566               // 'to' EOF
       && lk != 13567               // 'treat' EOF
       && lk != 13568               // 'try' EOF
       && lk != 13569               // 'tumbling' EOF
       && lk != 13570               // 'type' EOF
       && lk != 13571               // 'typeswitch' EOF
       && lk != 13572               // 'union' EOF
       && lk != 13574               // 'unordered' EOF
       && lk != 13575               // 'updating' EOF
       && lk != 13578               // 'validate' EOF
       && lk != 13579               // 'value' EOF
       && lk != 13580               // 'variable' EOF
       && lk != 13581               // 'version' EOF
       && lk != 13584               // 'where' EOF
       && lk != 13585               // 'while' EOF
       && lk != 13588               // 'with' EOF
       && lk != 13592               // 'xquery' EOF
       && lk != 16652               // 'variable' '$'
       && lk != 21509               // Wildcard ','
       && lk != 21510               // EQName^Token ','
       && lk != 21512               // IntegerLiteral ','
       && lk != 21513               // DecimalLiteral ','
       && lk != 21514               // DoubleLiteral ','
       && lk != 21515               // StringLiteral ','
       && lk != 21549               // '.' ','
       && lk != 21550               // '..' ','
       && lk != 21551               // '/' ','
       && lk != 21579               // 'after' ','
       && lk != 21581               // 'allowing' ','
       && lk != 21582               // 'ancestor' ','
       && lk != 21583               // 'ancestor-or-self' ','
       && lk != 21584               // 'and' ','
       && lk != 21587               // 'array' ','
       && lk != 21588               // 'as' ','
       && lk != 21589               // 'ascending' ','
       && lk != 21590               // 'at' ','
       && lk != 21591               // 'attribute' ','
       && lk != 21592               // 'base-uri' ','
       && lk != 21593               // 'before' ','
       && lk != 21594               // 'boundary-space' ','
       && lk != 21595               // 'break' ','
       && lk != 21597               // 'case' ','
       && lk != 21598               // 'cast' ','
       && lk != 21599               // 'castable' ','
       && lk != 21600               // 'catch' ','
       && lk != 21602               // 'child' ','
       && lk != 21603               // 'collation' ','
       && lk != 21605               // 'comment' ','
       && lk != 21606               // 'constraint' ','
       && lk != 21607               // 'construction' ','
       && lk != 21610               // 'context' ','
       && lk != 21611               // 'continue' ','
       && lk != 21612               // 'copy' ','
       && lk != 21613               // 'copy-namespaces' ','
       && lk != 21614               // 'count' ','
       && lk != 21615               // 'decimal-format' ','
       && lk != 21617               // 'declare' ','
       && lk != 21618               // 'default' ','
       && lk != 21619               // 'delete' ','
       && lk != 21620               // 'descendant' ','
       && lk != 21621               // 'descendant-or-self' ','
       && lk != 21622               // 'descending' ','
       && lk != 21627               // 'div' ','
       && lk != 21628               // 'document' ','
       && lk != 21629               // 'document-node' ','
       && lk != 21630               // 'element' ','
       && lk != 21631               // 'else' ','
       && lk != 21632               // 'empty' ','
       && lk != 21633               // 'empty-sequence' ','
       && lk != 21634               // 'encoding' ','
       && lk != 21635               // 'end' ','
       && lk != 21637               // 'eq' ','
       && lk != 21638               // 'every' ','
       && lk != 21640               // 'except' ','
       && lk != 21641               // 'exit' ','
       && lk != 21642               // 'external' ','
       && lk != 21643               // 'first' ','
       && lk != 21644               // 'following' ','
       && lk != 21645               // 'following-sibling' ','
       && lk != 21646               // 'for' ','
       && lk != 21650               // 'ft-option' ','
       && lk != 21654               // 'function' ','
       && lk != 21655               // 'ge' ','
       && lk != 21657               // 'group' ','
       && lk != 21659               // 'gt' ','
       && lk != 21660               // 'idiv' ','
       && lk != 21661               // 'if' ','
       && lk != 21662               // 'import' ','
       && lk != 21663               // 'in' ','
       && lk != 21664               // 'index' ','
       && lk != 21668               // 'insert' ','
       && lk != 21669               // 'instance' ','
       && lk != 21670               // 'integrity' ','
       && lk != 21671               // 'intersect' ','
       && lk != 21672               // 'into' ','
       && lk != 21673               // 'is' ','
       && lk != 21674               // 'item' ','
       && lk != 21676               // 'json-item' ','
       && lk != 21679               // 'last' ','
       && lk != 21680               // 'lax' ','
       && lk != 21681               // 'le' ','
       && lk != 21683               // 'let' ','
       && lk != 21685               // 'loop' ','
       && lk != 21687               // 'lt' ','
       && lk != 21688               // 'map' ','
       && lk != 21690               // 'mod' ','
       && lk != 21691               // 'modify' ','
       && lk != 21692               // 'module' ','
       && lk != 21694               // 'namespace' ','
       && lk != 21695               // 'namespace-node' ','
       && lk != 21696               // 'ne' ','
       && lk != 21701               // 'node' ','
       && lk != 21702               // 'nodes' ','
       && lk != 21704               // 'object' ','
       && lk != 21708               // 'only' ','
       && lk != 21709               // 'option' ','
       && lk != 21710               // 'or' ','
       && lk != 21711               // 'order' ','
       && lk != 21712               // 'ordered' ','
       && lk != 21713               // 'ordering' ','
       && lk != 21716               // 'parent' ','
       && lk != 21722               // 'preceding' ','
       && lk != 21723               // 'preceding-sibling' ','
       && lk != 21726               // 'processing-instruction' ','
       && lk != 21728               // 'rename' ','
       && lk != 21729               // 'replace' ','
       && lk != 21730               // 'return' ','
       && lk != 21731               // 'returning' ','
       && lk != 21732               // 'revalidation' ','
       && lk != 21734               // 'satisfies' ','
       && lk != 21735               // 'schema' ','
       && lk != 21736               // 'schema-attribute' ','
       && lk != 21737               // 'schema-element' ','
       && lk != 21738               // 'score' ','
       && lk != 21739               // 'self' ','
       && lk != 21744               // 'sliding' ','
       && lk != 21745               // 'some' ','
       && lk != 21746               // 'stable' ','
       && lk != 21747               // 'start' ','
       && lk != 21750               // 'strict' ','
       && lk != 21753               // 'switch' ','
       && lk != 21754               // 'text' ','
       && lk != 21758               // 'to' ','
       && lk != 21759               // 'treat' ','
       && lk != 21760               // 'try' ','
       && lk != 21761               // 'tumbling' ','
       && lk != 21762               // 'type' ','
       && lk != 21763               // 'typeswitch' ','
       && lk != 21764               // 'union' ','
       && lk != 21766               // 'unordered' ','
       && lk != 21767               // 'updating' ','
       && lk != 21770               // 'validate' ','
       && lk != 21771               // 'value' ','
       && lk != 21772               // 'variable' ','
       && lk != 21773               // 'version' ','
       && lk != 21776               // 'where' ','
       && lk != 21777               // 'while' ','
       && lk != 21780               // 'with' ','
       && lk != 21784               // 'xquery' ','
       && lk != 27653               // Wildcard ';'
       && lk != 27654               // EQName^Token ';'
       && lk != 27656               // IntegerLiteral ';'
       && lk != 27657               // DecimalLiteral ';'
       && lk != 27658               // DoubleLiteral ';'
       && lk != 27659               // StringLiteral ';'
       && lk != 27693               // '.' ';'
       && lk != 27694               // '..' ';'
       && lk != 27695               // '/' ';'
       && lk != 27723               // 'after' ';'
       && lk != 27725               // 'allowing' ';'
       && lk != 27726               // 'ancestor' ';'
       && lk != 27727               // 'ancestor-or-self' ';'
       && lk != 27728               // 'and' ';'
       && lk != 27731               // 'array' ';'
       && lk != 27732               // 'as' ';'
       && lk != 27733               // 'ascending' ';'
       && lk != 27734               // 'at' ';'
       && lk != 27735               // 'attribute' ';'
       && lk != 27736               // 'base-uri' ';'
       && lk != 27737               // 'before' ';'
       && lk != 27738               // 'boundary-space' ';'
       && lk != 27739               // 'break' ';'
       && lk != 27741               // 'case' ';'
       && lk != 27742               // 'cast' ';'
       && lk != 27743               // 'castable' ';'
       && lk != 27744               // 'catch' ';'
       && lk != 27746               // 'child' ';'
       && lk != 27747               // 'collation' ';'
       && lk != 27749               // 'comment' ';'
       && lk != 27750               // 'constraint' ';'
       && lk != 27751               // 'construction' ';'
       && lk != 27754               // 'context' ';'
       && lk != 27755               // 'continue' ';'
       && lk != 27756               // 'copy' ';'
       && lk != 27757               // 'copy-namespaces' ';'
       && lk != 27758               // 'count' ';'
       && lk != 27759               // 'decimal-format' ';'
       && lk != 27761               // 'declare' ';'
       && lk != 27762               // 'default' ';'
       && lk != 27763               // 'delete' ';'
       && lk != 27764               // 'descendant' ';'
       && lk != 27765               // 'descendant-or-self' ';'
       && lk != 27766               // 'descending' ';'
       && lk != 27771               // 'div' ';'
       && lk != 27772               // 'document' ';'
       && lk != 27773               // 'document-node' ';'
       && lk != 27774               // 'element' ';'
       && lk != 27775               // 'else' ';'
       && lk != 27776               // 'empty' ';'
       && lk != 27777               // 'empty-sequence' ';'
       && lk != 27778               // 'encoding' ';'
       && lk != 27779               // 'end' ';'
       && lk != 27781               // 'eq' ';'
       && lk != 27782               // 'every' ';'
       && lk != 27784               // 'except' ';'
       && lk != 27785               // 'exit' ';'
       && lk != 27786               // 'external' ';'
       && lk != 27787               // 'first' ';'
       && lk != 27788               // 'following' ';'
       && lk != 27789               // 'following-sibling' ';'
       && lk != 27790               // 'for' ';'
       && lk != 27794               // 'ft-option' ';'
       && lk != 27798               // 'function' ';'
       && lk != 27799               // 'ge' ';'
       && lk != 27801               // 'group' ';'
       && lk != 27803               // 'gt' ';'
       && lk != 27804               // 'idiv' ';'
       && lk != 27805               // 'if' ';'
       && lk != 27806               // 'import' ';'
       && lk != 27807               // 'in' ';'
       && lk != 27808               // 'index' ';'
       && lk != 27812               // 'insert' ';'
       && lk != 27813               // 'instance' ';'
       && lk != 27814               // 'integrity' ';'
       && lk != 27815               // 'intersect' ';'
       && lk != 27816               // 'into' ';'
       && lk != 27817               // 'is' ';'
       && lk != 27818               // 'item' ';'
       && lk != 27820               // 'json-item' ';'
       && lk != 27823               // 'last' ';'
       && lk != 27824               // 'lax' ';'
       && lk != 27825               // 'le' ';'
       && lk != 27827               // 'let' ';'
       && lk != 27829               // 'loop' ';'
       && lk != 27831               // 'lt' ';'
       && lk != 27832               // 'map' ';'
       && lk != 27834               // 'mod' ';'
       && lk != 27835               // 'modify' ';'
       && lk != 27836               // 'module' ';'
       && lk != 27838               // 'namespace' ';'
       && lk != 27839               // 'namespace-node' ';'
       && lk != 27840               // 'ne' ';'
       && lk != 27845               // 'node' ';'
       && lk != 27846               // 'nodes' ';'
       && lk != 27848               // 'object' ';'
       && lk != 27852               // 'only' ';'
       && lk != 27853               // 'option' ';'
       && lk != 27854               // 'or' ';'
       && lk != 27855               // 'order' ';'
       && lk != 27856               // 'ordered' ';'
       && lk != 27857               // 'ordering' ';'
       && lk != 27860               // 'parent' ';'
       && lk != 27866               // 'preceding' ';'
       && lk != 27867               // 'preceding-sibling' ';'
       && lk != 27870               // 'processing-instruction' ';'
       && lk != 27872               // 'rename' ';'
       && lk != 27873               // 'replace' ';'
       && lk != 27874               // 'return' ';'
       && lk != 27875               // 'returning' ';'
       && lk != 27876               // 'revalidation' ';'
       && lk != 27878               // 'satisfies' ';'
       && lk != 27879               // 'schema' ';'
       && lk != 27880               // 'schema-attribute' ';'
       && lk != 27881               // 'schema-element' ';'
       && lk != 27882               // 'score' ';'
       && lk != 27883               // 'self' ';'
       && lk != 27888               // 'sliding' ';'
       && lk != 27889               // 'some' ';'
       && lk != 27890               // 'stable' ';'
       && lk != 27891               // 'start' ';'
       && lk != 27894               // 'strict' ';'
       && lk != 27897               // 'switch' ';'
       && lk != 27898               // 'text' ';'
       && lk != 27902               // 'to' ';'
       && lk != 27903               // 'treat' ';'
       && lk != 27904               // 'try' ';'
       && lk != 27905               // 'tumbling' ';'
       && lk != 27906               // 'type' ';'
       && lk != 27907               // 'typeswitch' ';'
       && lk != 27908               // 'union' ';'
       && lk != 27910               // 'unordered' ';'
       && lk != 27911               // 'updating' ';'
       && lk != 27914               // 'validate' ';'
       && lk != 27915               // 'value' ';'
       && lk != 27916               // 'variable' ';'
       && lk != 27917               // 'version' ';'
       && lk != 27920               // 'where' ';'
       && lk != 27921               // 'while' ';'
       && lk != 27924               // 'with' ';'
       && lk != 27928               // 'xquery' ';'
       && lk != 92763               // 'break' 'loop'
       && lk != 92779               // 'continue' 'loop'
       && lk != 116361              // 'exit' 'returning'
       && lk != 147461              // Wildcard '}'
       && lk != 147462              // EQName^Token '}'
       && lk != 147464              // IntegerLiteral '}'
       && lk != 147465              // DecimalLiteral '}'
       && lk != 147466              // DoubleLiteral '}'
       && lk != 147467              // StringLiteral '}'
       && lk != 147501              // '.' '}'
       && lk != 147502              // '..' '}'
       && lk != 147503              // '/' '}'
       && lk != 147531              // 'after' '}'
       && lk != 147533              // 'allowing' '}'
       && lk != 147534              // 'ancestor' '}'
       && lk != 147535              // 'ancestor-or-self' '}'
       && lk != 147536              // 'and' '}'
       && lk != 147539              // 'array' '}'
       && lk != 147540              // 'as' '}'
       && lk != 147541              // 'ascending' '}'
       && lk != 147542              // 'at' '}'
       && lk != 147543              // 'attribute' '}'
       && lk != 147544              // 'base-uri' '}'
       && lk != 147545              // 'before' '}'
       && lk != 147546              // 'boundary-space' '}'
       && lk != 147547              // 'break' '}'
       && lk != 147549              // 'case' '}'
       && lk != 147550              // 'cast' '}'
       && lk != 147551              // 'castable' '}'
       && lk != 147552              // 'catch' '}'
       && lk != 147554              // 'child' '}'
       && lk != 147555              // 'collation' '}'
       && lk != 147557              // 'comment' '}'
       && lk != 147558              // 'constraint' '}'
       && lk != 147559              // 'construction' '}'
       && lk != 147562              // 'context' '}'
       && lk != 147563              // 'continue' '}'
       && lk != 147564              // 'copy' '}'
       && lk != 147565              // 'copy-namespaces' '}'
       && lk != 147566              // 'count' '}'
       && lk != 147567              // 'decimal-format' '}'
       && lk != 147569              // 'declare' '}'
       && lk != 147570              // 'default' '}'
       && lk != 147571              // 'delete' '}'
       && lk != 147572              // 'descendant' '}'
       && lk != 147573              // 'descendant-or-self' '}'
       && lk != 147574              // 'descending' '}'
       && lk != 147579              // 'div' '}'
       && lk != 147580              // 'document' '}'
       && lk != 147581              // 'document-node' '}'
       && lk != 147582              // 'element' '}'
       && lk != 147583              // 'else' '}'
       && lk != 147584              // 'empty' '}'
       && lk != 147585              // 'empty-sequence' '}'
       && lk != 147586              // 'encoding' '}'
       && lk != 147587              // 'end' '}'
       && lk != 147589              // 'eq' '}'
       && lk != 147590              // 'every' '}'
       && lk != 147592              // 'except' '}'
       && lk != 147593              // 'exit' '}'
       && lk != 147594              // 'external' '}'
       && lk != 147595              // 'first' '}'
       && lk != 147596              // 'following' '}'
       && lk != 147597              // 'following-sibling' '}'
       && lk != 147598              // 'for' '}'
       && lk != 147602              // 'ft-option' '}'
       && lk != 147606              // 'function' '}'
       && lk != 147607              // 'ge' '}'
       && lk != 147609              // 'group' '}'
       && lk != 147611              // 'gt' '}'
       && lk != 147612              // 'idiv' '}'
       && lk != 147613              // 'if' '}'
       && lk != 147614              // 'import' '}'
       && lk != 147615              // 'in' '}'
       && lk != 147616              // 'index' '}'
       && lk != 147620              // 'insert' '}'
       && lk != 147621              // 'instance' '}'
       && lk != 147622              // 'integrity' '}'
       && lk != 147623              // 'intersect' '}'
       && lk != 147624              // 'into' '}'
       && lk != 147625              // 'is' '}'
       && lk != 147626              // 'item' '}'
       && lk != 147628              // 'json-item' '}'
       && lk != 147631              // 'last' '}'
       && lk != 147632              // 'lax' '}'
       && lk != 147633              // 'le' '}'
       && lk != 147635              // 'let' '}'
       && lk != 147637              // 'loop' '}'
       && lk != 147639              // 'lt' '}'
       && lk != 147640              // 'map' '}'
       && lk != 147642              // 'mod' '}'
       && lk != 147643              // 'modify' '}'
       && lk != 147644              // 'module' '}'
       && lk != 147646              // 'namespace' '}'
       && lk != 147647              // 'namespace-node' '}'
       && lk != 147648              // 'ne' '}'
       && lk != 147653              // 'node' '}'
       && lk != 147654              // 'nodes' '}'
       && lk != 147656              // 'object' '}'
       && lk != 147660              // 'only' '}'
       && lk != 147661              // 'option' '}'
       && lk != 147662              // 'or' '}'
       && lk != 147663              // 'order' '}'
       && lk != 147664              // 'ordered' '}'
       && lk != 147665              // 'ordering' '}'
       && lk != 147668              // 'parent' '}'
       && lk != 147674              // 'preceding' '}'
       && lk != 147675              // 'preceding-sibling' '}'
       && lk != 147678              // 'processing-instruction' '}'
       && lk != 147680              // 'rename' '}'
       && lk != 147681              // 'replace' '}'
       && lk != 147682              // 'return' '}'
       && lk != 147683              // 'returning' '}'
       && lk != 147684              // 'revalidation' '}'
       && lk != 147686              // 'satisfies' '}'
       && lk != 147687              // 'schema' '}'
       && lk != 147688              // 'schema-attribute' '}'
       && lk != 147689              // 'schema-element' '}'
       && lk != 147690              // 'score' '}'
       && lk != 147691              // 'self' '}'
       && lk != 147696              // 'sliding' '}'
       && lk != 147697              // 'some' '}'
       && lk != 147698              // 'stable' '}'
       && lk != 147699              // 'start' '}'
       && lk != 147702              // 'strict' '}'
       && lk != 147705              // 'switch' '}'
       && lk != 147706              // 'text' '}'
       && lk != 147710              // 'to' '}'
       && lk != 147711              // 'treat' '}'
       && lk != 147712              // 'try' '}'
       && lk != 147713              // 'tumbling' '}'
       && lk != 147714              // 'type' '}'
       && lk != 147715              // 'typeswitch' '}'
       && lk != 147716              // 'union' '}'
       && lk != 147718              // 'unordered' '}'
       && lk != 147719              // 'updating' '}'
       && lk != 147722              // 'validate' '}'
       && lk != 147723              // 'value' '}'
       && lk != 147724              // 'variable' '}'
       && lk != 147725              // 'version' '}'
       && lk != 147728              // 'where' '}'
       && lk != 147729              // 'while' '}'
       && lk != 147732              // 'with' '}'
       && lk != 147736)             // 'xquery' '}'
      {
        lk = memoized(6, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(6, e0, lk);
        }
      }
      if (lk != -1
       && lk != 16652               // 'variable' '$'
       && lk != 27653               // Wildcard ';'
       && lk != 27654               // EQName^Token ';'
       && lk != 27656               // IntegerLiteral ';'
       && lk != 27657               // DecimalLiteral ';'
       && lk != 27658               // DoubleLiteral ';'
       && lk != 27659               // StringLiteral ';'
       && lk != 27693               // '.' ';'
       && lk != 27694               // '..' ';'
       && lk != 27695               // '/' ';'
       && lk != 27723               // 'after' ';'
       && lk != 27725               // 'allowing' ';'
       && lk != 27726               // 'ancestor' ';'
       && lk != 27727               // 'ancestor-or-self' ';'
       && lk != 27728               // 'and' ';'
       && lk != 27731               // 'array' ';'
       && lk != 27732               // 'as' ';'
       && lk != 27733               // 'ascending' ';'
       && lk != 27734               // 'at' ';'
       && lk != 27735               // 'attribute' ';'
       && lk != 27736               // 'base-uri' ';'
       && lk != 27737               // 'before' ';'
       && lk != 27738               // 'boundary-space' ';'
       && lk != 27739               // 'break' ';'
       && lk != 27741               // 'case' ';'
       && lk != 27742               // 'cast' ';'
       && lk != 27743               // 'castable' ';'
       && lk != 27744               // 'catch' ';'
       && lk != 27746               // 'child' ';'
       && lk != 27747               // 'collation' ';'
       && lk != 27749               // 'comment' ';'
       && lk != 27750               // 'constraint' ';'
       && lk != 27751               // 'construction' ';'
       && lk != 27754               // 'context' ';'
       && lk != 27755               // 'continue' ';'
       && lk != 27756               // 'copy' ';'
       && lk != 27757               // 'copy-namespaces' ';'
       && lk != 27758               // 'count' ';'
       && lk != 27759               // 'decimal-format' ';'
       && lk != 27761               // 'declare' ';'
       && lk != 27762               // 'default' ';'
       && lk != 27763               // 'delete' ';'
       && lk != 27764               // 'descendant' ';'
       && lk != 27765               // 'descendant-or-self' ';'
       && lk != 27766               // 'descending' ';'
       && lk != 27771               // 'div' ';'
       && lk != 27772               // 'document' ';'
       && lk != 27773               // 'document-node' ';'
       && lk != 27774               // 'element' ';'
       && lk != 27775               // 'else' ';'
       && lk != 27776               // 'empty' ';'
       && lk != 27777               // 'empty-sequence' ';'
       && lk != 27778               // 'encoding' ';'
       && lk != 27779               // 'end' ';'
       && lk != 27781               // 'eq' ';'
       && lk != 27782               // 'every' ';'
       && lk != 27784               // 'except' ';'
       && lk != 27785               // 'exit' ';'
       && lk != 27786               // 'external' ';'
       && lk != 27787               // 'first' ';'
       && lk != 27788               // 'following' ';'
       && lk != 27789               // 'following-sibling' ';'
       && lk != 27790               // 'for' ';'
       && lk != 27794               // 'ft-option' ';'
       && lk != 27798               // 'function' ';'
       && lk != 27799               // 'ge' ';'
       && lk != 27801               // 'group' ';'
       && lk != 27803               // 'gt' ';'
       && lk != 27804               // 'idiv' ';'
       && lk != 27805               // 'if' ';'
       && lk != 27806               // 'import' ';'
       && lk != 27807               // 'in' ';'
       && lk != 27808               // 'index' ';'
       && lk != 27812               // 'insert' ';'
       && lk != 27813               // 'instance' ';'
       && lk != 27814               // 'integrity' ';'
       && lk != 27815               // 'intersect' ';'
       && lk != 27816               // 'into' ';'
       && lk != 27817               // 'is' ';'
       && lk != 27818               // 'item' ';'
       && lk != 27820               // 'json-item' ';'
       && lk != 27823               // 'last' ';'
       && lk != 27824               // 'lax' ';'
       && lk != 27825               // 'le' ';'
       && lk != 27827               // 'let' ';'
       && lk != 27829               // 'loop' ';'
       && lk != 27831               // 'lt' ';'
       && lk != 27832               // 'map' ';'
       && lk != 27834               // 'mod' ';'
       && lk != 27835               // 'modify' ';'
       && lk != 27836               // 'module' ';'
       && lk != 27838               // 'namespace' ';'
       && lk != 27839               // 'namespace-node' ';'
       && lk != 27840               // 'ne' ';'
       && lk != 27845               // 'node' ';'
       && lk != 27846               // 'nodes' ';'
       && lk != 27848               // 'object' ';'
       && lk != 27852               // 'only' ';'
       && lk != 27853               // 'option' ';'
       && lk != 27854               // 'or' ';'
       && lk != 27855               // 'order' ';'
       && lk != 27856               // 'ordered' ';'
       && lk != 27857               // 'ordering' ';'
       && lk != 27860               // 'parent' ';'
       && lk != 27866               // 'preceding' ';'
       && lk != 27867               // 'preceding-sibling' ';'
       && lk != 27870               // 'processing-instruction' ';'
       && lk != 27872               // 'rename' ';'
       && lk != 27873               // 'replace' ';'
       && lk != 27874               // 'return' ';'
       && lk != 27875               // 'returning' ';'
       && lk != 27876               // 'revalidation' ';'
       && lk != 27878               // 'satisfies' ';'
       && lk != 27879               // 'schema' ';'
       && lk != 27880               // 'schema-attribute' ';'
       && lk != 27881               // 'schema-element' ';'
       && lk != 27882               // 'score' ';'
       && lk != 27883               // 'self' ';'
       && lk != 27888               // 'sliding' ';'
       && lk != 27889               // 'some' ';'
       && lk != 27890               // 'stable' ';'
       && lk != 27891               // 'start' ';'
       && lk != 27894               // 'strict' ';'
       && lk != 27897               // 'switch' ';'
       && lk != 27898               // 'text' ';'
       && lk != 27902               // 'to' ';'
       && lk != 27903               // 'treat' ';'
       && lk != 27904               // 'try' ';'
       && lk != 27905               // 'tumbling' ';'
       && lk != 27906               // 'type' ';'
       && lk != 27907               // 'typeswitch' ';'
       && lk != 27908               // 'union' ';'
       && lk != 27910               // 'unordered' ';'
       && lk != 27911               // 'updating' ';'
       && lk != 27914               // 'validate' ';'
       && lk != 27915               // 'value' ';'
       && lk != 27916               // 'variable' ';'
       && lk != 27917               // 'version' ';'
       && lk != 27920               // 'where' ';'
       && lk != 27921               // 'while' ';'
       && lk != 27924               // 'with' ';'
       && lk != 27928               // 'xquery' ';'
       && lk != 92763               // 'break' 'loop'
       && lk != 92779               // 'continue' 'loop'
       && lk != 116361)             // 'exit' 'returning'
      {
        break;
      }
      whitespace();
      parse_Statement();
    }
    eventHandler.endNonterminal("Statements", e0);
  }

  function try_Statements()
  {
    for (;;)
    {
      lookahead1W(285);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      switch (l1)
      {
      case 35:                      // '('
        lookahead2W(278);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 36:                      // '(#'
        lookahead2(255);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
        break;
      case 47:                      // '/'
        lookahead2W(290);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | '*' | '+' |
                                    // ',' | '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' |
                                    // '>' | '>=' | '>>' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '|' | '||' | '}'
        break;
      case 48:                      // '//'
        lookahead2W(272);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      case 55:                      // '<'
        lookahead2(4);              // QName
        break;
      case 56:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 60:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 66:                      // '?'
        lookahead2W(259);           // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 68:                      // '@'
        lookahead2W(261);           // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 70:                      // '['
        lookahead2W(279);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | ']' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 73:                      // '``['
        lookahead2(5);              // StringConstructorChars
        break;
      case 82:                      // 'append'
        lookahead2W(58);            // S^WS | '(:' | 'json'
        break;
      case 87:                      // 'attribute'
        lookahead2W(286);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' |
                                    // '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 126:                     // 'element'
        lookahead2W(284);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 137:                     // 'exit'
        lookahead2W(205);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 142:                     // 'for'
        lookahead2W(209);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'sliding' | 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||' | '}'
        break;
      case 179:                     // 'let'
        lookahead2W(207);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'score' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 184:                     // 'map'
        lookahead2W(197);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 224:                     // 'rename'
        lookahead2W(208);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 225:                     // 'replace'
        lookahead2W(211);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | 'value' | '|' | '||' | '}'
        break;
      case 266:                     // 'validate'
        lookahead2W(212);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'lax' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'strict' | 'to' | 'treat' | 'type' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 282:                     // '{'
        lookahead2W(281);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      case 284:                     // '{|'
        lookahead2W(280);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|}'
        break;
      case 5:                       // Wildcard
      case 46:                      // '..'
        lookahead2W(188);           // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 32:                      // '$'
      case 33:                      // '%'
        lookahead2W(258);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 41:                      // '+'
      case 43:                      // '-'
        lookahead2W(275);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      case 91:                      // 'break'
      case 107:                     // 'continue'
        lookahead2W(203);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 115:                     // 'delete'
      case 164:                     // 'insert'
        lookahead2W(210);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'nodes' | 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 129:                     // 'empty-sequence'
      case 170:                     // 'item'
        lookahead2W(193);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 190:                     // 'namespace'
      case 222:                     // 'processing-instruction'
        lookahead2W(274);           // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 108:                     // 'copy'
      case 134:                     // 'every'
      case 241:                     // 'some'
      case 268:                     // 'variable'
        lookahead2W(200);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 45:                      // '.'
        lookahead2W(198);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 83:                      // 'array'
      case 101:                     // 'comment'
      case 124:                     // 'document'
      case 208:                     // 'ordered'
      case 250:                     // 'text'
      case 256:                     // 'try'
      case 262:                     // 'unordered'
        lookahead2W(206);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 78:                      // 'ancestor'
      case 79:                      // 'ancestor-or-self'
      case 98:                      // 'child'
      case 116:                     // 'descendant'
      case 117:                     // 'descendant-or-self'
      case 140:                     // 'following'
      case 141:                     // 'following-sibling'
      case 212:                     // 'parent'
      case 218:                     // 'preceding'
      case 219:                     // 'preceding-sibling'
      case 235:                     // 'self'
        lookahead2W(201);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 6:                       // EQName^Token
      case 75:                      // 'after'
      case 77:                      // 'allowing'
      case 80:                      // 'and'
      case 84:                      // 'as'
      case 85:                      // 'ascending'
      case 86:                      // 'at'
      case 88:                      // 'base-uri'
      case 89:                      // 'before'
      case 90:                      // 'boundary-space'
      case 93:                      // 'case'
      case 94:                      // 'cast'
      case 95:                      // 'castable'
      case 96:                      // 'catch'
      case 99:                      // 'collation'
      case 102:                     // 'constraint'
      case 103:                     // 'construction'
      case 106:                     // 'context'
      case 109:                     // 'copy-namespaces'
      case 110:                     // 'count'
      case 111:                     // 'decimal-format'
      case 113:                     // 'declare'
      case 114:                     // 'default'
      case 118:                     // 'descending'
      case 123:                     // 'div'
      case 125:                     // 'document-node'
      case 127:                     // 'else'
      case 128:                     // 'empty'
      case 130:                     // 'encoding'
      case 131:                     // 'end'
      case 133:                     // 'eq'
      case 136:                     // 'except'
      case 138:                     // 'external'
      case 139:                     // 'first'
      case 146:                     // 'ft-option'
      case 150:                     // 'function'
      case 151:                     // 'ge'
      case 153:                     // 'group'
      case 155:                     // 'gt'
      case 156:                     // 'idiv'
      case 157:                     // 'if'
      case 158:                     // 'import'
      case 159:                     // 'in'
      case 160:                     // 'index'
      case 165:                     // 'instance'
      case 166:                     // 'integrity'
      case 167:                     // 'intersect'
      case 168:                     // 'into'
      case 169:                     // 'is'
      case 172:                     // 'json-item'
      case 175:                     // 'last'
      case 176:                     // 'lax'
      case 177:                     // 'le'
      case 181:                     // 'loop'
      case 183:                     // 'lt'
      case 186:                     // 'mod'
      case 187:                     // 'modify'
      case 188:                     // 'module'
      case 191:                     // 'namespace-node'
      case 192:                     // 'ne'
      case 197:                     // 'node'
      case 198:                     // 'nodes'
      case 200:                     // 'object'
      case 204:                     // 'only'
      case 205:                     // 'option'
      case 206:                     // 'or'
      case 207:                     // 'order'
      case 209:                     // 'ordering'
      case 226:                     // 'return'
      case 227:                     // 'returning'
      case 228:                     // 'revalidation'
      case 230:                     // 'satisfies'
      case 231:                     // 'schema'
      case 232:                     // 'schema-attribute'
      case 233:                     // 'schema-element'
      case 234:                     // 'score'
      case 240:                     // 'sliding'
      case 242:                     // 'stable'
      case 243:                     // 'start'
      case 246:                     // 'strict'
      case 249:                     // 'switch'
      case 254:                     // 'to'
      case 255:                     // 'treat'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 259:                     // 'typeswitch'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 267:                     // 'value'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
      case 280:                     // 'xquery'
        lookahead2W(196);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 26                  // EOF
       && lk != 288                 // '}'
       && lk != 13317               // Wildcard EOF
       && lk != 13318               // EQName^Token EOF
       && lk != 13320               // IntegerLiteral EOF
       && lk != 13321               // DecimalLiteral EOF
       && lk != 13322               // DoubleLiteral EOF
       && lk != 13323               // StringLiteral EOF
       && lk != 13357               // '.' EOF
       && lk != 13358               // '..' EOF
       && lk != 13359               // '/' EOF
       && lk != 13387               // 'after' EOF
       && lk != 13389               // 'allowing' EOF
       && lk != 13390               // 'ancestor' EOF
       && lk != 13391               // 'ancestor-or-self' EOF
       && lk != 13392               // 'and' EOF
       && lk != 13395               // 'array' EOF
       && lk != 13396               // 'as' EOF
       && lk != 13397               // 'ascending' EOF
       && lk != 13398               // 'at' EOF
       && lk != 13399               // 'attribute' EOF
       && lk != 13400               // 'base-uri' EOF
       && lk != 13401               // 'before' EOF
       && lk != 13402               // 'boundary-space' EOF
       && lk != 13403               // 'break' EOF
       && lk != 13405               // 'case' EOF
       && lk != 13406               // 'cast' EOF
       && lk != 13407               // 'castable' EOF
       && lk != 13408               // 'catch' EOF
       && lk != 13410               // 'child' EOF
       && lk != 13411               // 'collation' EOF
       && lk != 13413               // 'comment' EOF
       && lk != 13414               // 'constraint' EOF
       && lk != 13415               // 'construction' EOF
       && lk != 13418               // 'context' EOF
       && lk != 13419               // 'continue' EOF
       && lk != 13420               // 'copy' EOF
       && lk != 13421               // 'copy-namespaces' EOF
       && lk != 13422               // 'count' EOF
       && lk != 13423               // 'decimal-format' EOF
       && lk != 13425               // 'declare' EOF
       && lk != 13426               // 'default' EOF
       && lk != 13427               // 'delete' EOF
       && lk != 13428               // 'descendant' EOF
       && lk != 13429               // 'descendant-or-self' EOF
       && lk != 13430               // 'descending' EOF
       && lk != 13435               // 'div' EOF
       && lk != 13436               // 'document' EOF
       && lk != 13437               // 'document-node' EOF
       && lk != 13438               // 'element' EOF
       && lk != 13439               // 'else' EOF
       && lk != 13440               // 'empty' EOF
       && lk != 13441               // 'empty-sequence' EOF
       && lk != 13442               // 'encoding' EOF
       && lk != 13443               // 'end' EOF
       && lk != 13445               // 'eq' EOF
       && lk != 13446               // 'every' EOF
       && lk != 13448               // 'except' EOF
       && lk != 13449               // 'exit' EOF
       && lk != 13450               // 'external' EOF
       && lk != 13451               // 'first' EOF
       && lk != 13452               // 'following' EOF
       && lk != 13453               // 'following-sibling' EOF
       && lk != 13454               // 'for' EOF
       && lk != 13458               // 'ft-option' EOF
       && lk != 13462               // 'function' EOF
       && lk != 13463               // 'ge' EOF
       && lk != 13465               // 'group' EOF
       && lk != 13467               // 'gt' EOF
       && lk != 13468               // 'idiv' EOF
       && lk != 13469               // 'if' EOF
       && lk != 13470               // 'import' EOF
       && lk != 13471               // 'in' EOF
       && lk != 13472               // 'index' EOF
       && lk != 13476               // 'insert' EOF
       && lk != 13477               // 'instance' EOF
       && lk != 13478               // 'integrity' EOF
       && lk != 13479               // 'intersect' EOF
       && lk != 13480               // 'into' EOF
       && lk != 13481               // 'is' EOF
       && lk != 13482               // 'item' EOF
       && lk != 13484               // 'json-item' EOF
       && lk != 13487               // 'last' EOF
       && lk != 13488               // 'lax' EOF
       && lk != 13489               // 'le' EOF
       && lk != 13491               // 'let' EOF
       && lk != 13493               // 'loop' EOF
       && lk != 13495               // 'lt' EOF
       && lk != 13496               // 'map' EOF
       && lk != 13498               // 'mod' EOF
       && lk != 13499               // 'modify' EOF
       && lk != 13500               // 'module' EOF
       && lk != 13502               // 'namespace' EOF
       && lk != 13503               // 'namespace-node' EOF
       && lk != 13504               // 'ne' EOF
       && lk != 13509               // 'node' EOF
       && lk != 13510               // 'nodes' EOF
       && lk != 13512               // 'object' EOF
       && lk != 13516               // 'only' EOF
       && lk != 13517               // 'option' EOF
       && lk != 13518               // 'or' EOF
       && lk != 13519               // 'order' EOF
       && lk != 13520               // 'ordered' EOF
       && lk != 13521               // 'ordering' EOF
       && lk != 13524               // 'parent' EOF
       && lk != 13530               // 'preceding' EOF
       && lk != 13531               // 'preceding-sibling' EOF
       && lk != 13534               // 'processing-instruction' EOF
       && lk != 13536               // 'rename' EOF
       && lk != 13537               // 'replace' EOF
       && lk != 13538               // 'return' EOF
       && lk != 13539               // 'returning' EOF
       && lk != 13540               // 'revalidation' EOF
       && lk != 13542               // 'satisfies' EOF
       && lk != 13543               // 'schema' EOF
       && lk != 13544               // 'schema-attribute' EOF
       && lk != 13545               // 'schema-element' EOF
       && lk != 13546               // 'score' EOF
       && lk != 13547               // 'self' EOF
       && lk != 13552               // 'sliding' EOF
       && lk != 13553               // 'some' EOF
       && lk != 13554               // 'stable' EOF
       && lk != 13555               // 'start' EOF
       && lk != 13558               // 'strict' EOF
       && lk != 13561               // 'switch' EOF
       && lk != 13562               // 'text' EOF
       && lk != 13566               // 'to' EOF
       && lk != 13567               // 'treat' EOF
       && lk != 13568               // 'try' EOF
       && lk != 13569               // 'tumbling' EOF
       && lk != 13570               // 'type' EOF
       && lk != 13571               // 'typeswitch' EOF
       && lk != 13572               // 'union' EOF
       && lk != 13574               // 'unordered' EOF
       && lk != 13575               // 'updating' EOF
       && lk != 13578               // 'validate' EOF
       && lk != 13579               // 'value' EOF
       && lk != 13580               // 'variable' EOF
       && lk != 13581               // 'version' EOF
       && lk != 13584               // 'where' EOF
       && lk != 13585               // 'while' EOF
       && lk != 13588               // 'with' EOF
       && lk != 13592               // 'xquery' EOF
       && lk != 16652               // 'variable' '$'
       && lk != 21509               // Wildcard ','
       && lk != 21510               // EQName^Token ','
       && lk != 21512               // IntegerLiteral ','
       && lk != 21513               // DecimalLiteral ','
       && lk != 21514               // DoubleLiteral ','
       && lk != 21515               // StringLiteral ','
       && lk != 21549               // '.' ','
       && lk != 21550               // '..' ','
       && lk != 21551               // '/' ','
       && lk != 21579               // 'after' ','
       && lk != 21581               // 'allowing' ','
       && lk != 21582               // 'ancestor' ','
       && lk != 21583               // 'ancestor-or-self' ','
       && lk != 21584               // 'and' ','
       && lk != 21587               // 'array' ','
       && lk != 21588               // 'as' ','
       && lk != 21589               // 'ascending' ','
       && lk != 21590               // 'at' ','
       && lk != 21591               // 'attribute' ','
       && lk != 21592               // 'base-uri' ','
       && lk != 21593               // 'before' ','
       && lk != 21594               // 'boundary-space' ','
       && lk != 21595               // 'break' ','
       && lk != 21597               // 'case' ','
       && lk != 21598               // 'cast' ','
       && lk != 21599               // 'castable' ','
       && lk != 21600               // 'catch' ','
       && lk != 21602               // 'child' ','
       && lk != 21603               // 'collation' ','
       && lk != 21605               // 'comment' ','
       && lk != 21606               // 'constraint' ','
       && lk != 21607               // 'construction' ','
       && lk != 21610               // 'context' ','
       && lk != 21611               // 'continue' ','
       && lk != 21612               // 'copy' ','
       && lk != 21613               // 'copy-namespaces' ','
       && lk != 21614               // 'count' ','
       && lk != 21615               // 'decimal-format' ','
       && lk != 21617               // 'declare' ','
       && lk != 21618               // 'default' ','
       && lk != 21619               // 'delete' ','
       && lk != 21620               // 'descendant' ','
       && lk != 21621               // 'descendant-or-self' ','
       && lk != 21622               // 'descending' ','
       && lk != 21627               // 'div' ','
       && lk != 21628               // 'document' ','
       && lk != 21629               // 'document-node' ','
       && lk != 21630               // 'element' ','
       && lk != 21631               // 'else' ','
       && lk != 21632               // 'empty' ','
       && lk != 21633               // 'empty-sequence' ','
       && lk != 21634               // 'encoding' ','
       && lk != 21635               // 'end' ','
       && lk != 21637               // 'eq' ','
       && lk != 21638               // 'every' ','
       && lk != 21640               // 'except' ','
       && lk != 21641               // 'exit' ','
       && lk != 21642               // 'external' ','
       && lk != 21643               // 'first' ','
       && lk != 21644               // 'following' ','
       && lk != 21645               // 'following-sibling' ','
       && lk != 21646               // 'for' ','
       && lk != 21650               // 'ft-option' ','
       && lk != 21654               // 'function' ','
       && lk != 21655               // 'ge' ','
       && lk != 21657               // 'group' ','
       && lk != 21659               // 'gt' ','
       && lk != 21660               // 'idiv' ','
       && lk != 21661               // 'if' ','
       && lk != 21662               // 'import' ','
       && lk != 21663               // 'in' ','
       && lk != 21664               // 'index' ','
       && lk != 21668               // 'insert' ','
       && lk != 21669               // 'instance' ','
       && lk != 21670               // 'integrity' ','
       && lk != 21671               // 'intersect' ','
       && lk != 21672               // 'into' ','
       && lk != 21673               // 'is' ','
       && lk != 21674               // 'item' ','
       && lk != 21676               // 'json-item' ','
       && lk != 21679               // 'last' ','
       && lk != 21680               // 'lax' ','
       && lk != 21681               // 'le' ','
       && lk != 21683               // 'let' ','
       && lk != 21685               // 'loop' ','
       && lk != 21687               // 'lt' ','
       && lk != 21688               // 'map' ','
       && lk != 21690               // 'mod' ','
       && lk != 21691               // 'modify' ','
       && lk != 21692               // 'module' ','
       && lk != 21694               // 'namespace' ','
       && lk != 21695               // 'namespace-node' ','
       && lk != 21696               // 'ne' ','
       && lk != 21701               // 'node' ','
       && lk != 21702               // 'nodes' ','
       && lk != 21704               // 'object' ','
       && lk != 21708               // 'only' ','
       && lk != 21709               // 'option' ','
       && lk != 21710               // 'or' ','
       && lk != 21711               // 'order' ','
       && lk != 21712               // 'ordered' ','
       && lk != 21713               // 'ordering' ','
       && lk != 21716               // 'parent' ','
       && lk != 21722               // 'preceding' ','
       && lk != 21723               // 'preceding-sibling' ','
       && lk != 21726               // 'processing-instruction' ','
       && lk != 21728               // 'rename' ','
       && lk != 21729               // 'replace' ','
       && lk != 21730               // 'return' ','
       && lk != 21731               // 'returning' ','
       && lk != 21732               // 'revalidation' ','
       && lk != 21734               // 'satisfies' ','
       && lk != 21735               // 'schema' ','
       && lk != 21736               // 'schema-attribute' ','
       && lk != 21737               // 'schema-element' ','
       && lk != 21738               // 'score' ','
       && lk != 21739               // 'self' ','
       && lk != 21744               // 'sliding' ','
       && lk != 21745               // 'some' ','
       && lk != 21746               // 'stable' ','
       && lk != 21747               // 'start' ','
       && lk != 21750               // 'strict' ','
       && lk != 21753               // 'switch' ','
       && lk != 21754               // 'text' ','
       && lk != 21758               // 'to' ','
       && lk != 21759               // 'treat' ','
       && lk != 21760               // 'try' ','
       && lk != 21761               // 'tumbling' ','
       && lk != 21762               // 'type' ','
       && lk != 21763               // 'typeswitch' ','
       && lk != 21764               // 'union' ','
       && lk != 21766               // 'unordered' ','
       && lk != 21767               // 'updating' ','
       && lk != 21770               // 'validate' ','
       && lk != 21771               // 'value' ','
       && lk != 21772               // 'variable' ','
       && lk != 21773               // 'version' ','
       && lk != 21776               // 'where' ','
       && lk != 21777               // 'while' ','
       && lk != 21780               // 'with' ','
       && lk != 21784               // 'xquery' ','
       && lk != 27653               // Wildcard ';'
       && lk != 27654               // EQName^Token ';'
       && lk != 27656               // IntegerLiteral ';'
       && lk != 27657               // DecimalLiteral ';'
       && lk != 27658               // DoubleLiteral ';'
       && lk != 27659               // StringLiteral ';'
       && lk != 27693               // '.' ';'
       && lk != 27694               // '..' ';'
       && lk != 27695               // '/' ';'
       && lk != 27723               // 'after' ';'
       && lk != 27725               // 'allowing' ';'
       && lk != 27726               // 'ancestor' ';'
       && lk != 27727               // 'ancestor-or-self' ';'
       && lk != 27728               // 'and' ';'
       && lk != 27731               // 'array' ';'
       && lk != 27732               // 'as' ';'
       && lk != 27733               // 'ascending' ';'
       && lk != 27734               // 'at' ';'
       && lk != 27735               // 'attribute' ';'
       && lk != 27736               // 'base-uri' ';'
       && lk != 27737               // 'before' ';'
       && lk != 27738               // 'boundary-space' ';'
       && lk != 27739               // 'break' ';'
       && lk != 27741               // 'case' ';'
       && lk != 27742               // 'cast' ';'
       && lk != 27743               // 'castable' ';'
       && lk != 27744               // 'catch' ';'
       && lk != 27746               // 'child' ';'
       && lk != 27747               // 'collation' ';'
       && lk != 27749               // 'comment' ';'
       && lk != 27750               // 'constraint' ';'
       && lk != 27751               // 'construction' ';'
       && lk != 27754               // 'context' ';'
       && lk != 27755               // 'continue' ';'
       && lk != 27756               // 'copy' ';'
       && lk != 27757               // 'copy-namespaces' ';'
       && lk != 27758               // 'count' ';'
       && lk != 27759               // 'decimal-format' ';'
       && lk != 27761               // 'declare' ';'
       && lk != 27762               // 'default' ';'
       && lk != 27763               // 'delete' ';'
       && lk != 27764               // 'descendant' ';'
       && lk != 27765               // 'descendant-or-self' ';'
       && lk != 27766               // 'descending' ';'
       && lk != 27771               // 'div' ';'
       && lk != 27772               // 'document' ';'
       && lk != 27773               // 'document-node' ';'
       && lk != 27774               // 'element' ';'
       && lk != 27775               // 'else' ';'
       && lk != 27776               // 'empty' ';'
       && lk != 27777               // 'empty-sequence' ';'
       && lk != 27778               // 'encoding' ';'
       && lk != 27779               // 'end' ';'
       && lk != 27781               // 'eq' ';'
       && lk != 27782               // 'every' ';'
       && lk != 27784               // 'except' ';'
       && lk != 27785               // 'exit' ';'
       && lk != 27786               // 'external' ';'
       && lk != 27787               // 'first' ';'
       && lk != 27788               // 'following' ';'
       && lk != 27789               // 'following-sibling' ';'
       && lk != 27790               // 'for' ';'
       && lk != 27794               // 'ft-option' ';'
       && lk != 27798               // 'function' ';'
       && lk != 27799               // 'ge' ';'
       && lk != 27801               // 'group' ';'
       && lk != 27803               // 'gt' ';'
       && lk != 27804               // 'idiv' ';'
       && lk != 27805               // 'if' ';'
       && lk != 27806               // 'import' ';'
       && lk != 27807               // 'in' ';'
       && lk != 27808               // 'index' ';'
       && lk != 27812               // 'insert' ';'
       && lk != 27813               // 'instance' ';'
       && lk != 27814               // 'integrity' ';'
       && lk != 27815               // 'intersect' ';'
       && lk != 27816               // 'into' ';'
       && lk != 27817               // 'is' ';'
       && lk != 27818               // 'item' ';'
       && lk != 27820               // 'json-item' ';'
       && lk != 27823               // 'last' ';'
       && lk != 27824               // 'lax' ';'
       && lk != 27825               // 'le' ';'
       && lk != 27827               // 'let' ';'
       && lk != 27829               // 'loop' ';'
       && lk != 27831               // 'lt' ';'
       && lk != 27832               // 'map' ';'
       && lk != 27834               // 'mod' ';'
       && lk != 27835               // 'modify' ';'
       && lk != 27836               // 'module' ';'
       && lk != 27838               // 'namespace' ';'
       && lk != 27839               // 'namespace-node' ';'
       && lk != 27840               // 'ne' ';'
       && lk != 27845               // 'node' ';'
       && lk != 27846               // 'nodes' ';'
       && lk != 27848               // 'object' ';'
       && lk != 27852               // 'only' ';'
       && lk != 27853               // 'option' ';'
       && lk != 27854               // 'or' ';'
       && lk != 27855               // 'order' ';'
       && lk != 27856               // 'ordered' ';'
       && lk != 27857               // 'ordering' ';'
       && lk != 27860               // 'parent' ';'
       && lk != 27866               // 'preceding' ';'
       && lk != 27867               // 'preceding-sibling' ';'
       && lk != 27870               // 'processing-instruction' ';'
       && lk != 27872               // 'rename' ';'
       && lk != 27873               // 'replace' ';'
       && lk != 27874               // 'return' ';'
       && lk != 27875               // 'returning' ';'
       && lk != 27876               // 'revalidation' ';'
       && lk != 27878               // 'satisfies' ';'
       && lk != 27879               // 'schema' ';'
       && lk != 27880               // 'schema-attribute' ';'
       && lk != 27881               // 'schema-element' ';'
       && lk != 27882               // 'score' ';'
       && lk != 27883               // 'self' ';'
       && lk != 27888               // 'sliding' ';'
       && lk != 27889               // 'some' ';'
       && lk != 27890               // 'stable' ';'
       && lk != 27891               // 'start' ';'
       && lk != 27894               // 'strict' ';'
       && lk != 27897               // 'switch' ';'
       && lk != 27898               // 'text' ';'
       && lk != 27902               // 'to' ';'
       && lk != 27903               // 'treat' ';'
       && lk != 27904               // 'try' ';'
       && lk != 27905               // 'tumbling' ';'
       && lk != 27906               // 'type' ';'
       && lk != 27907               // 'typeswitch' ';'
       && lk != 27908               // 'union' ';'
       && lk != 27910               // 'unordered' ';'
       && lk != 27911               // 'updating' ';'
       && lk != 27914               // 'validate' ';'
       && lk != 27915               // 'value' ';'
       && lk != 27916               // 'variable' ';'
       && lk != 27917               // 'version' ';'
       && lk != 27920               // 'where' ';'
       && lk != 27921               // 'while' ';'
       && lk != 27924               // 'with' ';'
       && lk != 27928               // 'xquery' ';'
       && lk != 92763               // 'break' 'loop'
       && lk != 92779               // 'continue' 'loop'
       && lk != 116361              // 'exit' 'returning'
       && lk != 147461              // Wildcard '}'
       && lk != 147462              // EQName^Token '}'
       && lk != 147464              // IntegerLiteral '}'
       && lk != 147465              // DecimalLiteral '}'
       && lk != 147466              // DoubleLiteral '}'
       && lk != 147467              // StringLiteral '}'
       && lk != 147501              // '.' '}'
       && lk != 147502              // '..' '}'
       && lk != 147503              // '/' '}'
       && lk != 147531              // 'after' '}'
       && lk != 147533              // 'allowing' '}'
       && lk != 147534              // 'ancestor' '}'
       && lk != 147535              // 'ancestor-or-self' '}'
       && lk != 147536              // 'and' '}'
       && lk != 147539              // 'array' '}'
       && lk != 147540              // 'as' '}'
       && lk != 147541              // 'ascending' '}'
       && lk != 147542              // 'at' '}'
       && lk != 147543              // 'attribute' '}'
       && lk != 147544              // 'base-uri' '}'
       && lk != 147545              // 'before' '}'
       && lk != 147546              // 'boundary-space' '}'
       && lk != 147547              // 'break' '}'
       && lk != 147549              // 'case' '}'
       && lk != 147550              // 'cast' '}'
       && lk != 147551              // 'castable' '}'
       && lk != 147552              // 'catch' '}'
       && lk != 147554              // 'child' '}'
       && lk != 147555              // 'collation' '}'
       && lk != 147557              // 'comment' '}'
       && lk != 147558              // 'constraint' '}'
       && lk != 147559              // 'construction' '}'
       && lk != 147562              // 'context' '}'
       && lk != 147563              // 'continue' '}'
       && lk != 147564              // 'copy' '}'
       && lk != 147565              // 'copy-namespaces' '}'
       && lk != 147566              // 'count' '}'
       && lk != 147567              // 'decimal-format' '}'
       && lk != 147569              // 'declare' '}'
       && lk != 147570              // 'default' '}'
       && lk != 147571              // 'delete' '}'
       && lk != 147572              // 'descendant' '}'
       && lk != 147573              // 'descendant-or-self' '}'
       && lk != 147574              // 'descending' '}'
       && lk != 147579              // 'div' '}'
       && lk != 147580              // 'document' '}'
       && lk != 147581              // 'document-node' '}'
       && lk != 147582              // 'element' '}'
       && lk != 147583              // 'else' '}'
       && lk != 147584              // 'empty' '}'
       && lk != 147585              // 'empty-sequence' '}'
       && lk != 147586              // 'encoding' '}'
       && lk != 147587              // 'end' '}'
       && lk != 147589              // 'eq' '}'
       && lk != 147590              // 'every' '}'
       && lk != 147592              // 'except' '}'
       && lk != 147593              // 'exit' '}'
       && lk != 147594              // 'external' '}'
       && lk != 147595              // 'first' '}'
       && lk != 147596              // 'following' '}'
       && lk != 147597              // 'following-sibling' '}'
       && lk != 147598              // 'for' '}'
       && lk != 147602              // 'ft-option' '}'
       && lk != 147606              // 'function' '}'
       && lk != 147607              // 'ge' '}'
       && lk != 147609              // 'group' '}'
       && lk != 147611              // 'gt' '}'
       && lk != 147612              // 'idiv' '}'
       && lk != 147613              // 'if' '}'
       && lk != 147614              // 'import' '}'
       && lk != 147615              // 'in' '}'
       && lk != 147616              // 'index' '}'
       && lk != 147620              // 'insert' '}'
       && lk != 147621              // 'instance' '}'
       && lk != 147622              // 'integrity' '}'
       && lk != 147623              // 'intersect' '}'
       && lk != 147624              // 'into' '}'
       && lk != 147625              // 'is' '}'
       && lk != 147626              // 'item' '}'
       && lk != 147628              // 'json-item' '}'
       && lk != 147631              // 'last' '}'
       && lk != 147632              // 'lax' '}'
       && lk != 147633              // 'le' '}'
       && lk != 147635              // 'let' '}'
       && lk != 147637              // 'loop' '}'
       && lk != 147639              // 'lt' '}'
       && lk != 147640              // 'map' '}'
       && lk != 147642              // 'mod' '}'
       && lk != 147643              // 'modify' '}'
       && lk != 147644              // 'module' '}'
       && lk != 147646              // 'namespace' '}'
       && lk != 147647              // 'namespace-node' '}'
       && lk != 147648              // 'ne' '}'
       && lk != 147653              // 'node' '}'
       && lk != 147654              // 'nodes' '}'
       && lk != 147656              // 'object' '}'
       && lk != 147660              // 'only' '}'
       && lk != 147661              // 'option' '}'
       && lk != 147662              // 'or' '}'
       && lk != 147663              // 'order' '}'
       && lk != 147664              // 'ordered' '}'
       && lk != 147665              // 'ordering' '}'
       && lk != 147668              // 'parent' '}'
       && lk != 147674              // 'preceding' '}'
       && lk != 147675              // 'preceding-sibling' '}'
       && lk != 147678              // 'processing-instruction' '}'
       && lk != 147680              // 'rename' '}'
       && lk != 147681              // 'replace' '}'
       && lk != 147682              // 'return' '}'
       && lk != 147683              // 'returning' '}'
       && lk != 147684              // 'revalidation' '}'
       && lk != 147686              // 'satisfies' '}'
       && lk != 147687              // 'schema' '}'
       && lk != 147688              // 'schema-attribute' '}'
       && lk != 147689              // 'schema-element' '}'
       && lk != 147690              // 'score' '}'
       && lk != 147691              // 'self' '}'
       && lk != 147696              // 'sliding' '}'
       && lk != 147697              // 'some' '}'
       && lk != 147698              // 'stable' '}'
       && lk != 147699              // 'start' '}'
       && lk != 147702              // 'strict' '}'
       && lk != 147705              // 'switch' '}'
       && lk != 147706              // 'text' '}'
       && lk != 147710              // 'to' '}'
       && lk != 147711              // 'treat' '}'
       && lk != 147712              // 'try' '}'
       && lk != 147713              // 'tumbling' '}'
       && lk != 147714              // 'type' '}'
       && lk != 147715              // 'typeswitch' '}'
       && lk != 147716              // 'union' '}'
       && lk != 147718              // 'unordered' '}'
       && lk != 147719              // 'updating' '}'
       && lk != 147722              // 'validate' '}'
       && lk != 147723              // 'value' '}'
       && lk != 147724              // 'variable' '}'
       && lk != 147725              // 'version' '}'
       && lk != 147728              // 'where' '}'
       && lk != 147729              // 'while' '}'
       && lk != 147732              // 'with' '}'
       && lk != 147736)             // 'xquery' '}'
      {
        lk = memoized(6, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            memoize(6, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(6, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 16652               // 'variable' '$'
       && lk != 27653               // Wildcard ';'
       && lk != 27654               // EQName^Token ';'
       && lk != 27656               // IntegerLiteral ';'
       && lk != 27657               // DecimalLiteral ';'
       && lk != 27658               // DoubleLiteral ';'
       && lk != 27659               // StringLiteral ';'
       && lk != 27693               // '.' ';'
       && lk != 27694               // '..' ';'
       && lk != 27695               // '/' ';'
       && lk != 27723               // 'after' ';'
       && lk != 27725               // 'allowing' ';'
       && lk != 27726               // 'ancestor' ';'
       && lk != 27727               // 'ancestor-or-self' ';'
       && lk != 27728               // 'and' ';'
       && lk != 27731               // 'array' ';'
       && lk != 27732               // 'as' ';'
       && lk != 27733               // 'ascending' ';'
       && lk != 27734               // 'at' ';'
       && lk != 27735               // 'attribute' ';'
       && lk != 27736               // 'base-uri' ';'
       && lk != 27737               // 'before' ';'
       && lk != 27738               // 'boundary-space' ';'
       && lk != 27739               // 'break' ';'
       && lk != 27741               // 'case' ';'
       && lk != 27742               // 'cast' ';'
       && lk != 27743               // 'castable' ';'
       && lk != 27744               // 'catch' ';'
       && lk != 27746               // 'child' ';'
       && lk != 27747               // 'collation' ';'
       && lk != 27749               // 'comment' ';'
       && lk != 27750               // 'constraint' ';'
       && lk != 27751               // 'construction' ';'
       && lk != 27754               // 'context' ';'
       && lk != 27755               // 'continue' ';'
       && lk != 27756               // 'copy' ';'
       && lk != 27757               // 'copy-namespaces' ';'
       && lk != 27758               // 'count' ';'
       && lk != 27759               // 'decimal-format' ';'
       && lk != 27761               // 'declare' ';'
       && lk != 27762               // 'default' ';'
       && lk != 27763               // 'delete' ';'
       && lk != 27764               // 'descendant' ';'
       && lk != 27765               // 'descendant-or-self' ';'
       && lk != 27766               // 'descending' ';'
       && lk != 27771               // 'div' ';'
       && lk != 27772               // 'document' ';'
       && lk != 27773               // 'document-node' ';'
       && lk != 27774               // 'element' ';'
       && lk != 27775               // 'else' ';'
       && lk != 27776               // 'empty' ';'
       && lk != 27777               // 'empty-sequence' ';'
       && lk != 27778               // 'encoding' ';'
       && lk != 27779               // 'end' ';'
       && lk != 27781               // 'eq' ';'
       && lk != 27782               // 'every' ';'
       && lk != 27784               // 'except' ';'
       && lk != 27785               // 'exit' ';'
       && lk != 27786               // 'external' ';'
       && lk != 27787               // 'first' ';'
       && lk != 27788               // 'following' ';'
       && lk != 27789               // 'following-sibling' ';'
       && lk != 27790               // 'for' ';'
       && lk != 27794               // 'ft-option' ';'
       && lk != 27798               // 'function' ';'
       && lk != 27799               // 'ge' ';'
       && lk != 27801               // 'group' ';'
       && lk != 27803               // 'gt' ';'
       && lk != 27804               // 'idiv' ';'
       && lk != 27805               // 'if' ';'
       && lk != 27806               // 'import' ';'
       && lk != 27807               // 'in' ';'
       && lk != 27808               // 'index' ';'
       && lk != 27812               // 'insert' ';'
       && lk != 27813               // 'instance' ';'
       && lk != 27814               // 'integrity' ';'
       && lk != 27815               // 'intersect' ';'
       && lk != 27816               // 'into' ';'
       && lk != 27817               // 'is' ';'
       && lk != 27818               // 'item' ';'
       && lk != 27820               // 'json-item' ';'
       && lk != 27823               // 'last' ';'
       && lk != 27824               // 'lax' ';'
       && lk != 27825               // 'le' ';'
       && lk != 27827               // 'let' ';'
       && lk != 27829               // 'loop' ';'
       && lk != 27831               // 'lt' ';'
       && lk != 27832               // 'map' ';'
       && lk != 27834               // 'mod' ';'
       && lk != 27835               // 'modify' ';'
       && lk != 27836               // 'module' ';'
       && lk != 27838               // 'namespace' ';'
       && lk != 27839               // 'namespace-node' ';'
       && lk != 27840               // 'ne' ';'
       && lk != 27845               // 'node' ';'
       && lk != 27846               // 'nodes' ';'
       && lk != 27848               // 'object' ';'
       && lk != 27852               // 'only' ';'
       && lk != 27853               // 'option' ';'
       && lk != 27854               // 'or' ';'
       && lk != 27855               // 'order' ';'
       && lk != 27856               // 'ordered' ';'
       && lk != 27857               // 'ordering' ';'
       && lk != 27860               // 'parent' ';'
       && lk != 27866               // 'preceding' ';'
       && lk != 27867               // 'preceding-sibling' ';'
       && lk != 27870               // 'processing-instruction' ';'
       && lk != 27872               // 'rename' ';'
       && lk != 27873               // 'replace' ';'
       && lk != 27874               // 'return' ';'
       && lk != 27875               // 'returning' ';'
       && lk != 27876               // 'revalidation' ';'
       && lk != 27878               // 'satisfies' ';'
       && lk != 27879               // 'schema' ';'
       && lk != 27880               // 'schema-attribute' ';'
       && lk != 27881               // 'schema-element' ';'
       && lk != 27882               // 'score' ';'
       && lk != 27883               // 'self' ';'
       && lk != 27888               // 'sliding' ';'
       && lk != 27889               // 'some' ';'
       && lk != 27890               // 'stable' ';'
       && lk != 27891               // 'start' ';'
       && lk != 27894               // 'strict' ';'
       && lk != 27897               // 'switch' ';'
       && lk != 27898               // 'text' ';'
       && lk != 27902               // 'to' ';'
       && lk != 27903               // 'treat' ';'
       && lk != 27904               // 'try' ';'
       && lk != 27905               // 'tumbling' ';'
       && lk != 27906               // 'type' ';'
       && lk != 27907               // 'typeswitch' ';'
       && lk != 27908               // 'union' ';'
       && lk != 27910               // 'unordered' ';'
       && lk != 27911               // 'updating' ';'
       && lk != 27914               // 'validate' ';'
       && lk != 27915               // 'value' ';'
       && lk != 27916               // 'variable' ';'
       && lk != 27917               // 'version' ';'
       && lk != 27920               // 'where' ';'
       && lk != 27921               // 'while' ';'
       && lk != 27924               // 'with' ';'
       && lk != 27928               // 'xquery' ';'
       && lk != 92763               // 'break' 'loop'
       && lk != 92779               // 'continue' 'loop'
       && lk != 116361)             // 'exit' 'returning'
      {
        break;
      }
      try_Statement();
    }
  }

  function parse_StatementsAndExpr()
  {
    eventHandler.startNonterminal("StatementsAndExpr", e0);
    parse_Statements();
    whitespace();
    parse_Expr();
    eventHandler.endNonterminal("StatementsAndExpr", e0);
  }

  function try_StatementsAndExpr()
  {
    try_Statements();
    try_Expr();
  }

  function parse_StatementsAndOptionalExpr()
  {
    eventHandler.startNonterminal("StatementsAndOptionalExpr", e0);
    parse_Statements();
    if (l1 != 26                    // EOF
     && l1 != 288)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    eventHandler.endNonterminal("StatementsAndOptionalExpr", e0);
  }

  function try_StatementsAndOptionalExpr()
  {
    try_Statements();
    if (l1 != 26                    // EOF
     && l1 != 288)                  // '}'
    {
      try_Expr();
    }
  }

  function parse_Statement()
  {
    eventHandler.startNonterminal("Statement", e0);
    switch (l1)
    {
    case 137:                       // 'exit'
      lookahead2W(191);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||'
      break;
    case 142:                       // 'for'
      lookahead2W(199);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' |
                                    // 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||'
      break;
    case 179:                       // 'let'
      lookahead2W(194);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' |
                                    // 'to' | 'treat' | 'union' | '|' | '||'
      break;
    case 256:                       // 'try'
      lookahead2W(192);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||'
      break;
    case 268:                       // 'variable'
      lookahead2W(189);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 282:                       // '{'
      lookahead2W(281);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 32:                        // '$'
    case 33:                        // '%'
      lookahead2W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    case 91:                        // 'break'
    case 107:                       // 'continue'
      lookahead2W(190);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||'
      break;
    case 157:                       // 'if'
    case 249:                       // 'switch'
    case 259:                       // 'typeswitch'
    case 273:                       // 'while'
      lookahead2W(187);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 2842                  // '{' Wildcard
     || lk == 3104                  // '$' EQName^Token
     || lk == 3105                  // '%' EQName^Token
     || lk == 3354                  // '{' EQName^Token
     || lk == 4378                  // '{' IntegerLiteral
     || lk == 4890                  // '{' DecimalLiteral
     || lk == 5402                  // '{' DoubleLiteral
     || lk == 5914                  // '{' StringLiteral
     || lk == 16666                 // '{' '$'
     || lk == 17178                 // '{' '%'
     || lk == 18193                 // 'while' '('
     || lk == 18202                 // '{' '('
     || lk == 18714                 // '{' '(#'
     || lk == 21274                 // '{' '+'
     || lk == 22298                 // '{' '-'
     || lk == 23322                 // '{' '.'
     || lk == 23834                 // '{' '..'
     || lk == 24346                 // '{' '/'
     || lk == 24858                 // '{' '//'
     || lk == 28442                 // '{' '<'
     || lk == 28954                 // '{' '<!--'
     || lk == 31002                 // '{' '<?'
     || lk == 34074                 // '{' '?'
     || lk == 35098                 // '{' '@'
     || lk == 36122                 // '{' '['
     || lk == 37658                 // '{' '``['
     || lk == 38432                 // '$' 'after'
     || lk == 38433                 // '%' 'after'
     || lk == 38682                 // '{' 'after'
     || lk == 39456                 // '$' 'allowing'
     || lk == 39457                 // '%' 'allowing'
     || lk == 39706                 // '{' 'allowing'
     || lk == 39968                 // '$' 'ancestor'
     || lk == 39969                 // '%' 'ancestor'
     || lk == 40218                 // '{' 'ancestor'
     || lk == 40480                 // '$' 'ancestor-or-self'
     || lk == 40481                 // '%' 'ancestor-or-self'
     || lk == 40730                 // '{' 'ancestor-or-self'
     || lk == 40992                 // '$' 'and'
     || lk == 40993                 // '%' 'and'
     || lk == 41242                 // '{' 'and'
     || lk == 42266                 // '{' 'append'
     || lk == 42528                 // '$' 'array'
     || lk == 42529                 // '%' 'array'
     || lk == 42778                 // '{' 'array'
     || lk == 43040                 // '$' 'as'
     || lk == 43041                 // '%' 'as'
     || lk == 43290                 // '{' 'as'
     || lk == 43552                 // '$' 'ascending'
     || lk == 43553                 // '%' 'ascending'
     || lk == 43802                 // '{' 'ascending'
     || lk == 44064                 // '$' 'at'
     || lk == 44065                 // '%' 'at'
     || lk == 44314                 // '{' 'at'
     || lk == 44576                 // '$' 'attribute'
     || lk == 44577                 // '%' 'attribute'
     || lk == 44826                 // '{' 'attribute'
     || lk == 45088                 // '$' 'base-uri'
     || lk == 45089                 // '%' 'base-uri'
     || lk == 45338                 // '{' 'base-uri'
     || lk == 45600                 // '$' 'before'
     || lk == 45601                 // '%' 'before'
     || lk == 45850                 // '{' 'before'
     || lk == 46112                 // '$' 'boundary-space'
     || lk == 46113                 // '%' 'boundary-space'
     || lk == 46362                 // '{' 'boundary-space'
     || lk == 46624                 // '$' 'break'
     || lk == 46625                 // '%' 'break'
     || lk == 46874                 // '{' 'break'
     || lk == 47648                 // '$' 'case'
     || lk == 47649                 // '%' 'case'
     || lk == 47898                 // '{' 'case'
     || lk == 48160                 // '$' 'cast'
     || lk == 48161                 // '%' 'cast'
     || lk == 48410                 // '{' 'cast'
     || lk == 48672                 // '$' 'castable'
     || lk == 48673                 // '%' 'castable'
     || lk == 48922                 // '{' 'castable'
     || lk == 49184                 // '$' 'catch'
     || lk == 49185                 // '%' 'catch'
     || lk == 49434                 // '{' 'catch'
     || lk == 50208                 // '$' 'child'
     || lk == 50209                 // '%' 'child'
     || lk == 50458                 // '{' 'child'
     || lk == 50720                 // '$' 'collation'
     || lk == 50721                 // '%' 'collation'
     || lk == 50970                 // '{' 'collation'
     || lk == 51744                 // '$' 'comment'
     || lk == 51745                 // '%' 'comment'
     || lk == 51994                 // '{' 'comment'
     || lk == 52256                 // '$' 'constraint'
     || lk == 52257                 // '%' 'constraint'
     || lk == 52506                 // '{' 'constraint'
     || lk == 52768                 // '$' 'construction'
     || lk == 52769                 // '%' 'construction'
     || lk == 53018                 // '{' 'construction'
     || lk == 54304                 // '$' 'context'
     || lk == 54305                 // '%' 'context'
     || lk == 54554                 // '{' 'context'
     || lk == 54816                 // '$' 'continue'
     || lk == 54817                 // '%' 'continue'
     || lk == 55066                 // '{' 'continue'
     || lk == 55328                 // '$' 'copy'
     || lk == 55329                 // '%' 'copy'
     || lk == 55578                 // '{' 'copy'
     || lk == 55840                 // '$' 'copy-namespaces'
     || lk == 55841                 // '%' 'copy-namespaces'
     || lk == 56090                 // '{' 'copy-namespaces'
     || lk == 56352                 // '$' 'count'
     || lk == 56353                 // '%' 'count'
     || lk == 56602                 // '{' 'count'
     || lk == 56864                 // '$' 'decimal-format'
     || lk == 56865                 // '%' 'decimal-format'
     || lk == 57114                 // '{' 'decimal-format'
     || lk == 57888                 // '$' 'declare'
     || lk == 57889                 // '%' 'declare'
     || lk == 58138                 // '{' 'declare'
     || lk == 58400                 // '$' 'default'
     || lk == 58401                 // '%' 'default'
     || lk == 58650                 // '{' 'default'
     || lk == 58912                 // '$' 'delete'
     || lk == 58913                 // '%' 'delete'
     || lk == 59162                 // '{' 'delete'
     || lk == 59424                 // '$' 'descendant'
     || lk == 59425                 // '%' 'descendant'
     || lk == 59674                 // '{' 'descendant'
     || lk == 59936                 // '$' 'descendant-or-self'
     || lk == 59937                 // '%' 'descendant-or-self'
     || lk == 60186                 // '{' 'descendant-or-self'
     || lk == 60448                 // '$' 'descending'
     || lk == 60449                 // '%' 'descending'
     || lk == 60698                 // '{' 'descending'
     || lk == 63008                 // '$' 'div'
     || lk == 63009                 // '%' 'div'
     || lk == 63258                 // '{' 'div'
     || lk == 63520                 // '$' 'document'
     || lk == 63521                 // '%' 'document'
     || lk == 63770                 // '{' 'document'
     || lk == 64032                 // '$' 'document-node'
     || lk == 64033                 // '%' 'document-node'
     || lk == 64282                 // '{' 'document-node'
     || lk == 64544                 // '$' 'element'
     || lk == 64545                 // '%' 'element'
     || lk == 64794                 // '{' 'element'
     || lk == 65056                 // '$' 'else'
     || lk == 65057                 // '%' 'else'
     || lk == 65306                 // '{' 'else'
     || lk == 65568                 // '$' 'empty'
     || lk == 65569                 // '%' 'empty'
     || lk == 65818                 // '{' 'empty'
     || lk == 66080                 // '$' 'empty-sequence'
     || lk == 66081                 // '%' 'empty-sequence'
     || lk == 66330                 // '{' 'empty-sequence'
     || lk == 66592                 // '$' 'encoding'
     || lk == 66593                 // '%' 'encoding'
     || lk == 66842                 // '{' 'encoding'
     || lk == 67104                 // '$' 'end'
     || lk == 67105                 // '%' 'end'
     || lk == 67354                 // '{' 'end'
     || lk == 68128                 // '$' 'eq'
     || lk == 68129                 // '%' 'eq'
     || lk == 68378                 // '{' 'eq'
     || lk == 68640                 // '$' 'every'
     || lk == 68641                 // '%' 'every'
     || lk == 68890                 // '{' 'every'
     || lk == 69664                 // '$' 'except'
     || lk == 69665                 // '%' 'except'
     || lk == 69914                 // '{' 'except'
     || lk == 70176                 // '$' 'exit'
     || lk == 70177                 // '%' 'exit'
     || lk == 70426                 // '{' 'exit'
     || lk == 70688                 // '$' 'external'
     || lk == 70689                 // '%' 'external'
     || lk == 70938                 // '{' 'external'
     || lk == 71200                 // '$' 'first'
     || lk == 71201                 // '%' 'first'
     || lk == 71450                 // '{' 'first'
     || lk == 71712                 // '$' 'following'
     || lk == 71713                 // '%' 'following'
     || lk == 71962                 // '{' 'following'
     || lk == 72224                 // '$' 'following-sibling'
     || lk == 72225                 // '%' 'following-sibling'
     || lk == 72474                 // '{' 'following-sibling'
     || lk == 72736                 // '$' 'for'
     || lk == 72737                 // '%' 'for'
     || lk == 72986                 // '{' 'for'
     || lk == 74784                 // '$' 'ft-option'
     || lk == 74785                 // '%' 'ft-option'
     || lk == 75034                 // '{' 'ft-option'
     || lk == 76832                 // '$' 'function'
     || lk == 76833                 // '%' 'function'
     || lk == 77082                 // '{' 'function'
     || lk == 77344                 // '$' 'ge'
     || lk == 77345                 // '%' 'ge'
     || lk == 77594                 // '{' 'ge'
     || lk == 78368                 // '$' 'group'
     || lk == 78369                 // '%' 'group'
     || lk == 78618                 // '{' 'group'
     || lk == 79392                 // '$' 'gt'
     || lk == 79393                 // '%' 'gt'
     || lk == 79642                 // '{' 'gt'
     || lk == 79904                 // '$' 'idiv'
     || lk == 79905                 // '%' 'idiv'
     || lk == 80154                 // '{' 'idiv'
     || lk == 80416                 // '$' 'if'
     || lk == 80417                 // '%' 'if'
     || lk == 80666                 // '{' 'if'
     || lk == 80928                 // '$' 'import'
     || lk == 80929                 // '%' 'import'
     || lk == 81178                 // '{' 'import'
     || lk == 81440                 // '$' 'in'
     || lk == 81441                 // '%' 'in'
     || lk == 81690                 // '{' 'in'
     || lk == 81952                 // '$' 'index'
     || lk == 81953                 // '%' 'index'
     || lk == 82202                 // '{' 'index'
     || lk == 84000                 // '$' 'insert'
     || lk == 84001                 // '%' 'insert'
     || lk == 84250                 // '{' 'insert'
     || lk == 84512                 // '$' 'instance'
     || lk == 84513                 // '%' 'instance'
     || lk == 84762                 // '{' 'instance'
     || lk == 85024                 // '$' 'integrity'
     || lk == 85025                 // '%' 'integrity'
     || lk == 85274                 // '{' 'integrity'
     || lk == 85536                 // '$' 'intersect'
     || lk == 85537                 // '%' 'intersect'
     || lk == 85786                 // '{' 'intersect'
     || lk == 86048                 // '$' 'into'
     || lk == 86049                 // '%' 'into'
     || lk == 86298                 // '{' 'into'
     || lk == 86560                 // '$' 'is'
     || lk == 86561                 // '%' 'is'
     || lk == 86810                 // '{' 'is'
     || lk == 87072                 // '$' 'item'
     || lk == 87073                 // '%' 'item'
     || lk == 87322                 // '{' 'item'
     || lk == 88096                 // '$' 'json-item'
     || lk == 88097                 // '%' 'json-item'
     || lk == 88346                 // '{' 'json-item'
     || lk == 89632                 // '$' 'last'
     || lk == 89633                 // '%' 'last'
     || lk == 89882                 // '{' 'last'
     || lk == 90144                 // '$' 'lax'
     || lk == 90145                 // '%' 'lax'
     || lk == 90394                 // '{' 'lax'
     || lk == 90656                 // '$' 'le'
     || lk == 90657                 // '%' 'le'
     || lk == 90906                 // '{' 'le'
     || lk == 91680                 // '$' 'let'
     || lk == 91681                 // '%' 'let'
     || lk == 91930                 // '{' 'let'
     || lk == 92704                 // '$' 'loop'
     || lk == 92705                 // '%' 'loop'
     || lk == 92954                 // '{' 'loop'
     || lk == 93728                 // '$' 'lt'
     || lk == 93729                 // '%' 'lt'
     || lk == 93978                 // '{' 'lt'
     || lk == 94240                 // '$' 'map'
     || lk == 94241                 // '%' 'map'
     || lk == 94490                 // '{' 'map'
     || lk == 95264                 // '$' 'mod'
     || lk == 95265                 // '%' 'mod'
     || lk == 95514                 // '{' 'mod'
     || lk == 95776                 // '$' 'modify'
     || lk == 95777                 // '%' 'modify'
     || lk == 96026                 // '{' 'modify'
     || lk == 96288                 // '$' 'module'
     || lk == 96289                 // '%' 'module'
     || lk == 96538                 // '{' 'module'
     || lk == 97312                 // '$' 'namespace'
     || lk == 97313                 // '%' 'namespace'
     || lk == 97562                 // '{' 'namespace'
     || lk == 97824                 // '$' 'namespace-node'
     || lk == 97825                 // '%' 'namespace-node'
     || lk == 98074                 // '{' 'namespace-node'
     || lk == 98336                 // '$' 'ne'
     || lk == 98337                 // '%' 'ne'
     || lk == 98586                 // '{' 'ne'
     || lk == 100896                // '$' 'node'
     || lk == 100897                // '%' 'node'
     || lk == 101146                // '{' 'node'
     || lk == 101408                // '$' 'nodes'
     || lk == 101409                // '%' 'nodes'
     || lk == 101658                // '{' 'nodes'
     || lk == 102432                // '$' 'object'
     || lk == 102433                // '%' 'object'
     || lk == 102682                // '{' 'object'
     || lk == 104480                // '$' 'only'
     || lk == 104481                // '%' 'only'
     || lk == 104730                // '{' 'only'
     || lk == 104992                // '$' 'option'
     || lk == 104993                // '%' 'option'
     || lk == 105242                // '{' 'option'
     || lk == 105504                // '$' 'or'
     || lk == 105505                // '%' 'or'
     || lk == 105754                // '{' 'or'
     || lk == 106016                // '$' 'order'
     || lk == 106017                // '%' 'order'
     || lk == 106266                // '{' 'order'
     || lk == 106528                // '$' 'ordered'
     || lk == 106529                // '%' 'ordered'
     || lk == 106778                // '{' 'ordered'
     || lk == 107040                // '$' 'ordering'
     || lk == 107041                // '%' 'ordering'
     || lk == 107290                // '{' 'ordering'
     || lk == 108576                // '$' 'parent'
     || lk == 108577                // '%' 'parent'
     || lk == 108826                // '{' 'parent'
     || lk == 111648                // '$' 'preceding'
     || lk == 111649                // '%' 'preceding'
     || lk == 111898                // '{' 'preceding'
     || lk == 112160                // '$' 'preceding-sibling'
     || lk == 112161                // '%' 'preceding-sibling'
     || lk == 112410                // '{' 'preceding-sibling'
     || lk == 113696                // '$' 'processing-instruction'
     || lk == 113697                // '%' 'processing-instruction'
     || lk == 113946                // '{' 'processing-instruction'
     || lk == 114720                // '$' 'rename'
     || lk == 114721                // '%' 'rename'
     || lk == 114970                // '{' 'rename'
     || lk == 115232                // '$' 'replace'
     || lk == 115233                // '%' 'replace'
     || lk == 115482                // '{' 'replace'
     || lk == 115744                // '$' 'return'
     || lk == 115745                // '%' 'return'
     || lk == 115994                // '{' 'return'
     || lk == 116256                // '$' 'returning'
     || lk == 116257                // '%' 'returning'
     || lk == 116506                // '{' 'returning'
     || lk == 116768                // '$' 'revalidation'
     || lk == 116769                // '%' 'revalidation'
     || lk == 117018                // '{' 'revalidation'
     || lk == 117792                // '$' 'satisfies'
     || lk == 117793                // '%' 'satisfies'
     || lk == 118042                // '{' 'satisfies'
     || lk == 118304                // '$' 'schema'
     || lk == 118305                // '%' 'schema'
     || lk == 118554                // '{' 'schema'
     || lk == 118816                // '$' 'schema-attribute'
     || lk == 118817                // '%' 'schema-attribute'
     || lk == 119066                // '{' 'schema-attribute'
     || lk == 119328                // '$' 'schema-element'
     || lk == 119329                // '%' 'schema-element'
     || lk == 119578                // '{' 'schema-element'
     || lk == 119840                // '$' 'score'
     || lk == 119841                // '%' 'score'
     || lk == 120090                // '{' 'score'
     || lk == 120352                // '$' 'self'
     || lk == 120353                // '%' 'self'
     || lk == 120602                // '{' 'self'
     || lk == 122912                // '$' 'sliding'
     || lk == 122913                // '%' 'sliding'
     || lk == 123162                // '{' 'sliding'
     || lk == 123424                // '$' 'some'
     || lk == 123425                // '%' 'some'
     || lk == 123674                // '{' 'some'
     || lk == 123936                // '$' 'stable'
     || lk == 123937                // '%' 'stable'
     || lk == 124186                // '{' 'stable'
     || lk == 124448                // '$' 'start'
     || lk == 124449                // '%' 'start'
     || lk == 124698                // '{' 'start'
     || lk == 125984                // '$' 'strict'
     || lk == 125985                // '%' 'strict'
     || lk == 126234                // '{' 'strict'
     || lk == 127520                // '$' 'switch'
     || lk == 127521                // '%' 'switch'
     || lk == 127770                // '{' 'switch'
     || lk == 128032                // '$' 'text'
     || lk == 128033                // '%' 'text'
     || lk == 128282                // '{' 'text'
     || lk == 130080                // '$' 'to'
     || lk == 130081                // '%' 'to'
     || lk == 130330                // '{' 'to'
     || lk == 130592                // '$' 'treat'
     || lk == 130593                // '%' 'treat'
     || lk == 130842                // '{' 'treat'
     || lk == 131104                // '$' 'try'
     || lk == 131105                // '%' 'try'
     || lk == 131354                // '{' 'try'
     || lk == 131616                // '$' 'tumbling'
     || lk == 131617                // '%' 'tumbling'
     || lk == 131866                // '{' 'tumbling'
     || lk == 132128                // '$' 'type'
     || lk == 132129                // '%' 'type'
     || lk == 132378                // '{' 'type'
     || lk == 132640                // '$' 'typeswitch'
     || lk == 132641                // '%' 'typeswitch'
     || lk == 132890                // '{' 'typeswitch'
     || lk == 133152                // '$' 'union'
     || lk == 133153                // '%' 'union'
     || lk == 133402                // '{' 'union'
     || lk == 134176                // '$' 'unordered'
     || lk == 134177                // '%' 'unordered'
     || lk == 134426                // '{' 'unordered'
     || lk == 134688                // '$' 'updating'
     || lk == 134689                // '%' 'updating'
     || lk == 134938                // '{' 'updating'
     || lk == 136224                // '$' 'validate'
     || lk == 136225                // '%' 'validate'
     || lk == 136474                // '{' 'validate'
     || lk == 136736                // '$' 'value'
     || lk == 136737                // '%' 'value'
     || lk == 136986                // '{' 'value'
     || lk == 137248                // '$' 'variable'
     || lk == 137249                // '%' 'variable'
     || lk == 137498                // '{' 'variable'
     || lk == 137760                // '$' 'version'
     || lk == 137761                // '%' 'version'
     || lk == 138010                // '{' 'version'
     || lk == 139296                // '$' 'where'
     || lk == 139297                // '%' 'where'
     || lk == 139546                // '{' 'where'
     || lk == 139808                // '$' 'while'
     || lk == 139809                // '%' 'while'
     || lk == 140058                // '{' 'while'
     || lk == 141344                // '$' 'with'
     || lk == 141345                // '%' 'with'
     || lk == 141594                // '{' 'with'
     || lk == 143392                // '$' 'xquery'
     || lk == 143393                // '%' 'xquery'
     || lk == 143642                // '{' 'xquery'
     || lk == 144666                // '{' '{'
     || lk == 145690                // '{' '{|'
     || lk == 147738)               // '{' '}'
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            lk = -2;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              lk = -3;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                lk = -12;
              }
              catch (p12A)
              {
                lk = -13;
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(7, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
      parse_AssignStatement();
      break;
    case -3:
      parse_BlockStatement();
      break;
    case 92763:                     // 'break' 'loop'
      parse_BreakStatement();
      break;
    case 92779:                     // 'continue' 'loop'
      parse_ContinueStatement();
      break;
    case 116361:                    // 'exit' 'returning'
      parse_ExitStatement();
      break;
    case 16526:                     // 'for' '$'
    case 16563:                     // 'let' '$'
    case 119987:                    // 'let' 'score'
    case 123022:                    // 'for' 'sliding'
    case 131726:                    // 'for' 'tumbling'
      parse_FLWORStatement();
      break;
    case 18077:                     // 'if' '('
      parse_IfStatement();
      break;
    case 18169:                     // 'switch' '('
      parse_SwitchStatement();
      break;
    case 144640:                    // 'try' '{'
      parse_TryCatchStatement();
      break;
    case 18179:                     // 'typeswitch' '('
      parse_TypeswitchStatement();
      break;
    case -12:
    case 16652:                     // 'variable' '$'
      parse_VarDeclStatement();
      break;
    case -13:
      parse_WhileStatement();
      break;
    default:
      parse_ApplyStatement();
    }
    eventHandler.endNonterminal("Statement", e0);
  }

  function try_Statement()
  {
    switch (l1)
    {
    case 137:                       // 'exit'
      lookahead2W(191);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||'
      break;
    case 142:                       // 'for'
      lookahead2W(199);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' |
                                    // 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||'
      break;
    case 179:                       // 'let'
      lookahead2W(194);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' |
                                    // 'to' | 'treat' | 'union' | '|' | '||'
      break;
    case 256:                       // 'try'
      lookahead2W(192);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||'
      break;
    case 268:                       // 'variable'
      lookahead2W(189);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 282:                       // '{'
      lookahead2W(281);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 32:                        // '$'
    case 33:                        // '%'
      lookahead2W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    case 91:                        // 'break'
    case 107:                       // 'continue'
      lookahead2W(190);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||'
      break;
    case 157:                       // 'if'
    case 249:                       // 'switch'
    case 259:                       // 'typeswitch'
    case 273:                       // 'while'
      lookahead2W(187);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 2842                  // '{' Wildcard
     || lk == 3104                  // '$' EQName^Token
     || lk == 3105                  // '%' EQName^Token
     || lk == 3354                  // '{' EQName^Token
     || lk == 4378                  // '{' IntegerLiteral
     || lk == 4890                  // '{' DecimalLiteral
     || lk == 5402                  // '{' DoubleLiteral
     || lk == 5914                  // '{' StringLiteral
     || lk == 16666                 // '{' '$'
     || lk == 17178                 // '{' '%'
     || lk == 18193                 // 'while' '('
     || lk == 18202                 // '{' '('
     || lk == 18714                 // '{' '(#'
     || lk == 21274                 // '{' '+'
     || lk == 22298                 // '{' '-'
     || lk == 23322                 // '{' '.'
     || lk == 23834                 // '{' '..'
     || lk == 24346                 // '{' '/'
     || lk == 24858                 // '{' '//'
     || lk == 28442                 // '{' '<'
     || lk == 28954                 // '{' '<!--'
     || lk == 31002                 // '{' '<?'
     || lk == 34074                 // '{' '?'
     || lk == 35098                 // '{' '@'
     || lk == 36122                 // '{' '['
     || lk == 37658                 // '{' '``['
     || lk == 38432                 // '$' 'after'
     || lk == 38433                 // '%' 'after'
     || lk == 38682                 // '{' 'after'
     || lk == 39456                 // '$' 'allowing'
     || lk == 39457                 // '%' 'allowing'
     || lk == 39706                 // '{' 'allowing'
     || lk == 39968                 // '$' 'ancestor'
     || lk == 39969                 // '%' 'ancestor'
     || lk == 40218                 // '{' 'ancestor'
     || lk == 40480                 // '$' 'ancestor-or-self'
     || lk == 40481                 // '%' 'ancestor-or-self'
     || lk == 40730                 // '{' 'ancestor-or-self'
     || lk == 40992                 // '$' 'and'
     || lk == 40993                 // '%' 'and'
     || lk == 41242                 // '{' 'and'
     || lk == 42266                 // '{' 'append'
     || lk == 42528                 // '$' 'array'
     || lk == 42529                 // '%' 'array'
     || lk == 42778                 // '{' 'array'
     || lk == 43040                 // '$' 'as'
     || lk == 43041                 // '%' 'as'
     || lk == 43290                 // '{' 'as'
     || lk == 43552                 // '$' 'ascending'
     || lk == 43553                 // '%' 'ascending'
     || lk == 43802                 // '{' 'ascending'
     || lk == 44064                 // '$' 'at'
     || lk == 44065                 // '%' 'at'
     || lk == 44314                 // '{' 'at'
     || lk == 44576                 // '$' 'attribute'
     || lk == 44577                 // '%' 'attribute'
     || lk == 44826                 // '{' 'attribute'
     || lk == 45088                 // '$' 'base-uri'
     || lk == 45089                 // '%' 'base-uri'
     || lk == 45338                 // '{' 'base-uri'
     || lk == 45600                 // '$' 'before'
     || lk == 45601                 // '%' 'before'
     || lk == 45850                 // '{' 'before'
     || lk == 46112                 // '$' 'boundary-space'
     || lk == 46113                 // '%' 'boundary-space'
     || lk == 46362                 // '{' 'boundary-space'
     || lk == 46624                 // '$' 'break'
     || lk == 46625                 // '%' 'break'
     || lk == 46874                 // '{' 'break'
     || lk == 47648                 // '$' 'case'
     || lk == 47649                 // '%' 'case'
     || lk == 47898                 // '{' 'case'
     || lk == 48160                 // '$' 'cast'
     || lk == 48161                 // '%' 'cast'
     || lk == 48410                 // '{' 'cast'
     || lk == 48672                 // '$' 'castable'
     || lk == 48673                 // '%' 'castable'
     || lk == 48922                 // '{' 'castable'
     || lk == 49184                 // '$' 'catch'
     || lk == 49185                 // '%' 'catch'
     || lk == 49434                 // '{' 'catch'
     || lk == 50208                 // '$' 'child'
     || lk == 50209                 // '%' 'child'
     || lk == 50458                 // '{' 'child'
     || lk == 50720                 // '$' 'collation'
     || lk == 50721                 // '%' 'collation'
     || lk == 50970                 // '{' 'collation'
     || lk == 51744                 // '$' 'comment'
     || lk == 51745                 // '%' 'comment'
     || lk == 51994                 // '{' 'comment'
     || lk == 52256                 // '$' 'constraint'
     || lk == 52257                 // '%' 'constraint'
     || lk == 52506                 // '{' 'constraint'
     || lk == 52768                 // '$' 'construction'
     || lk == 52769                 // '%' 'construction'
     || lk == 53018                 // '{' 'construction'
     || lk == 54304                 // '$' 'context'
     || lk == 54305                 // '%' 'context'
     || lk == 54554                 // '{' 'context'
     || lk == 54816                 // '$' 'continue'
     || lk == 54817                 // '%' 'continue'
     || lk == 55066                 // '{' 'continue'
     || lk == 55328                 // '$' 'copy'
     || lk == 55329                 // '%' 'copy'
     || lk == 55578                 // '{' 'copy'
     || lk == 55840                 // '$' 'copy-namespaces'
     || lk == 55841                 // '%' 'copy-namespaces'
     || lk == 56090                 // '{' 'copy-namespaces'
     || lk == 56352                 // '$' 'count'
     || lk == 56353                 // '%' 'count'
     || lk == 56602                 // '{' 'count'
     || lk == 56864                 // '$' 'decimal-format'
     || lk == 56865                 // '%' 'decimal-format'
     || lk == 57114                 // '{' 'decimal-format'
     || lk == 57888                 // '$' 'declare'
     || lk == 57889                 // '%' 'declare'
     || lk == 58138                 // '{' 'declare'
     || lk == 58400                 // '$' 'default'
     || lk == 58401                 // '%' 'default'
     || lk == 58650                 // '{' 'default'
     || lk == 58912                 // '$' 'delete'
     || lk == 58913                 // '%' 'delete'
     || lk == 59162                 // '{' 'delete'
     || lk == 59424                 // '$' 'descendant'
     || lk == 59425                 // '%' 'descendant'
     || lk == 59674                 // '{' 'descendant'
     || lk == 59936                 // '$' 'descendant-or-self'
     || lk == 59937                 // '%' 'descendant-or-self'
     || lk == 60186                 // '{' 'descendant-or-self'
     || lk == 60448                 // '$' 'descending'
     || lk == 60449                 // '%' 'descending'
     || lk == 60698                 // '{' 'descending'
     || lk == 63008                 // '$' 'div'
     || lk == 63009                 // '%' 'div'
     || lk == 63258                 // '{' 'div'
     || lk == 63520                 // '$' 'document'
     || lk == 63521                 // '%' 'document'
     || lk == 63770                 // '{' 'document'
     || lk == 64032                 // '$' 'document-node'
     || lk == 64033                 // '%' 'document-node'
     || lk == 64282                 // '{' 'document-node'
     || lk == 64544                 // '$' 'element'
     || lk == 64545                 // '%' 'element'
     || lk == 64794                 // '{' 'element'
     || lk == 65056                 // '$' 'else'
     || lk == 65057                 // '%' 'else'
     || lk == 65306                 // '{' 'else'
     || lk == 65568                 // '$' 'empty'
     || lk == 65569                 // '%' 'empty'
     || lk == 65818                 // '{' 'empty'
     || lk == 66080                 // '$' 'empty-sequence'
     || lk == 66081                 // '%' 'empty-sequence'
     || lk == 66330                 // '{' 'empty-sequence'
     || lk == 66592                 // '$' 'encoding'
     || lk == 66593                 // '%' 'encoding'
     || lk == 66842                 // '{' 'encoding'
     || lk == 67104                 // '$' 'end'
     || lk == 67105                 // '%' 'end'
     || lk == 67354                 // '{' 'end'
     || lk == 68128                 // '$' 'eq'
     || lk == 68129                 // '%' 'eq'
     || lk == 68378                 // '{' 'eq'
     || lk == 68640                 // '$' 'every'
     || lk == 68641                 // '%' 'every'
     || lk == 68890                 // '{' 'every'
     || lk == 69664                 // '$' 'except'
     || lk == 69665                 // '%' 'except'
     || lk == 69914                 // '{' 'except'
     || lk == 70176                 // '$' 'exit'
     || lk == 70177                 // '%' 'exit'
     || lk == 70426                 // '{' 'exit'
     || lk == 70688                 // '$' 'external'
     || lk == 70689                 // '%' 'external'
     || lk == 70938                 // '{' 'external'
     || lk == 71200                 // '$' 'first'
     || lk == 71201                 // '%' 'first'
     || lk == 71450                 // '{' 'first'
     || lk == 71712                 // '$' 'following'
     || lk == 71713                 // '%' 'following'
     || lk == 71962                 // '{' 'following'
     || lk == 72224                 // '$' 'following-sibling'
     || lk == 72225                 // '%' 'following-sibling'
     || lk == 72474                 // '{' 'following-sibling'
     || lk == 72736                 // '$' 'for'
     || lk == 72737                 // '%' 'for'
     || lk == 72986                 // '{' 'for'
     || lk == 74784                 // '$' 'ft-option'
     || lk == 74785                 // '%' 'ft-option'
     || lk == 75034                 // '{' 'ft-option'
     || lk == 76832                 // '$' 'function'
     || lk == 76833                 // '%' 'function'
     || lk == 77082                 // '{' 'function'
     || lk == 77344                 // '$' 'ge'
     || lk == 77345                 // '%' 'ge'
     || lk == 77594                 // '{' 'ge'
     || lk == 78368                 // '$' 'group'
     || lk == 78369                 // '%' 'group'
     || lk == 78618                 // '{' 'group'
     || lk == 79392                 // '$' 'gt'
     || lk == 79393                 // '%' 'gt'
     || lk == 79642                 // '{' 'gt'
     || lk == 79904                 // '$' 'idiv'
     || lk == 79905                 // '%' 'idiv'
     || lk == 80154                 // '{' 'idiv'
     || lk == 80416                 // '$' 'if'
     || lk == 80417                 // '%' 'if'
     || lk == 80666                 // '{' 'if'
     || lk == 80928                 // '$' 'import'
     || lk == 80929                 // '%' 'import'
     || lk == 81178                 // '{' 'import'
     || lk == 81440                 // '$' 'in'
     || lk == 81441                 // '%' 'in'
     || lk == 81690                 // '{' 'in'
     || lk == 81952                 // '$' 'index'
     || lk == 81953                 // '%' 'index'
     || lk == 82202                 // '{' 'index'
     || lk == 84000                 // '$' 'insert'
     || lk == 84001                 // '%' 'insert'
     || lk == 84250                 // '{' 'insert'
     || lk == 84512                 // '$' 'instance'
     || lk == 84513                 // '%' 'instance'
     || lk == 84762                 // '{' 'instance'
     || lk == 85024                 // '$' 'integrity'
     || lk == 85025                 // '%' 'integrity'
     || lk == 85274                 // '{' 'integrity'
     || lk == 85536                 // '$' 'intersect'
     || lk == 85537                 // '%' 'intersect'
     || lk == 85786                 // '{' 'intersect'
     || lk == 86048                 // '$' 'into'
     || lk == 86049                 // '%' 'into'
     || lk == 86298                 // '{' 'into'
     || lk == 86560                 // '$' 'is'
     || lk == 86561                 // '%' 'is'
     || lk == 86810                 // '{' 'is'
     || lk == 87072                 // '$' 'item'
     || lk == 87073                 // '%' 'item'
     || lk == 87322                 // '{' 'item'
     || lk == 88096                 // '$' 'json-item'
     || lk == 88097                 // '%' 'json-item'
     || lk == 88346                 // '{' 'json-item'
     || lk == 89632                 // '$' 'last'
     || lk == 89633                 // '%' 'last'
     || lk == 89882                 // '{' 'last'
     || lk == 90144                 // '$' 'lax'
     || lk == 90145                 // '%' 'lax'
     || lk == 90394                 // '{' 'lax'
     || lk == 90656                 // '$' 'le'
     || lk == 90657                 // '%' 'le'
     || lk == 90906                 // '{' 'le'
     || lk == 91680                 // '$' 'let'
     || lk == 91681                 // '%' 'let'
     || lk == 91930                 // '{' 'let'
     || lk == 92704                 // '$' 'loop'
     || lk == 92705                 // '%' 'loop'
     || lk == 92954                 // '{' 'loop'
     || lk == 93728                 // '$' 'lt'
     || lk == 93729                 // '%' 'lt'
     || lk == 93978                 // '{' 'lt'
     || lk == 94240                 // '$' 'map'
     || lk == 94241                 // '%' 'map'
     || lk == 94490                 // '{' 'map'
     || lk == 95264                 // '$' 'mod'
     || lk == 95265                 // '%' 'mod'
     || lk == 95514                 // '{' 'mod'
     || lk == 95776                 // '$' 'modify'
     || lk == 95777                 // '%' 'modify'
     || lk == 96026                 // '{' 'modify'
     || lk == 96288                 // '$' 'module'
     || lk == 96289                 // '%' 'module'
     || lk == 96538                 // '{' 'module'
     || lk == 97312                 // '$' 'namespace'
     || lk == 97313                 // '%' 'namespace'
     || lk == 97562                 // '{' 'namespace'
     || lk == 97824                 // '$' 'namespace-node'
     || lk == 97825                 // '%' 'namespace-node'
     || lk == 98074                 // '{' 'namespace-node'
     || lk == 98336                 // '$' 'ne'
     || lk == 98337                 // '%' 'ne'
     || lk == 98586                 // '{' 'ne'
     || lk == 100896                // '$' 'node'
     || lk == 100897                // '%' 'node'
     || lk == 101146                // '{' 'node'
     || lk == 101408                // '$' 'nodes'
     || lk == 101409                // '%' 'nodes'
     || lk == 101658                // '{' 'nodes'
     || lk == 102432                // '$' 'object'
     || lk == 102433                // '%' 'object'
     || lk == 102682                // '{' 'object'
     || lk == 104480                // '$' 'only'
     || lk == 104481                // '%' 'only'
     || lk == 104730                // '{' 'only'
     || lk == 104992                // '$' 'option'
     || lk == 104993                // '%' 'option'
     || lk == 105242                // '{' 'option'
     || lk == 105504                // '$' 'or'
     || lk == 105505                // '%' 'or'
     || lk == 105754                // '{' 'or'
     || lk == 106016                // '$' 'order'
     || lk == 106017                // '%' 'order'
     || lk == 106266                // '{' 'order'
     || lk == 106528                // '$' 'ordered'
     || lk == 106529                // '%' 'ordered'
     || lk == 106778                // '{' 'ordered'
     || lk == 107040                // '$' 'ordering'
     || lk == 107041                // '%' 'ordering'
     || lk == 107290                // '{' 'ordering'
     || lk == 108576                // '$' 'parent'
     || lk == 108577                // '%' 'parent'
     || lk == 108826                // '{' 'parent'
     || lk == 111648                // '$' 'preceding'
     || lk == 111649                // '%' 'preceding'
     || lk == 111898                // '{' 'preceding'
     || lk == 112160                // '$' 'preceding-sibling'
     || lk == 112161                // '%' 'preceding-sibling'
     || lk == 112410                // '{' 'preceding-sibling'
     || lk == 113696                // '$' 'processing-instruction'
     || lk == 113697                // '%' 'processing-instruction'
     || lk == 113946                // '{' 'processing-instruction'
     || lk == 114720                // '$' 'rename'
     || lk == 114721                // '%' 'rename'
     || lk == 114970                // '{' 'rename'
     || lk == 115232                // '$' 'replace'
     || lk == 115233                // '%' 'replace'
     || lk == 115482                // '{' 'replace'
     || lk == 115744                // '$' 'return'
     || lk == 115745                // '%' 'return'
     || lk == 115994                // '{' 'return'
     || lk == 116256                // '$' 'returning'
     || lk == 116257                // '%' 'returning'
     || lk == 116506                // '{' 'returning'
     || lk == 116768                // '$' 'revalidation'
     || lk == 116769                // '%' 'revalidation'
     || lk == 117018                // '{' 'revalidation'
     || lk == 117792                // '$' 'satisfies'
     || lk == 117793                // '%' 'satisfies'
     || lk == 118042                // '{' 'satisfies'
     || lk == 118304                // '$' 'schema'
     || lk == 118305                // '%' 'schema'
     || lk == 118554                // '{' 'schema'
     || lk == 118816                // '$' 'schema-attribute'
     || lk == 118817                // '%' 'schema-attribute'
     || lk == 119066                // '{' 'schema-attribute'
     || lk == 119328                // '$' 'schema-element'
     || lk == 119329                // '%' 'schema-element'
     || lk == 119578                // '{' 'schema-element'
     || lk == 119840                // '$' 'score'
     || lk == 119841                // '%' 'score'
     || lk == 120090                // '{' 'score'
     || lk == 120352                // '$' 'self'
     || lk == 120353                // '%' 'self'
     || lk == 120602                // '{' 'self'
     || lk == 122912                // '$' 'sliding'
     || lk == 122913                // '%' 'sliding'
     || lk == 123162                // '{' 'sliding'
     || lk == 123424                // '$' 'some'
     || lk == 123425                // '%' 'some'
     || lk == 123674                // '{' 'some'
     || lk == 123936                // '$' 'stable'
     || lk == 123937                // '%' 'stable'
     || lk == 124186                // '{' 'stable'
     || lk == 124448                // '$' 'start'
     || lk == 124449                // '%' 'start'
     || lk == 124698                // '{' 'start'
     || lk == 125984                // '$' 'strict'
     || lk == 125985                // '%' 'strict'
     || lk == 126234                // '{' 'strict'
     || lk == 127520                // '$' 'switch'
     || lk == 127521                // '%' 'switch'
     || lk == 127770                // '{' 'switch'
     || lk == 128032                // '$' 'text'
     || lk == 128033                // '%' 'text'
     || lk == 128282                // '{' 'text'
     || lk == 130080                // '$' 'to'
     || lk == 130081                // '%' 'to'
     || lk == 130330                // '{' 'to'
     || lk == 130592                // '$' 'treat'
     || lk == 130593                // '%' 'treat'
     || lk == 130842                // '{' 'treat'
     || lk == 131104                // '$' 'try'
     || lk == 131105                // '%' 'try'
     || lk == 131354                // '{' 'try'
     || lk == 131616                // '$' 'tumbling'
     || lk == 131617                // '%' 'tumbling'
     || lk == 131866                // '{' 'tumbling'
     || lk == 132128                // '$' 'type'
     || lk == 132129                // '%' 'type'
     || lk == 132378                // '{' 'type'
     || lk == 132640                // '$' 'typeswitch'
     || lk == 132641                // '%' 'typeswitch'
     || lk == 132890                // '{' 'typeswitch'
     || lk == 133152                // '$' 'union'
     || lk == 133153                // '%' 'union'
     || lk == 133402                // '{' 'union'
     || lk == 134176                // '$' 'unordered'
     || lk == 134177                // '%' 'unordered'
     || lk == 134426                // '{' 'unordered'
     || lk == 134688                // '$' 'updating'
     || lk == 134689                // '%' 'updating'
     || lk == 134938                // '{' 'updating'
     || lk == 136224                // '$' 'validate'
     || lk == 136225                // '%' 'validate'
     || lk == 136474                // '{' 'validate'
     || lk == 136736                // '$' 'value'
     || lk == 136737                // '%' 'value'
     || lk == 136986                // '{' 'value'
     || lk == 137248                // '$' 'variable'
     || lk == 137249                // '%' 'variable'
     || lk == 137498                // '{' 'variable'
     || lk == 137760                // '$' 'version'
     || lk == 137761                // '%' 'version'
     || lk == 138010                // '{' 'version'
     || lk == 139296                // '$' 'where'
     || lk == 139297                // '%' 'where'
     || lk == 139546                // '{' 'where'
     || lk == 139808                // '$' 'while'
     || lk == 139809                // '%' 'while'
     || lk == 140058                // '{' 'while'
     || lk == 141344                // '$' 'with'
     || lk == 141345                // '%' 'with'
     || lk == 141594                // '{' 'with'
     || lk == 143392                // '$' 'xquery'
     || lk == 143393                // '%' 'xquery'
     || lk == 143642                // '{' 'xquery'
     || lk == 144666                // '{' '{'
     || lk == 145690                // '{' '{|'
     || lk == 147738)               // '{' '}'
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          memoize(7, e0A, -1);
          lk = -14;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            memoize(7, e0A, -2);
            lk = -14;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              memoize(7, e0A, -3);
              lk = -14;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                memoize(7, e0A, -12);
                lk = -14;
              }
              catch (p12A)
              {
                lk = -13;
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(7, e0A, -13);
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -2:
      try_AssignStatement();
      break;
    case -3:
      try_BlockStatement();
      break;
    case 92763:                     // 'break' 'loop'
      try_BreakStatement();
      break;
    case 92779:                     // 'continue' 'loop'
      try_ContinueStatement();
      break;
    case 116361:                    // 'exit' 'returning'
      try_ExitStatement();
      break;
    case 16526:                     // 'for' '$'
    case 16563:                     // 'let' '$'
    case 119987:                    // 'let' 'score'
    case 123022:                    // 'for' 'sliding'
    case 131726:                    // 'for' 'tumbling'
      try_FLWORStatement();
      break;
    case 18077:                     // 'if' '('
      try_IfStatement();
      break;
    case 18169:                     // 'switch' '('
      try_SwitchStatement();
      break;
    case 144640:                    // 'try' '{'
      try_TryCatchStatement();
      break;
    case 18179:                     // 'typeswitch' '('
      try_TypeswitchStatement();
      break;
    case -12:
    case 16652:                     // 'variable' '$'
      try_VarDeclStatement();
      break;
    case -13:
      try_WhileStatement();
      break;
    case -14:
      break;
    default:
      try_ApplyStatement();
    }
  }

  function parse_ApplyStatement()
  {
    eventHandler.startNonterminal("ApplyStatement", e0);
    parse_ExprSimple();
    consume(54);                    // ';'
    eventHandler.endNonterminal("ApplyStatement", e0);
  }

  function try_ApplyStatement()
  {
    try_ExprSimple();
    consumeT(54);                   // ';'
  }

  function parse_AssignStatement()
  {
    eventHandler.startNonterminal("AssignStatement", e0);
    consume(32);                    // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(29);                // S^WS | '(:' | ':='
    consume(53);                    // ':='
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(54);                    // ';'
    eventHandler.endNonterminal("AssignStatement", e0);
  }

  function try_AssignStatement()
  {
    consumeT(32);                   // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(29);                // S^WS | '(:' | ':='
    consumeT(53);                   // ':='
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(54);                   // ';'
  }

  function parse_BlockStatement()
  {
    eventHandler.startNonterminal("BlockStatement", e0);
    consume(282);                   // '{'
    lookahead1W(281);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    whitespace();
    parse_Statements();
    consume(288);                   // '}'
    eventHandler.endNonterminal("BlockStatement", e0);
  }

  function try_BlockStatement()
  {
    consumeT(282);                  // '{'
    lookahead1W(281);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    try_Statements();
    consumeT(288);                  // '}'
  }

  function parse_BreakStatement()
  {
    eventHandler.startNonterminal("BreakStatement", e0);
    consume(91);                    // 'break'
    lookahead1W(61);                // S^WS | '(:' | 'loop'
    consume(181);                   // 'loop'
    lookahead1W(30);                // S^WS | '(:' | ';'
    consume(54);                    // ';'
    eventHandler.endNonterminal("BreakStatement", e0);
  }

  function try_BreakStatement()
  {
    consumeT(91);                   // 'break'
    lookahead1W(61);                // S^WS | '(:' | 'loop'
    consumeT(181);                  // 'loop'
    lookahead1W(30);                // S^WS | '(:' | ';'
    consumeT(54);                   // ';'
  }

  function parse_ContinueStatement()
  {
    eventHandler.startNonterminal("ContinueStatement", e0);
    consume(107);                   // 'continue'
    lookahead1W(61);                // S^WS | '(:' | 'loop'
    consume(181);                   // 'loop'
    lookahead1W(30);                // S^WS | '(:' | ';'
    consume(54);                    // ';'
    eventHandler.endNonterminal("ContinueStatement", e0);
  }

  function try_ContinueStatement()
  {
    consumeT(107);                  // 'continue'
    lookahead1W(61);                // S^WS | '(:' | 'loop'
    consumeT(181);                  // 'loop'
    lookahead1W(30);                // S^WS | '(:' | ';'
    consumeT(54);                   // ';'
  }

  function parse_ExitStatement()
  {
    eventHandler.startNonterminal("ExitStatement", e0);
    consume(137);                   // 'exit'
    lookahead1W(73);                // S^WS | '(:' | 'returning'
    consume(227);                   // 'returning'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(54);                    // ';'
    eventHandler.endNonterminal("ExitStatement", e0);
  }

  function try_ExitStatement()
  {
    consumeT(137);                  // 'exit'
    lookahead1W(73);                // S^WS | '(:' | 'returning'
    consumeT(227);                  // 'returning'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(54);                   // ';'
  }

  function parse_FLWORStatement()
  {
    eventHandler.startNonterminal("FLWORStatement", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(175);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 226)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnStatement();
    eventHandler.endNonterminal("FLWORStatement", e0);
  }

  function try_FLWORStatement()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(175);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 226)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnStatement();
  }

  function parse_ReturnStatement()
  {
    eventHandler.startNonterminal("ReturnStatement", e0);
    consume(226);                   // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("ReturnStatement", e0);
  }

  function try_ReturnStatement()
  {
    consumeT(226);                  // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_IfStatement()
  {
    eventHandler.startNonterminal("IfStatement", e0);
    consume(157);                   // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(38);                    // ')'
    lookahead1W(79);                // S^WS | '(:' | 'then'
    consume(251);                   // 'then'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    lookahead1W(50);                // S^WS | '(:' | 'else'
    consume(127);                   // 'else'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("IfStatement", e0);
  }

  function try_IfStatement()
  {
    consumeT(157);                  // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(38);                   // ')'
    lookahead1W(79);                // S^WS | '(:' | 'then'
    consumeT(251);                  // 'then'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
    lookahead1W(50);                // S^WS | '(:' | 'else'
    consumeT(127);                  // 'else'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_SwitchStatement()
  {
    eventHandler.startNonterminal("SwitchStatement", e0);
    consume(249);                   // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(38);                    // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseStatement();
      lookahead1W(115);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consume(114);                   // 'default'
    lookahead1W(72);                // S^WS | '(:' | 'return'
    consume(226);                   // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchStatement", e0);
  }

  function try_SwitchStatement()
  {
    consumeT(249);                  // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(38);                   // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      try_SwitchCaseStatement();
      lookahead1W(115);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consumeT(114);                  // 'default'
    lookahead1W(72);                // S^WS | '(:' | 'return'
    consumeT(226);                  // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_SwitchCaseStatement()
  {
    eventHandler.startNonterminal("SwitchCaseStatement", e0);
    for (;;)
    {
      consume(93);                  // 'case'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consume(226);                   // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchCaseStatement", e0);
  }

  function try_SwitchCaseStatement()
  {
    for (;;)
    {
      consumeT(93);                 // 'case'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consumeT(226);                  // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_TryCatchStatement()
  {
    eventHandler.startNonterminal("TryCatchStatement", e0);
    consume(256);                   // 'try'
    lookahead1W(89);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockStatement();
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'catch'
      consume(96);                  // 'catch'
      lookahead1W(261);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_CatchErrorList();
      whitespace();
      parse_BlockStatement();
      lookahead1W(285);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      switch (l1)
      {
      case 96:                      // 'catch'
        lookahead2W(283);           // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 41056               // 'catch' 'and'
       || lk == 48224               // 'catch' 'cast'
       || lk == 48736               // 'catch' 'castable'
       || lk == 63072               // 'catch' 'div'
       || lk == 68192               // 'catch' 'eq'
       || lk == 69728               // 'catch' 'except'
       || lk == 77408               // 'catch' 'ge'
       || lk == 79456               // 'catch' 'gt'
       || lk == 79968               // 'catch' 'idiv'
       || lk == 84576               // 'catch' 'instance'
       || lk == 85600               // 'catch' 'intersect'
       || lk == 86624               // 'catch' 'is'
       || lk == 90720               // 'catch' 'le'
       || lk == 93792               // 'catch' 'lt'
       || lk == 95328               // 'catch' 'mod'
       || lk == 98400               // 'catch' 'ne'
       || lk == 105568              // 'catch' 'or'
       || lk == 130144              // 'catch' 'to'
       || lk == 130656              // 'catch' 'treat'
       || lk == 133216)             // 'catch' 'union'
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(38);        // S^WS | '(:' | 'catch'
            consumeT(96);           // 'catch'
            lookahead1W(261);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
            try_CatchErrorList();
            try_BlockStatement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(8, e0, lk);
        }
      }
      if (lk != -1
       && lk != 2656                // 'catch' Wildcard
       && lk != 3168                // 'catch' EQName^Token
       && lk != 38496               // 'catch' 'after'
       && lk != 39520               // 'catch' 'allowing'
       && lk != 40032               // 'catch' 'ancestor'
       && lk != 40544               // 'catch' 'ancestor-or-self'
       && lk != 42592               // 'catch' 'array'
       && lk != 43104               // 'catch' 'as'
       && lk != 43616               // 'catch' 'ascending'
       && lk != 44128               // 'catch' 'at'
       && lk != 44640               // 'catch' 'attribute'
       && lk != 45152               // 'catch' 'base-uri'
       && lk != 45664               // 'catch' 'before'
       && lk != 46176               // 'catch' 'boundary-space'
       && lk != 46688               // 'catch' 'break'
       && lk != 47712               // 'catch' 'case'
       && lk != 49248               // 'catch' 'catch'
       && lk != 50272               // 'catch' 'child'
       && lk != 50784               // 'catch' 'collation'
       && lk != 51808               // 'catch' 'comment'
       && lk != 52320               // 'catch' 'constraint'
       && lk != 52832               // 'catch' 'construction'
       && lk != 54368               // 'catch' 'context'
       && lk != 54880               // 'catch' 'continue'
       && lk != 55392               // 'catch' 'copy'
       && lk != 55904               // 'catch' 'copy-namespaces'
       && lk != 56416               // 'catch' 'count'
       && lk != 56928               // 'catch' 'decimal-format'
       && lk != 57952               // 'catch' 'declare'
       && lk != 58464               // 'catch' 'default'
       && lk != 58976               // 'catch' 'delete'
       && lk != 59488               // 'catch' 'descendant'
       && lk != 60000               // 'catch' 'descendant-or-self'
       && lk != 60512               // 'catch' 'descending'
       && lk != 63584               // 'catch' 'document'
       && lk != 64096               // 'catch' 'document-node'
       && lk != 64608               // 'catch' 'element'
       && lk != 65120               // 'catch' 'else'
       && lk != 65632               // 'catch' 'empty'
       && lk != 66144               // 'catch' 'empty-sequence'
       && lk != 66656               // 'catch' 'encoding'
       && lk != 67168               // 'catch' 'end'
       && lk != 68704               // 'catch' 'every'
       && lk != 70240               // 'catch' 'exit'
       && lk != 70752               // 'catch' 'external'
       && lk != 71264               // 'catch' 'first'
       && lk != 71776               // 'catch' 'following'
       && lk != 72288               // 'catch' 'following-sibling'
       && lk != 72800               // 'catch' 'for'
       && lk != 74848               // 'catch' 'ft-option'
       && lk != 76896               // 'catch' 'function'
       && lk != 78432               // 'catch' 'group'
       && lk != 80480               // 'catch' 'if'
       && lk != 80992               // 'catch' 'import'
       && lk != 81504               // 'catch' 'in'
       && lk != 82016               // 'catch' 'index'
       && lk != 84064               // 'catch' 'insert'
       && lk != 85088               // 'catch' 'integrity'
       && lk != 86112               // 'catch' 'into'
       && lk != 87136               // 'catch' 'item'
       && lk != 88160               // 'catch' 'json-item'
       && lk != 89696               // 'catch' 'last'
       && lk != 90208               // 'catch' 'lax'
       && lk != 91744               // 'catch' 'let'
       && lk != 92768               // 'catch' 'loop'
       && lk != 94304               // 'catch' 'map'
       && lk != 95840               // 'catch' 'modify'
       && lk != 96352               // 'catch' 'module'
       && lk != 97376               // 'catch' 'namespace'
       && lk != 97888               // 'catch' 'namespace-node'
       && lk != 100960              // 'catch' 'node'
       && lk != 101472              // 'catch' 'nodes'
       && lk != 102496              // 'catch' 'object'
       && lk != 104544              // 'catch' 'only'
       && lk != 105056              // 'catch' 'option'
       && lk != 106080              // 'catch' 'order'
       && lk != 106592              // 'catch' 'ordered'
       && lk != 107104              // 'catch' 'ordering'
       && lk != 108640              // 'catch' 'parent'
       && lk != 111712              // 'catch' 'preceding'
       && lk != 112224              // 'catch' 'preceding-sibling'
       && lk != 113760              // 'catch' 'processing-instruction'
       && lk != 114784              // 'catch' 'rename'
       && lk != 115296              // 'catch' 'replace'
       && lk != 115808              // 'catch' 'return'
       && lk != 116320              // 'catch' 'returning'
       && lk != 116832              // 'catch' 'revalidation'
       && lk != 117856              // 'catch' 'satisfies'
       && lk != 118368              // 'catch' 'schema'
       && lk != 118880              // 'catch' 'schema-attribute'
       && lk != 119392              // 'catch' 'schema-element'
       && lk != 119904              // 'catch' 'score'
       && lk != 120416              // 'catch' 'self'
       && lk != 122976              // 'catch' 'sliding'
       && lk != 123488              // 'catch' 'some'
       && lk != 124000              // 'catch' 'stable'
       && lk != 124512              // 'catch' 'start'
       && lk != 126048              // 'catch' 'strict'
       && lk != 127584              // 'catch' 'switch'
       && lk != 128096              // 'catch' 'text'
       && lk != 131168              // 'catch' 'try'
       && lk != 131680              // 'catch' 'tumbling'
       && lk != 132192              // 'catch' 'type'
       && lk != 132704              // 'catch' 'typeswitch'
       && lk != 134240              // 'catch' 'unordered'
       && lk != 134752              // 'catch' 'updating'
       && lk != 136288              // 'catch' 'validate'
       && lk != 136800              // 'catch' 'value'
       && lk != 137312              // 'catch' 'variable'
       && lk != 137824              // 'catch' 'version'
       && lk != 139360              // 'catch' 'where'
       && lk != 139872              // 'catch' 'while'
       && lk != 141408              // 'catch' 'with'
       && lk != 143456)             // 'catch' 'xquery'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchStatement", e0);
  }

  function try_TryCatchStatement()
  {
    consumeT(256);                  // 'try'
    lookahead1W(89);                // S^WS | '(:' | '{'
    try_BlockStatement();
    lookahead1W(38);                // S^WS | '(:' | 'catch'
    consumeT(96);                   // 'catch'
    lookahead1W(261);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_CatchErrorList();
    try_BlockStatement();
    for (;;)
    {
      lookahead1W(285);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      switch (l1)
      {
      case 96:                      // 'catch'
        lookahead2W(283);           // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 41056               // 'catch' 'and'
       || lk == 48224               // 'catch' 'cast'
       || lk == 48736               // 'catch' 'castable'
       || lk == 63072               // 'catch' 'div'
       || lk == 68192               // 'catch' 'eq'
       || lk == 69728               // 'catch' 'except'
       || lk == 77408               // 'catch' 'ge'
       || lk == 79456               // 'catch' 'gt'
       || lk == 79968               // 'catch' 'idiv'
       || lk == 84576               // 'catch' 'instance'
       || lk == 85600               // 'catch' 'intersect'
       || lk == 86624               // 'catch' 'is'
       || lk == 90720               // 'catch' 'le'
       || lk == 93792               // 'catch' 'lt'
       || lk == 95328               // 'catch' 'mod'
       || lk == 98400               // 'catch' 'ne'
       || lk == 105568              // 'catch' 'or'
       || lk == 130144              // 'catch' 'to'
       || lk == 130656              // 'catch' 'treat'
       || lk == 133216)             // 'catch' 'union'
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(38);        // S^WS | '(:' | 'catch'
            consumeT(96);           // 'catch'
            lookahead1W(261);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
            try_CatchErrorList();
            try_BlockStatement();
            memoize(8, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(8, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 2656                // 'catch' Wildcard
       && lk != 3168                // 'catch' EQName^Token
       && lk != 38496               // 'catch' 'after'
       && lk != 39520               // 'catch' 'allowing'
       && lk != 40032               // 'catch' 'ancestor'
       && lk != 40544               // 'catch' 'ancestor-or-self'
       && lk != 42592               // 'catch' 'array'
       && lk != 43104               // 'catch' 'as'
       && lk != 43616               // 'catch' 'ascending'
       && lk != 44128               // 'catch' 'at'
       && lk != 44640               // 'catch' 'attribute'
       && lk != 45152               // 'catch' 'base-uri'
       && lk != 45664               // 'catch' 'before'
       && lk != 46176               // 'catch' 'boundary-space'
       && lk != 46688               // 'catch' 'break'
       && lk != 47712               // 'catch' 'case'
       && lk != 49248               // 'catch' 'catch'
       && lk != 50272               // 'catch' 'child'
       && lk != 50784               // 'catch' 'collation'
       && lk != 51808               // 'catch' 'comment'
       && lk != 52320               // 'catch' 'constraint'
       && lk != 52832               // 'catch' 'construction'
       && lk != 54368               // 'catch' 'context'
       && lk != 54880               // 'catch' 'continue'
       && lk != 55392               // 'catch' 'copy'
       && lk != 55904               // 'catch' 'copy-namespaces'
       && lk != 56416               // 'catch' 'count'
       && lk != 56928               // 'catch' 'decimal-format'
       && lk != 57952               // 'catch' 'declare'
       && lk != 58464               // 'catch' 'default'
       && lk != 58976               // 'catch' 'delete'
       && lk != 59488               // 'catch' 'descendant'
       && lk != 60000               // 'catch' 'descendant-or-self'
       && lk != 60512               // 'catch' 'descending'
       && lk != 63584               // 'catch' 'document'
       && lk != 64096               // 'catch' 'document-node'
       && lk != 64608               // 'catch' 'element'
       && lk != 65120               // 'catch' 'else'
       && lk != 65632               // 'catch' 'empty'
       && lk != 66144               // 'catch' 'empty-sequence'
       && lk != 66656               // 'catch' 'encoding'
       && lk != 67168               // 'catch' 'end'
       && lk != 68704               // 'catch' 'every'
       && lk != 70240               // 'catch' 'exit'
       && lk != 70752               // 'catch' 'external'
       && lk != 71264               // 'catch' 'first'
       && lk != 71776               // 'catch' 'following'
       && lk != 72288               // 'catch' 'following-sibling'
       && lk != 72800               // 'catch' 'for'
       && lk != 74848               // 'catch' 'ft-option'
       && lk != 76896               // 'catch' 'function'
       && lk != 78432               // 'catch' 'group'
       && lk != 80480               // 'catch' 'if'
       && lk != 80992               // 'catch' 'import'
       && lk != 81504               // 'catch' 'in'
       && lk != 82016               // 'catch' 'index'
       && lk != 84064               // 'catch' 'insert'
       && lk != 85088               // 'catch' 'integrity'
       && lk != 86112               // 'catch' 'into'
       && lk != 87136               // 'catch' 'item'
       && lk != 88160               // 'catch' 'json-item'
       && lk != 89696               // 'catch' 'last'
       && lk != 90208               // 'catch' 'lax'
       && lk != 91744               // 'catch' 'let'
       && lk != 92768               // 'catch' 'loop'
       && lk != 94304               // 'catch' 'map'
       && lk != 95840               // 'catch' 'modify'
       && lk != 96352               // 'catch' 'module'
       && lk != 97376               // 'catch' 'namespace'
       && lk != 97888               // 'catch' 'namespace-node'
       && lk != 100960              // 'catch' 'node'
       && lk != 101472              // 'catch' 'nodes'
       && lk != 102496              // 'catch' 'object'
       && lk != 104544              // 'catch' 'only'
       && lk != 105056              // 'catch' 'option'
       && lk != 106080              // 'catch' 'order'
       && lk != 106592              // 'catch' 'ordered'
       && lk != 107104              // 'catch' 'ordering'
       && lk != 108640              // 'catch' 'parent'
       && lk != 111712              // 'catch' 'preceding'
       && lk != 112224              // 'catch' 'preceding-sibling'
       && lk != 113760              // 'catch' 'processing-instruction'
       && lk != 114784              // 'catch' 'rename'
       && lk != 115296              // 'catch' 'replace'
       && lk != 115808              // 'catch' 'return'
       && lk != 116320              // 'catch' 'returning'
       && lk != 116832              // 'catch' 'revalidation'
       && lk != 117856              // 'catch' 'satisfies'
       && lk != 118368              // 'catch' 'schema'
       && lk != 118880              // 'catch' 'schema-attribute'
       && lk != 119392              // 'catch' 'schema-element'
       && lk != 119904              // 'catch' 'score'
       && lk != 120416              // 'catch' 'self'
       && lk != 122976              // 'catch' 'sliding'
       && lk != 123488              // 'catch' 'some'
       && lk != 124000              // 'catch' 'stable'
       && lk != 124512              // 'catch' 'start'
       && lk != 126048              // 'catch' 'strict'
       && lk != 127584              // 'catch' 'switch'
       && lk != 128096              // 'catch' 'text'
       && lk != 131168              // 'catch' 'try'
       && lk != 131680              // 'catch' 'tumbling'
       && lk != 132192              // 'catch' 'type'
       && lk != 132704              // 'catch' 'typeswitch'
       && lk != 134240              // 'catch' 'unordered'
       && lk != 134752              // 'catch' 'updating'
       && lk != 136288              // 'catch' 'validate'
       && lk != 136800              // 'catch' 'value'
       && lk != 137312              // 'catch' 'variable'
       && lk != 137824              // 'catch' 'version'
       && lk != 139360              // 'catch' 'where'
       && lk != 139872              // 'catch' 'while'
       && lk != 141408              // 'catch' 'with'
       && lk != 143456)             // 'catch' 'xquery'
      {
        break;
      }
      lookahead1W(38);              // S^WS | '(:' | 'catch'
      consumeT(96);                 // 'catch'
      lookahead1W(261);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_CatchErrorList();
      try_BlockStatement();
    }
  }

  function parse_TypeswitchStatement()
  {
    eventHandler.startNonterminal("TypeswitchStatement", e0);
    consume(259);                   // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(38);                    // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseStatement();
      lookahead1W(115);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consume(114);                   // 'default'
    lookahead1W(97);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 32)                   // '$'
    {
      consume(32);                  // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(72);                // S^WS | '(:' | 'return'
    consume(226);                   // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("TypeswitchStatement", e0);
  }

  function try_TypeswitchStatement()
  {
    consumeT(259);                  // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(38);                   // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      try_CaseStatement();
      lookahead1W(115);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consumeT(114);                  // 'default'
    lookahead1W(97);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 32)                   // '$'
    {
      consumeT(32);                 // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
    }
    lookahead1W(72);                // S^WS | '(:' | 'return'
    consumeT(226);                  // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_CaseStatement()
  {
    eventHandler.startNonterminal("CaseStatement", e0);
    consume(93);                    // 'case'
    lookahead1W(269);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 32)                   // '$'
    {
      consume(32);                  // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(32);              // S^WS | '(:' | 'as'
      consume(84);                  // 'as'
    }
    lookahead1W(268);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(72);                // S^WS | '(:' | 'return'
    consume(226);                   // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("CaseStatement", e0);
  }

  function try_CaseStatement()
  {
    consumeT(93);                   // 'case'
    lookahead1W(269);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 32)                   // '$'
    {
      consumeT(32);                 // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(32);              // S^WS | '(:' | 'as'
      consumeT(84);                 // 'as'
    }
    lookahead1W(268);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceType();
    lookahead1W(72);                // S^WS | '(:' | 'return'
    consumeT(226);                  // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_VarDeclStatement()
  {
    eventHandler.startNonterminal("VarDeclStatement", e0);
    for (;;)
    {
      lookahead1W(100);             // S^WS | '%' | '(:' | 'variable'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(268);                   // 'variable'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(159);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(147);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 53)                   // ':='
    {
      consume(53);                  // ':='
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(32);                  // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(159);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 84)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(147);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 53)                 // ':='
      {
        consume(53);                // ':='
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(54);                    // ';'
    eventHandler.endNonterminal("VarDeclStatement", e0);
  }

  function try_VarDeclStatement()
  {
    for (;;)
    {
      lookahead1W(100);             // S^WS | '%' | '(:' | 'variable'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(268);                  // 'variable'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(159);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 84)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(147);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 53)                   // ':='
    {
      consumeT(53);                 // ':='
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consumeT(42);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(32);                 // '$'
      lookahead1W(258);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(159);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 84)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(147);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 53)                 // ':='
      {
        consumeT(53);               // ':='
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
      }
    }
    consumeT(54);                   // ';'
  }

  function parse_WhileStatement()
  {
    eventHandler.startNonterminal("WhileStatement", e0);
    consume(273);                   // 'while'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(38);                    // ')'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("WhileStatement", e0);
  }

  function try_WhileStatement()
  {
    consumeT(273);                  // 'while'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(38);                   // ')'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 142:                       // 'for'
      lookahead2W(237);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'sliding' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'tumbling' | 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 179:                       // 'let'
      lookahead2W(234);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'score' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 256:                       // 'try'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '|}' | '}' | '}`'
      break;
    case 157:                       // 'if'
    case 249:                       // 'switch'
    case 259:                       // 'typeswitch'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16526:                     // 'for' '$'
    case 16563:                     // 'let' '$'
    case 119987:                    // 'let' 'score'
    case 123022:                    // 'for' 'sliding'
    case 131726:                    // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 18077:                     // 'if' '('
      parse_IfExpr();
      break;
    case 18169:                     // 'switch' '('
      parse_SwitchExpr();
      break;
    case 144640:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 18179:                     // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    default:
      parse_ExprSimple();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 142:                       // 'for'
      lookahead2W(237);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'sliding' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'tumbling' | 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 179:                       // 'let'
      lookahead2W(234);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'score' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 256:                       // 'try'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '|}' | '}' | '}`'
      break;
    case 157:                       // 'if'
    case 249:                       // 'switch'
    case 259:                       // 'typeswitch'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16526:                     // 'for' '$'
    case 16563:                     // 'let' '$'
    case 119987:                    // 'let' 'score'
    case 123022:                    // 'for' 'sliding'
    case 131726:                    // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 18077:                     // 'if' '('
      try_IfExpr();
      break;
    case 18169:                     // 'switch' '('
      try_SwitchExpr();
      break;
    case 144640:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 18179:                     // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    default:
      try_ExprSimple();
    }
  }

  function parse_ExprSimple()
  {
    eventHandler.startNonterminal("ExprSimple", e0);
    switch (l1)
    {
    case 224:                       // 'rename'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 225:                       // 'replace'
      lookahead2W(239);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'value' | 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 115:                       // 'delete'
    case 164:                       // 'insert'
      lookahead2W(238);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 108:                       // 'copy'
    case 134:                       // 'every'
    case 241:                       // 'some'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16518:                     // 'every' '$'
    case 16625:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 101028:                    // 'insert' 'node'
    case 101540:                    // 'insert' 'nodes'
      parse_InsertExpr();
      break;
    case 100979:                    // 'delete' 'node'
    case 101491:                    // 'delete' 'nodes'
      parse_DeleteExpr();
      break;
    case 101088:                    // 'rename' 'node'
      parse_RenameExpr();
      break;
    case 101089:                    // 'replace' 'node'
    case 136929:                    // 'replace' 'value'
      parse_ReplaceExpr();
      break;
    case 16492:                     // 'copy' '$'
      parse_TransformExpr();
      break;
    case 87667:                     // 'delete' 'json'
      parse_JSONDeleteExpr();
      break;
    case 87716:                     // 'insert' 'json'
      parse_JSONInsertExpr();
      break;
    case 87776:                     // 'rename' 'json'
      parse_JSONRenameExpr();
      break;
    case 87777:                     // 'replace' 'json'
      parse_JSONReplaceExpr();
      break;
    case 82:                        // 'append'
      parse_JSONAppendExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSimple", e0);
  }

  function try_ExprSimple()
  {
    switch (l1)
    {
    case 224:                       // 'rename'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 225:                       // 'replace'
      lookahead2W(239);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'value' | 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 115:                       // 'delete'
    case 164:                       // 'insert'
      lookahead2W(238);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 108:                       // 'copy'
    case 134:                       // 'every'
    case 241:                       // 'some'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16518:                     // 'every' '$'
    case 16625:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 101028:                    // 'insert' 'node'
    case 101540:                    // 'insert' 'nodes'
      try_InsertExpr();
      break;
    case 100979:                    // 'delete' 'node'
    case 101491:                    // 'delete' 'nodes'
      try_DeleteExpr();
      break;
    case 101088:                    // 'rename' 'node'
      try_RenameExpr();
      break;
    case 101089:                    // 'replace' 'node'
    case 136929:                    // 'replace' 'value'
      try_ReplaceExpr();
      break;
    case 16492:                     // 'copy' '$'
      try_TransformExpr();
      break;
    case 87667:                     // 'delete' 'json'
      try_JSONDeleteExpr();
      break;
    case 87716:                     // 'insert' 'json'
      try_JSONInsertExpr();
      break;
    case 87776:                     // 'rename' 'json'
      try_JSONRenameExpr();
      break;
    case 87777:                     // 'replace' 'json'
      try_JSONReplaceExpr();
      break;
    case 82:                        // 'append'
      try_JSONAppendExpr();
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_JSONDeleteExpr()
  {
    eventHandler.startNonterminal("JSONDeleteExpr", e0);
    consume(115);                   // 'delete'
    lookahead1W(58);                // S^WS | '(:' | 'json'
    consume(171);                   // 'json'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | '``[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    eventHandler.endNonterminal("JSONDeleteExpr", e0);
  }

  function try_JSONDeleteExpr()
  {
    consumeT(115);                  // 'delete'
    lookahead1W(58);                // S^WS | '(:' | 'json'
    consumeT(171);                  // 'json'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | '``[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_PostfixExpr();
  }

  function parse_JSONInsertExpr()
  {
    eventHandler.startNonterminal("JSONInsertExpr", e0);
    consume(164);                   // 'insert'
    lookahead1W(58);                // S^WS | '(:' | 'json'
    consume(171);                   // 'json'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(168);                   // 'into'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    switch (l1)
    {
    case 86:                        // 'at'
      lookahead2W(71);              // S^WS | '(:' | 'position'
      break;
    default:
      lk = l1;
    }
    if (lk == 111190)               // 'at' 'position'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(86);             // 'at'
          lookahead1W(71);          // S^WS | '(:' | 'position'
          consumeT(217);            // 'position'
          lookahead1W(276);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
          try_ExprSingle();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(9, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(86);                  // 'at'
      lookahead1W(71);              // S^WS | '(:' | 'position'
      consume(217);                 // 'position'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("JSONInsertExpr", e0);
  }

  function try_JSONInsertExpr()
  {
    consumeT(164);                  // 'insert'
    lookahead1W(58);                // S^WS | '(:' | 'json'
    consumeT(171);                  // 'json'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(168);                  // 'into'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    switch (l1)
    {
    case 86:                        // 'at'
      lookahead2W(71);              // S^WS | '(:' | 'position'
      break;
    default:
      lk = l1;
    }
    if (lk == 111190)               // 'at' 'position'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(86);             // 'at'
          lookahead1W(71);          // S^WS | '(:' | 'position'
          consumeT(217);            // 'position'
          lookahead1W(276);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
          try_ExprSingle();
          memoize(9, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(9, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(86);                 // 'at'
      lookahead1W(71);              // S^WS | '(:' | 'position'
      consumeT(217);                // 'position'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_JSONRenameExpr()
  {
    eventHandler.startNonterminal("JSONRenameExpr", e0);
    consume(224);                   // 'rename'
    lookahead1W(58);                // S^WS | '(:' | 'json'
    consume(171);                   // 'json'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | '``[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    consume(84);                    // 'as'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONRenameExpr", e0);
  }

  function try_JSONRenameExpr()
  {
    consumeT(224);                  // 'rename'
    lookahead1W(58);                // S^WS | '(:' | 'json'
    consumeT(171);                  // 'json'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | '``[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_PostfixExpr();
    consumeT(84);                   // 'as'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONReplaceExpr()
  {
    eventHandler.startNonterminal("JSONReplaceExpr", e0);
    consume(225);                   // 'replace'
    lookahead1W(58);                // S^WS | '(:' | 'json'
    consume(171);                   // 'json'
    lookahead1W(84);                // S^WS | '(:' | 'value'
    consume(267);                   // 'value'
    lookahead1W(66);                // S^WS | '(:' | 'of'
    consume(202);                   // 'of'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | '``[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    consume(276);                   // 'with'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONReplaceExpr", e0);
  }

  function try_JSONReplaceExpr()
  {
    consumeT(225);                  // 'replace'
    lookahead1W(58);                // S^WS | '(:' | 'json'
    consumeT(171);                  // 'json'
    lookahead1W(84);                // S^WS | '(:' | 'value'
    consumeT(267);                  // 'value'
    lookahead1W(66);                // S^WS | '(:' | 'of'
    consumeT(202);                  // 'of'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | '``[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_PostfixExpr();
    consumeT(276);                  // 'with'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONAppendExpr()
  {
    eventHandler.startNonterminal("JSONAppendExpr", e0);
    consume(82);                    // 'append'
    lookahead1W(58);                // S^WS | '(:' | 'json'
    consume(171);                   // 'json'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(168);                   // 'into'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONAppendExpr", e0);
  }

  function try_JSONAppendExpr()
  {
    consumeT(82);                   // 'append'
    lookahead1W(58);                // S^WS | '(:' | 'json'
    consumeT(171);                  // 'json'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(168);                  // 'into'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      consume(12);                  // PredefinedEntityRef
      break;
    case 24:                        // CharRef
      consume(24);                  // CharRef
      break;
    case 283:                       // '{{'
      consume(283);                 // '{{'
      break;
    case 290:                       // '}}'
      consume(290);                 // '}}'
      break;
    default:
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      consumeT(12);                 // PredefinedEntityRef
      break;
    case 24:                        // CharRef
      consumeT(24);                 // CharRef
      break;
    case 283:                       // '{{'
      consumeT(283);                // '{{'
      break;
    case 290:                       // '}}'
      consumeT(290);                // '}}'
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_ContentExpr()
  {
    eventHandler.startNonterminal("ContentExpr", e0);
    parse_StatementsAndExpr();
    eventHandler.endNonterminal("ContentExpr", e0);
  }

  function try_ContentExpr()
  {
    try_StatementsAndExpr();
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    consume(124);                   // 'document'
    lookahead1W(89);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    consumeT(124);                  // 'document'
    lookahead1W(89);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    consume(87);                    // 'attribute'
    lookahead1W(263);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      consume(282);                 // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(288);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      lookahead2W(281);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 147738)               // '{' '}'
    {
      lk = memoized(10, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(282);            // '{'
          lookahead1W(90);          // S^WS | '(:' | '}'
          consumeT(288);            // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(10, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      consume(282);                 // '{'
      lookahead1W(90);              // S^WS | '(:' | '}'
      consume(288);                 // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    consumeT(87);                   // 'attribute'
    lookahead1W(263);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      consumeT(282);                // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(288);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      lookahead2W(281);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 147738)               // '{' '}'
    {
      lk = memoized(10, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(282);            // '{'
          lookahead1W(90);          // S^WS | '(:' | '}'
          consumeT(288);            // '}'
          memoize(10, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(10, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(282);                // '{'
      lookahead1W(90);              // S^WS | '(:' | '}'
      consumeT(288);                // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    consume(222);                   // 'processing-instruction'
    lookahead1W(254);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      consume(282);                 // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(288);                 // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      lookahead2W(281);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 147738)               // '{' '}'
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(282);            // '{'
          lookahead1W(90);          // S^WS | '(:' | '}'
          consumeT(288);            // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(11, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      consume(282);                 // '{'
      lookahead1W(90);              // S^WS | '(:' | '}'
      consume(288);                 // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    consumeT(222);                  // 'processing-instruction'
    lookahead1W(254);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      consumeT(282);                // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(288);                // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      lookahead2W(281);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 147738)               // '{' '}'
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(282);            // '{'
          lookahead1W(90);          // S^WS | '(:' | '}'
          consumeT(288);            // '}'
          memoize(11, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(11, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(282);                // '{'
      lookahead1W(90);              // S^WS | '(:' | '}'
      consumeT(288);                // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    consume(101);                   // 'comment'
    lookahead1W(89);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    consumeT(101);                  // 'comment'
    lookahead1W(89);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    consume(250);                   // 'text'
    lookahead1W(89);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    consumeT(250);                  // 'text'
    lookahead1W(89);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_KeySpecifier()
  {
    eventHandler.startNonterminal("KeySpecifier", e0);
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consume(8);                   // IntegerLiteral
      break;
    case 35:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      parse_NCName();
    }
    eventHandler.endNonterminal("KeySpecifier", e0);
  }

  function try_KeySpecifier()
  {
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consumeT(8);                  // IntegerLiteral
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      try_NCName();
    }
  }

  function parse_ArrowFunctionSpecifier()
  {
    eventHandler.startNonterminal("ArrowFunctionSpecifier", e0);
    switch (l1)
    {
    case 32:                        // '$'
      parse_VarRef();
      break;
    case 35:                        // '('
      parse_ParenthesizedExpr();
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("ArrowFunctionSpecifier", e0);
  }

  function try_ArrowFunctionSpecifier()
  {
    switch (l1)
    {
    case 32:                        // '$'
      try_VarRef();
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    default:
      try_EQName();
    }
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 190:                       // 'namespace'
      lookahead2W(260);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
      break;
    case 222:                       // 'processing-instruction'
      lookahead2W(257);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
      break;
    case 282:                       // '{'
      lookahead2W(281);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 87:                        // 'attribute'
    case 126:                       // 'element'
      lookahead2W(264);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 101:                       // 'comment'
    case 184:                       // 'map'
    case 250:                       // 'text'
      lookahead2W(95);              // S^WS | '#' | '(:' | '{'
      break;
    case 83:                        // 'array'
    case 124:                       // 'document'
    case 208:                       // 'ordered'
    case 262:                       // 'unordered'
      lookahead2W(141);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // EQName^Token
    case 75:                        // 'after'
    case 77:                        // 'allowing'
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 80:                        // 'and'
    case 84:                        // 'as'
    case 85:                        // 'ascending'
    case 86:                        // 'at'
    case 88:                        // 'base-uri'
    case 89:                        // 'before'
    case 90:                        // 'boundary-space'
    case 91:                        // 'break'
    case 93:                        // 'case'
    case 94:                        // 'cast'
    case 95:                        // 'castable'
    case 96:                        // 'catch'
    case 98:                        // 'child'
    case 99:                        // 'collation'
    case 102:                       // 'constraint'
    case 103:                       // 'construction'
    case 106:                       // 'context'
    case 107:                       // 'continue'
    case 108:                       // 'copy'
    case 109:                       // 'copy-namespaces'
    case 110:                       // 'count'
    case 111:                       // 'decimal-format'
    case 113:                       // 'declare'
    case 114:                       // 'default'
    case 115:                       // 'delete'
    case 116:                       // 'descendant'
    case 117:                       // 'descendant-or-self'
    case 118:                       // 'descending'
    case 123:                       // 'div'
    case 127:                       // 'else'
    case 128:                       // 'empty'
    case 130:                       // 'encoding'
    case 131:                       // 'end'
    case 133:                       // 'eq'
    case 134:                       // 'every'
    case 136:                       // 'except'
    case 137:                       // 'exit'
    case 138:                       // 'external'
    case 139:                       // 'first'
    case 140:                       // 'following'
    case 141:                       // 'following-sibling'
    case 142:                       // 'for'
    case 146:                       // 'ft-option'
    case 151:                       // 'ge'
    case 153:                       // 'group'
    case 155:                       // 'gt'
    case 156:                       // 'idiv'
    case 158:                       // 'import'
    case 159:                       // 'in'
    case 160:                       // 'index'
    case 164:                       // 'insert'
    case 165:                       // 'instance'
    case 166:                       // 'integrity'
    case 167:                       // 'intersect'
    case 168:                       // 'into'
    case 169:                       // 'is'
    case 172:                       // 'json-item'
    case 175:                       // 'last'
    case 176:                       // 'lax'
    case 177:                       // 'le'
    case 179:                       // 'let'
    case 181:                       // 'loop'
    case 183:                       // 'lt'
    case 186:                       // 'mod'
    case 187:                       // 'modify'
    case 188:                       // 'module'
    case 192:                       // 'ne'
    case 198:                       // 'nodes'
    case 200:                       // 'object'
    case 204:                       // 'only'
    case 205:                       // 'option'
    case 206:                       // 'or'
    case 207:                       // 'order'
    case 209:                       // 'ordering'
    case 212:                       // 'parent'
    case 218:                       // 'preceding'
    case 219:                       // 'preceding-sibling'
    case 224:                       // 'rename'
    case 225:                       // 'replace'
    case 226:                       // 'return'
    case 227:                       // 'returning'
    case 228:                       // 'revalidation'
    case 230:                       // 'satisfies'
    case 231:                       // 'schema'
    case 234:                       // 'score'
    case 235:                       // 'self'
    case 240:                       // 'sliding'
    case 241:                       // 'some'
    case 242:                       // 'stable'
    case 243:                       // 'start'
    case 246:                       // 'strict'
    case 254:                       // 'to'
    case 255:                       // 'treat'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
    case 280:                       // 'xquery'
      lookahead2W(94);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 2842                  // '{' Wildcard
     || lk == 3354                  // '{' EQName^Token
     || lk == 4378                  // '{' IntegerLiteral
     || lk == 4890                  // '{' DecimalLiteral
     || lk == 5402                  // '{' DoubleLiteral
     || lk == 5914                  // '{' StringLiteral
     || lk == 16666                 // '{' '$'
     || lk == 17178                 // '{' '%'
     || lk == 18202                 // '{' '('
     || lk == 18714                 // '{' '(#'
     || lk == 21274                 // '{' '+'
     || lk == 22298                 // '{' '-'
     || lk == 23322                 // '{' '.'
     || lk == 23834                 // '{' '..'
     || lk == 24346                 // '{' '/'
     || lk == 24858                 // '{' '//'
     || lk == 28442                 // '{' '<'
     || lk == 28954                 // '{' '<!--'
     || lk == 31002                 // '{' '<?'
     || lk == 34074                 // '{' '?'
     || lk == 35098                 // '{' '@'
     || lk == 36122                 // '{' '['
     || lk == 37658                 // '{' '``['
     || lk == 38682                 // '{' 'after'
     || lk == 39706                 // '{' 'allowing'
     || lk == 40218                 // '{' 'ancestor'
     || lk == 40730                 // '{' 'ancestor-or-self'
     || lk == 41242                 // '{' 'and'
     || lk == 42266                 // '{' 'append'
     || lk == 42778                 // '{' 'array'
     || lk == 43290                 // '{' 'as'
     || lk == 43802                 // '{' 'ascending'
     || lk == 44314                 // '{' 'at'
     || lk == 44826                 // '{' 'attribute'
     || lk == 45338                 // '{' 'base-uri'
     || lk == 45850                 // '{' 'before'
     || lk == 46362                 // '{' 'boundary-space'
     || lk == 46874                 // '{' 'break'
     || lk == 47898                 // '{' 'case'
     || lk == 48410                 // '{' 'cast'
     || lk == 48922                 // '{' 'castable'
     || lk == 49434                 // '{' 'catch'
     || lk == 50458                 // '{' 'child'
     || lk == 50970                 // '{' 'collation'
     || lk == 51994                 // '{' 'comment'
     || lk == 52506                 // '{' 'constraint'
     || lk == 53018                 // '{' 'construction'
     || lk == 54554                 // '{' 'context'
     || lk == 55066                 // '{' 'continue'
     || lk == 55578                 // '{' 'copy'
     || lk == 56090                 // '{' 'copy-namespaces'
     || lk == 56602                 // '{' 'count'
     || lk == 57114                 // '{' 'decimal-format'
     || lk == 58138                 // '{' 'declare'
     || lk == 58650                 // '{' 'default'
     || lk == 59162                 // '{' 'delete'
     || lk == 59674                 // '{' 'descendant'
     || lk == 60186                 // '{' 'descendant-or-self'
     || lk == 60698                 // '{' 'descending'
     || lk == 63258                 // '{' 'div'
     || lk == 63770                 // '{' 'document'
     || lk == 64282                 // '{' 'document-node'
     || lk == 64794                 // '{' 'element'
     || lk == 65306                 // '{' 'else'
     || lk == 65818                 // '{' 'empty'
     || lk == 66330                 // '{' 'empty-sequence'
     || lk == 66842                 // '{' 'encoding'
     || lk == 67354                 // '{' 'end'
     || lk == 68378                 // '{' 'eq'
     || lk == 68890                 // '{' 'every'
     || lk == 69914                 // '{' 'except'
     || lk == 70426                 // '{' 'exit'
     || lk == 70938                 // '{' 'external'
     || lk == 71450                 // '{' 'first'
     || lk == 71962                 // '{' 'following'
     || lk == 72474                 // '{' 'following-sibling'
     || lk == 72986                 // '{' 'for'
     || lk == 75034                 // '{' 'ft-option'
     || lk == 77082                 // '{' 'function'
     || lk == 77594                 // '{' 'ge'
     || lk == 78618                 // '{' 'group'
     || lk == 79642                 // '{' 'gt'
     || lk == 80154                 // '{' 'idiv'
     || lk == 80666                 // '{' 'if'
     || lk == 81178                 // '{' 'import'
     || lk == 81690                 // '{' 'in'
     || lk == 82202                 // '{' 'index'
     || lk == 84250                 // '{' 'insert'
     || lk == 84762                 // '{' 'instance'
     || lk == 85274                 // '{' 'integrity'
     || lk == 85786                 // '{' 'intersect'
     || lk == 86298                 // '{' 'into'
     || lk == 86810                 // '{' 'is'
     || lk == 87322                 // '{' 'item'
     || lk == 88346                 // '{' 'json-item'
     || lk == 89882                 // '{' 'last'
     || lk == 90394                 // '{' 'lax'
     || lk == 90906                 // '{' 'le'
     || lk == 91930                 // '{' 'let'
     || lk == 92954                 // '{' 'loop'
     || lk == 93978                 // '{' 'lt'
     || lk == 94490                 // '{' 'map'
     || lk == 95514                 // '{' 'mod'
     || lk == 96026                 // '{' 'modify'
     || lk == 96538                 // '{' 'module'
     || lk == 97562                 // '{' 'namespace'
     || lk == 98074                 // '{' 'namespace-node'
     || lk == 98586                 // '{' 'ne'
     || lk == 101146                // '{' 'node'
     || lk == 101658                // '{' 'nodes'
     || lk == 102682                // '{' 'object'
     || lk == 104730                // '{' 'only'
     || lk == 105242                // '{' 'option'
     || lk == 105754                // '{' 'or'
     || lk == 106266                // '{' 'order'
     || lk == 106778                // '{' 'ordered'
     || lk == 107290                // '{' 'ordering'
     || lk == 108826                // '{' 'parent'
     || lk == 111898                // '{' 'preceding'
     || lk == 112410                // '{' 'preceding-sibling'
     || lk == 113946                // '{' 'processing-instruction'
     || lk == 114970                // '{' 'rename'
     || lk == 115482                // '{' 'replace'
     || lk == 115994                // '{' 'return'
     || lk == 116506                // '{' 'returning'
     || lk == 117018                // '{' 'revalidation'
     || lk == 118042                // '{' 'satisfies'
     || lk == 118554                // '{' 'schema'
     || lk == 119066                // '{' 'schema-attribute'
     || lk == 119578                // '{' 'schema-element'
     || lk == 120090                // '{' 'score'
     || lk == 120602                // '{' 'self'
     || lk == 123162                // '{' 'sliding'
     || lk == 123674                // '{' 'some'
     || lk == 124186                // '{' 'stable'
     || lk == 124698                // '{' 'start'
     || lk == 126234                // '{' 'strict'
     || lk == 127770                // '{' 'switch'
     || lk == 128282                // '{' 'text'
     || lk == 130330                // '{' 'to'
     || lk == 130842                // '{' 'treat'
     || lk == 131354                // '{' 'try'
     || lk == 131866                // '{' 'tumbling'
     || lk == 132378                // '{' 'type'
     || lk == 132890                // '{' 'typeswitch'
     || lk == 133402                // '{' 'union'
     || lk == 134426                // '{' 'unordered'
     || lk == 134938                // '{' 'updating'
     || lk == 136474                // '{' 'validate'
     || lk == 136986                // '{' 'value'
     || lk == 137498                // '{' 'variable'
     || lk == 138010                // '{' 'version'
     || lk == 139546                // '{' 'where'
     || lk == 140058                // '{' 'while'
     || lk == 141594                // '{' 'with'
     || lk == 143642                // '{' 'xquery'
     || lk == 144666                // '{' '{'
     || lk == 145690                // '{' '{|'
     || lk == 147738)               // '{' '}'
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          lk = -10;
        }
        catch (p10A)
        {
          lk = -11;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(12, e0, lk);
      }
    }
    switch (lk)
    {
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
      parse_Literal();
      break;
    case 32:                        // '$'
      parse_VarRef();
      break;
    case 35:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 45:                        // '.'
      parse_ContextItemExpr();
      break;
    case 17926:                     // EQName^Token '('
    case 17995:                     // 'after' '('
    case 17997:                     // 'allowing' '('
    case 17998:                     // 'ancestor' '('
    case 17999:                     // 'ancestor-or-self' '('
    case 18000:                     // 'and' '('
    case 18003:                     // 'array' '('
    case 18004:                     // 'as' '('
    case 18005:                     // 'ascending' '('
    case 18006:                     // 'at' '('
    case 18008:                     // 'base-uri' '('
    case 18009:                     // 'before' '('
    case 18010:                     // 'boundary-space' '('
    case 18011:                     // 'break' '('
    case 18013:                     // 'case' '('
    case 18014:                     // 'cast' '('
    case 18015:                     // 'castable' '('
    case 18016:                     // 'catch' '('
    case 18018:                     // 'child' '('
    case 18019:                     // 'collation' '('
    case 18022:                     // 'constraint' '('
    case 18023:                     // 'construction' '('
    case 18026:                     // 'context' '('
    case 18027:                     // 'continue' '('
    case 18028:                     // 'copy' '('
    case 18029:                     // 'copy-namespaces' '('
    case 18030:                     // 'count' '('
    case 18031:                     // 'decimal-format' '('
    case 18033:                     // 'declare' '('
    case 18034:                     // 'default' '('
    case 18035:                     // 'delete' '('
    case 18036:                     // 'descendant' '('
    case 18037:                     // 'descendant-or-self' '('
    case 18038:                     // 'descending' '('
    case 18043:                     // 'div' '('
    case 18044:                     // 'document' '('
    case 18047:                     // 'else' '('
    case 18048:                     // 'empty' '('
    case 18050:                     // 'encoding' '('
    case 18051:                     // 'end' '('
    case 18053:                     // 'eq' '('
    case 18054:                     // 'every' '('
    case 18056:                     // 'except' '('
    case 18057:                     // 'exit' '('
    case 18058:                     // 'external' '('
    case 18059:                     // 'first' '('
    case 18060:                     // 'following' '('
    case 18061:                     // 'following-sibling' '('
    case 18062:                     // 'for' '('
    case 18066:                     // 'ft-option' '('
    case 18071:                     // 'ge' '('
    case 18073:                     // 'group' '('
    case 18075:                     // 'gt' '('
    case 18076:                     // 'idiv' '('
    case 18078:                     // 'import' '('
    case 18079:                     // 'in' '('
    case 18080:                     // 'index' '('
    case 18084:                     // 'insert' '('
    case 18085:                     // 'instance' '('
    case 18086:                     // 'integrity' '('
    case 18087:                     // 'intersect' '('
    case 18088:                     // 'into' '('
    case 18089:                     // 'is' '('
    case 18092:                     // 'json-item' '('
    case 18095:                     // 'last' '('
    case 18096:                     // 'lax' '('
    case 18097:                     // 'le' '('
    case 18099:                     // 'let' '('
    case 18101:                     // 'loop' '('
    case 18103:                     // 'lt' '('
    case 18106:                     // 'mod' '('
    case 18107:                     // 'modify' '('
    case 18108:                     // 'module' '('
    case 18110:                     // 'namespace' '('
    case 18112:                     // 'ne' '('
    case 18118:                     // 'nodes' '('
    case 18120:                     // 'object' '('
    case 18124:                     // 'only' '('
    case 18125:                     // 'option' '('
    case 18126:                     // 'or' '('
    case 18127:                     // 'order' '('
    case 18128:                     // 'ordered' '('
    case 18129:                     // 'ordering' '('
    case 18132:                     // 'parent' '('
    case 18138:                     // 'preceding' '('
    case 18139:                     // 'preceding-sibling' '('
    case 18144:                     // 'rename' '('
    case 18145:                     // 'replace' '('
    case 18146:                     // 'return' '('
    case 18147:                     // 'returning' '('
    case 18148:                     // 'revalidation' '('
    case 18150:                     // 'satisfies' '('
    case 18151:                     // 'schema' '('
    case 18154:                     // 'score' '('
    case 18155:                     // 'self' '('
    case 18160:                     // 'sliding' '('
    case 18161:                     // 'some' '('
    case 18162:                     // 'stable' '('
    case 18163:                     // 'start' '('
    case 18166:                     // 'strict' '('
    case 18174:                     // 'to' '('
    case 18175:                     // 'treat' '('
    case 18176:                     // 'try' '('
    case 18177:                     // 'tumbling' '('
    case 18178:                     // 'type' '('
    case 18180:                     // 'union' '('
    case 18182:                     // 'unordered' '('
    case 18183:                     // 'updating' '('
    case 18186:                     // 'validate' '('
    case 18187:                     // 'value' '('
    case 18188:                     // 'variable' '('
    case 18189:                     // 'version' '('
    case 18192:                     // 'where' '('
    case 18193:                     // 'while' '('
    case 18196:                     // 'with' '('
    case 18200:                     // 'xquery' '('
      parse_FunctionCall();
      break;
    case 144592:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 144646:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 33:                        // '%'
    case 125:                       // 'document-node'
    case 129:                       // 'empty-sequence'
    case 150:                       // 'function'
    case 157:                       // 'if'
    case 170:                       // 'item'
    case 191:                       // 'namespace-node'
    case 197:                       // 'node'
    case 232:                       // 'schema-attribute'
    case 233:                       // 'schema-element'
    case 249:                       // 'switch'
    case 259:                       // 'typeswitch'
    case 15366:                     // EQName^Token '#'
    case 15435:                     // 'after' '#'
    case 15437:                     // 'allowing' '#'
    case 15438:                     // 'ancestor' '#'
    case 15439:                     // 'ancestor-or-self' '#'
    case 15440:                     // 'and' '#'
    case 15443:                     // 'array' '#'
    case 15444:                     // 'as' '#'
    case 15445:                     // 'ascending' '#'
    case 15446:                     // 'at' '#'
    case 15447:                     // 'attribute' '#'
    case 15448:                     // 'base-uri' '#'
    case 15449:                     // 'before' '#'
    case 15450:                     // 'boundary-space' '#'
    case 15451:                     // 'break' '#'
    case 15453:                     // 'case' '#'
    case 15454:                     // 'cast' '#'
    case 15455:                     // 'castable' '#'
    case 15456:                     // 'catch' '#'
    case 15458:                     // 'child' '#'
    case 15459:                     // 'collation' '#'
    case 15461:                     // 'comment' '#'
    case 15462:                     // 'constraint' '#'
    case 15463:                     // 'construction' '#'
    case 15466:                     // 'context' '#'
    case 15467:                     // 'continue' '#'
    case 15468:                     // 'copy' '#'
    case 15469:                     // 'copy-namespaces' '#'
    case 15470:                     // 'count' '#'
    case 15471:                     // 'decimal-format' '#'
    case 15473:                     // 'declare' '#'
    case 15474:                     // 'default' '#'
    case 15475:                     // 'delete' '#'
    case 15476:                     // 'descendant' '#'
    case 15477:                     // 'descendant-or-self' '#'
    case 15478:                     // 'descending' '#'
    case 15483:                     // 'div' '#'
    case 15484:                     // 'document' '#'
    case 15486:                     // 'element' '#'
    case 15487:                     // 'else' '#'
    case 15488:                     // 'empty' '#'
    case 15490:                     // 'encoding' '#'
    case 15491:                     // 'end' '#'
    case 15493:                     // 'eq' '#'
    case 15494:                     // 'every' '#'
    case 15496:                     // 'except' '#'
    case 15497:                     // 'exit' '#'
    case 15498:                     // 'external' '#'
    case 15499:                     // 'first' '#'
    case 15500:                     // 'following' '#'
    case 15501:                     // 'following-sibling' '#'
    case 15502:                     // 'for' '#'
    case 15506:                     // 'ft-option' '#'
    case 15511:                     // 'ge' '#'
    case 15513:                     // 'group' '#'
    case 15515:                     // 'gt' '#'
    case 15516:                     // 'idiv' '#'
    case 15518:                     // 'import' '#'
    case 15519:                     // 'in' '#'
    case 15520:                     // 'index' '#'
    case 15524:                     // 'insert' '#'
    case 15525:                     // 'instance' '#'
    case 15526:                     // 'integrity' '#'
    case 15527:                     // 'intersect' '#'
    case 15528:                     // 'into' '#'
    case 15529:                     // 'is' '#'
    case 15532:                     // 'json-item' '#'
    case 15535:                     // 'last' '#'
    case 15536:                     // 'lax' '#'
    case 15537:                     // 'le' '#'
    case 15539:                     // 'let' '#'
    case 15541:                     // 'loop' '#'
    case 15543:                     // 'lt' '#'
    case 15544:                     // 'map' '#'
    case 15546:                     // 'mod' '#'
    case 15547:                     // 'modify' '#'
    case 15548:                     // 'module' '#'
    case 15550:                     // 'namespace' '#'
    case 15552:                     // 'ne' '#'
    case 15558:                     // 'nodes' '#'
    case 15560:                     // 'object' '#'
    case 15564:                     // 'only' '#'
    case 15565:                     // 'option' '#'
    case 15566:                     // 'or' '#'
    case 15567:                     // 'order' '#'
    case 15568:                     // 'ordered' '#'
    case 15569:                     // 'ordering' '#'
    case 15572:                     // 'parent' '#'
    case 15578:                     // 'preceding' '#'
    case 15579:                     // 'preceding-sibling' '#'
    case 15582:                     // 'processing-instruction' '#'
    case 15584:                     // 'rename' '#'
    case 15585:                     // 'replace' '#'
    case 15586:                     // 'return' '#'
    case 15587:                     // 'returning' '#'
    case 15588:                     // 'revalidation' '#'
    case 15590:                     // 'satisfies' '#'
    case 15591:                     // 'schema' '#'
    case 15594:                     // 'score' '#'
    case 15595:                     // 'self' '#'
    case 15600:                     // 'sliding' '#'
    case 15601:                     // 'some' '#'
    case 15602:                     // 'stable' '#'
    case 15603:                     // 'start' '#'
    case 15606:                     // 'strict' '#'
    case 15610:                     // 'text' '#'
    case 15614:                     // 'to' '#'
    case 15615:                     // 'treat' '#'
    case 15616:                     // 'try' '#'
    case 15617:                     // 'tumbling' '#'
    case 15618:                     // 'type' '#'
    case 15620:                     // 'union' '#'
    case 15622:                     // 'unordered' '#'
    case 15623:                     // 'updating' '#'
    case 15626:                     // 'validate' '#'
    case 15627:                     // 'value' '#'
    case 15628:                     // 'variable' '#'
    case 15629:                     // 'version' '#'
    case 15632:                     // 'where' '#'
    case 15633:                     // 'while' '#'
    case 15636:                     // 'with' '#'
    case 15640:                     // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case -10:
      parse_BlockExpr();
      break;
    case -11:
      parse_ObjectConstructor();
      break;
    case 144568:                    // 'map' '{'
      parse_MapConstructor();
      break;
    case 70:                        // '['
    case 144467:                    // 'array' '{'
      parse_ArrayConstructor();
      break;
    case 73:                        // '``['
      parse_StringConstructor();
      break;
    case 66:                        // '?'
      parse_UnaryLookup();
      break;
    case 284:                       // '{|'
      parse_JSONSimpleObjectUnion();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 190:                       // 'namespace'
      lookahead2W(260);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
      break;
    case 222:                       // 'processing-instruction'
      lookahead2W(257);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
      break;
    case 282:                       // '{'
      lookahead2W(281);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 87:                        // 'attribute'
    case 126:                       // 'element'
      lookahead2W(264);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 101:                       // 'comment'
    case 184:                       // 'map'
    case 250:                       // 'text'
      lookahead2W(95);              // S^WS | '#' | '(:' | '{'
      break;
    case 83:                        // 'array'
    case 124:                       // 'document'
    case 208:                       // 'ordered'
    case 262:                       // 'unordered'
      lookahead2W(141);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // EQName^Token
    case 75:                        // 'after'
    case 77:                        // 'allowing'
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 80:                        // 'and'
    case 84:                        // 'as'
    case 85:                        // 'ascending'
    case 86:                        // 'at'
    case 88:                        // 'base-uri'
    case 89:                        // 'before'
    case 90:                        // 'boundary-space'
    case 91:                        // 'break'
    case 93:                        // 'case'
    case 94:                        // 'cast'
    case 95:                        // 'castable'
    case 96:                        // 'catch'
    case 98:                        // 'child'
    case 99:                        // 'collation'
    case 102:                       // 'constraint'
    case 103:                       // 'construction'
    case 106:                       // 'context'
    case 107:                       // 'continue'
    case 108:                       // 'copy'
    case 109:                       // 'copy-namespaces'
    case 110:                       // 'count'
    case 111:                       // 'decimal-format'
    case 113:                       // 'declare'
    case 114:                       // 'default'
    case 115:                       // 'delete'
    case 116:                       // 'descendant'
    case 117:                       // 'descendant-or-self'
    case 118:                       // 'descending'
    case 123:                       // 'div'
    case 127:                       // 'else'
    case 128:                       // 'empty'
    case 130:                       // 'encoding'
    case 131:                       // 'end'
    case 133:                       // 'eq'
    case 134:                       // 'every'
    case 136:                       // 'except'
    case 137:                       // 'exit'
    case 138:                       // 'external'
    case 139:                       // 'first'
    case 140:                       // 'following'
    case 141:                       // 'following-sibling'
    case 142:                       // 'for'
    case 146:                       // 'ft-option'
    case 151:                       // 'ge'
    case 153:                       // 'group'
    case 155:                       // 'gt'
    case 156:                       // 'idiv'
    case 158:                       // 'import'
    case 159:                       // 'in'
    case 160:                       // 'index'
    case 164:                       // 'insert'
    case 165:                       // 'instance'
    case 166:                       // 'integrity'
    case 167:                       // 'intersect'
    case 168:                       // 'into'
    case 169:                       // 'is'
    case 172:                       // 'json-item'
    case 175:                       // 'last'
    case 176:                       // 'lax'
    case 177:                       // 'le'
    case 179:                       // 'let'
    case 181:                       // 'loop'
    case 183:                       // 'lt'
    case 186:                       // 'mod'
    case 187:                       // 'modify'
    case 188:                       // 'module'
    case 192:                       // 'ne'
    case 198:                       // 'nodes'
    case 200:                       // 'object'
    case 204:                       // 'only'
    case 205:                       // 'option'
    case 206:                       // 'or'
    case 207:                       // 'order'
    case 209:                       // 'ordering'
    case 212:                       // 'parent'
    case 218:                       // 'preceding'
    case 219:                       // 'preceding-sibling'
    case 224:                       // 'rename'
    case 225:                       // 'replace'
    case 226:                       // 'return'
    case 227:                       // 'returning'
    case 228:                       // 'revalidation'
    case 230:                       // 'satisfies'
    case 231:                       // 'schema'
    case 234:                       // 'score'
    case 235:                       // 'self'
    case 240:                       // 'sliding'
    case 241:                       // 'some'
    case 242:                       // 'stable'
    case 243:                       // 'start'
    case 246:                       // 'strict'
    case 254:                       // 'to'
    case 255:                       // 'treat'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
    case 280:                       // 'xquery'
      lookahead2W(94);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 2842                  // '{' Wildcard
     || lk == 3354                  // '{' EQName^Token
     || lk == 4378                  // '{' IntegerLiteral
     || lk == 4890                  // '{' DecimalLiteral
     || lk == 5402                  // '{' DoubleLiteral
     || lk == 5914                  // '{' StringLiteral
     || lk == 16666                 // '{' '$'
     || lk == 17178                 // '{' '%'
     || lk == 18202                 // '{' '('
     || lk == 18714                 // '{' '(#'
     || lk == 21274                 // '{' '+'
     || lk == 22298                 // '{' '-'
     || lk == 23322                 // '{' '.'
     || lk == 23834                 // '{' '..'
     || lk == 24346                 // '{' '/'
     || lk == 24858                 // '{' '//'
     || lk == 28442                 // '{' '<'
     || lk == 28954                 // '{' '<!--'
     || lk == 31002                 // '{' '<?'
     || lk == 34074                 // '{' '?'
     || lk == 35098                 // '{' '@'
     || lk == 36122                 // '{' '['
     || lk == 37658                 // '{' '``['
     || lk == 38682                 // '{' 'after'
     || lk == 39706                 // '{' 'allowing'
     || lk == 40218                 // '{' 'ancestor'
     || lk == 40730                 // '{' 'ancestor-or-self'
     || lk == 41242                 // '{' 'and'
     || lk == 42266                 // '{' 'append'
     || lk == 42778                 // '{' 'array'
     || lk == 43290                 // '{' 'as'
     || lk == 43802                 // '{' 'ascending'
     || lk == 44314                 // '{' 'at'
     || lk == 44826                 // '{' 'attribute'
     || lk == 45338                 // '{' 'base-uri'
     || lk == 45850                 // '{' 'before'
     || lk == 46362                 // '{' 'boundary-space'
     || lk == 46874                 // '{' 'break'
     || lk == 47898                 // '{' 'case'
     || lk == 48410                 // '{' 'cast'
     || lk == 48922                 // '{' 'castable'
     || lk == 49434                 // '{' 'catch'
     || lk == 50458                 // '{' 'child'
     || lk == 50970                 // '{' 'collation'
     || lk == 51994                 // '{' 'comment'
     || lk == 52506                 // '{' 'constraint'
     || lk == 53018                 // '{' 'construction'
     || lk == 54554                 // '{' 'context'
     || lk == 55066                 // '{' 'continue'
     || lk == 55578                 // '{' 'copy'
     || lk == 56090                 // '{' 'copy-namespaces'
     || lk == 56602                 // '{' 'count'
     || lk == 57114                 // '{' 'decimal-format'
     || lk == 58138                 // '{' 'declare'
     || lk == 58650                 // '{' 'default'
     || lk == 59162                 // '{' 'delete'
     || lk == 59674                 // '{' 'descendant'
     || lk == 60186                 // '{' 'descendant-or-self'
     || lk == 60698                 // '{' 'descending'
     || lk == 63258                 // '{' 'div'
     || lk == 63770                 // '{' 'document'
     || lk == 64282                 // '{' 'document-node'
     || lk == 64794                 // '{' 'element'
     || lk == 65306                 // '{' 'else'
     || lk == 65818                 // '{' 'empty'
     || lk == 66330                 // '{' 'empty-sequence'
     || lk == 66842                 // '{' 'encoding'
     || lk == 67354                 // '{' 'end'
     || lk == 68378                 // '{' 'eq'
     || lk == 68890                 // '{' 'every'
     || lk == 69914                 // '{' 'except'
     || lk == 70426                 // '{' 'exit'
     || lk == 70938                 // '{' 'external'
     || lk == 71450                 // '{' 'first'
     || lk == 71962                 // '{' 'following'
     || lk == 72474                 // '{' 'following-sibling'
     || lk == 72986                 // '{' 'for'
     || lk == 75034                 // '{' 'ft-option'
     || lk == 77082                 // '{' 'function'
     || lk == 77594                 // '{' 'ge'
     || lk == 78618                 // '{' 'group'
     || lk == 79642                 // '{' 'gt'
     || lk == 80154                 // '{' 'idiv'
     || lk == 80666                 // '{' 'if'
     || lk == 81178                 // '{' 'import'
     || lk == 81690                 // '{' 'in'
     || lk == 82202                 // '{' 'index'
     || lk == 84250                 // '{' 'insert'
     || lk == 84762                 // '{' 'instance'
     || lk == 85274                 // '{' 'integrity'
     || lk == 85786                 // '{' 'intersect'
     || lk == 86298                 // '{' 'into'
     || lk == 86810                 // '{' 'is'
     || lk == 87322                 // '{' 'item'
     || lk == 88346                 // '{' 'json-item'
     || lk == 89882                 // '{' 'last'
     || lk == 90394                 // '{' 'lax'
     || lk == 90906                 // '{' 'le'
     || lk == 91930                 // '{' 'let'
     || lk == 92954                 // '{' 'loop'
     || lk == 93978                 // '{' 'lt'
     || lk == 94490                 // '{' 'map'
     || lk == 95514                 // '{' 'mod'
     || lk == 96026                 // '{' 'modify'
     || lk == 96538                 // '{' 'module'
     || lk == 97562                 // '{' 'namespace'
     || lk == 98074                 // '{' 'namespace-node'
     || lk == 98586                 // '{' 'ne'
     || lk == 101146                // '{' 'node'
     || lk == 101658                // '{' 'nodes'
     || lk == 102682                // '{' 'object'
     || lk == 104730                // '{' 'only'
     || lk == 105242                // '{' 'option'
     || lk == 105754                // '{' 'or'
     || lk == 106266                // '{' 'order'
     || lk == 106778                // '{' 'ordered'
     || lk == 107290                // '{' 'ordering'
     || lk == 108826                // '{' 'parent'
     || lk == 111898                // '{' 'preceding'
     || lk == 112410                // '{' 'preceding-sibling'
     || lk == 113946                // '{' 'processing-instruction'
     || lk == 114970                // '{' 'rename'
     || lk == 115482                // '{' 'replace'
     || lk == 115994                // '{' 'return'
     || lk == 116506                // '{' 'returning'
     || lk == 117018                // '{' 'revalidation'
     || lk == 118042                // '{' 'satisfies'
     || lk == 118554                // '{' 'schema'
     || lk == 119066                // '{' 'schema-attribute'
     || lk == 119578                // '{' 'schema-element'
     || lk == 120090                // '{' 'score'
     || lk == 120602                // '{' 'self'
     || lk == 123162                // '{' 'sliding'
     || lk == 123674                // '{' 'some'
     || lk == 124186                // '{' 'stable'
     || lk == 124698                // '{' 'start'
     || lk == 126234                // '{' 'strict'
     || lk == 127770                // '{' 'switch'
     || lk == 128282                // '{' 'text'
     || lk == 130330                // '{' 'to'
     || lk == 130842                // '{' 'treat'
     || lk == 131354                // '{' 'try'
     || lk == 131866                // '{' 'tumbling'
     || lk == 132378                // '{' 'type'
     || lk == 132890                // '{' 'typeswitch'
     || lk == 133402                // '{' 'union'
     || lk == 134426                // '{' 'unordered'
     || lk == 134938                // '{' 'updating'
     || lk == 136474                // '{' 'validate'
     || lk == 136986                // '{' 'value'
     || lk == 137498                // '{' 'variable'
     || lk == 138010                // '{' 'version'
     || lk == 139546                // '{' 'where'
     || lk == 140058                // '{' 'while'
     || lk == 141594                // '{' 'with'
     || lk == 143642                // '{' 'xquery'
     || lk == 144666                // '{' '{'
     || lk == 145690                // '{' '{|'
     || lk == 147738)               // '{' '}'
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          memoize(12, e0A, -10);
          lk = -17;
        }
        catch (p10A)
        {
          lk = -11;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(12, e0A, -11);
        }
      }
    }
    switch (lk)
    {
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
      try_Literal();
      break;
    case 32:                        // '$'
      try_VarRef();
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    case 45:                        // '.'
      try_ContextItemExpr();
      break;
    case 17926:                     // EQName^Token '('
    case 17995:                     // 'after' '('
    case 17997:                     // 'allowing' '('
    case 17998:                     // 'ancestor' '('
    case 17999:                     // 'ancestor-or-self' '('
    case 18000:                     // 'and' '('
    case 18003:                     // 'array' '('
    case 18004:                     // 'as' '('
    case 18005:                     // 'ascending' '('
    case 18006:                     // 'at' '('
    case 18008:                     // 'base-uri' '('
    case 18009:                     // 'before' '('
    case 18010:                     // 'boundary-space' '('
    case 18011:                     // 'break' '('
    case 18013:                     // 'case' '('
    case 18014:                     // 'cast' '('
    case 18015:                     // 'castable' '('
    case 18016:                     // 'catch' '('
    case 18018:                     // 'child' '('
    case 18019:                     // 'collation' '('
    case 18022:                     // 'constraint' '('
    case 18023:                     // 'construction' '('
    case 18026:                     // 'context' '('
    case 18027:                     // 'continue' '('
    case 18028:                     // 'copy' '('
    case 18029:                     // 'copy-namespaces' '('
    case 18030:                     // 'count' '('
    case 18031:                     // 'decimal-format' '('
    case 18033:                     // 'declare' '('
    case 18034:                     // 'default' '('
    case 18035:                     // 'delete' '('
    case 18036:                     // 'descendant' '('
    case 18037:                     // 'descendant-or-self' '('
    case 18038:                     // 'descending' '('
    case 18043:                     // 'div' '('
    case 18044:                     // 'document' '('
    case 18047:                     // 'else' '('
    case 18048:                     // 'empty' '('
    case 18050:                     // 'encoding' '('
    case 18051:                     // 'end' '('
    case 18053:                     // 'eq' '('
    case 18054:                     // 'every' '('
    case 18056:                     // 'except' '('
    case 18057:                     // 'exit' '('
    case 18058:                     // 'external' '('
    case 18059:                     // 'first' '('
    case 18060:                     // 'following' '('
    case 18061:                     // 'following-sibling' '('
    case 18062:                     // 'for' '('
    case 18066:                     // 'ft-option' '('
    case 18071:                     // 'ge' '('
    case 18073:                     // 'group' '('
    case 18075:                     // 'gt' '('
    case 18076:                     // 'idiv' '('
    case 18078:                     // 'import' '('
    case 18079:                     // 'in' '('
    case 18080:                     // 'index' '('
    case 18084:                     // 'insert' '('
    case 18085:                     // 'instance' '('
    case 18086:                     // 'integrity' '('
    case 18087:                     // 'intersect' '('
    case 18088:                     // 'into' '('
    case 18089:                     // 'is' '('
    case 18092:                     // 'json-item' '('
    case 18095:                     // 'last' '('
    case 18096:                     // 'lax' '('
    case 18097:                     // 'le' '('
    case 18099:                     // 'let' '('
    case 18101:                     // 'loop' '('
    case 18103:                     // 'lt' '('
    case 18106:                     // 'mod' '('
    case 18107:                     // 'modify' '('
    case 18108:                     // 'module' '('
    case 18110:                     // 'namespace' '('
    case 18112:                     // 'ne' '('
    case 18118:                     // 'nodes' '('
    case 18120:                     // 'object' '('
    case 18124:                     // 'only' '('
    case 18125:                     // 'option' '('
    case 18126:                     // 'or' '('
    case 18127:                     // 'order' '('
    case 18128:                     // 'ordered' '('
    case 18129:                     // 'ordering' '('
    case 18132:                     // 'parent' '('
    case 18138:                     // 'preceding' '('
    case 18139:                     // 'preceding-sibling' '('
    case 18144:                     // 'rename' '('
    case 18145:                     // 'replace' '('
    case 18146:                     // 'return' '('
    case 18147:                     // 'returning' '('
    case 18148:                     // 'revalidation' '('
    case 18150:                     // 'satisfies' '('
    case 18151:                     // 'schema' '('
    case 18154:                     // 'score' '('
    case 18155:                     // 'self' '('
    case 18160:                     // 'sliding' '('
    case 18161:                     // 'some' '('
    case 18162:                     // 'stable' '('
    case 18163:                     // 'start' '('
    case 18166:                     // 'strict' '('
    case 18174:                     // 'to' '('
    case 18175:                     // 'treat' '('
    case 18176:                     // 'try' '('
    case 18177:                     // 'tumbling' '('
    case 18178:                     // 'type' '('
    case 18180:                     // 'union' '('
    case 18182:                     // 'unordered' '('
    case 18183:                     // 'updating' '('
    case 18186:                     // 'validate' '('
    case 18187:                     // 'value' '('
    case 18188:                     // 'variable' '('
    case 18189:                     // 'version' '('
    case 18192:                     // 'where' '('
    case 18193:                     // 'while' '('
    case 18196:                     // 'with' '('
    case 18200:                     // 'xquery' '('
      try_FunctionCall();
      break;
    case 144592:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 144646:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 33:                        // '%'
    case 125:                       // 'document-node'
    case 129:                       // 'empty-sequence'
    case 150:                       // 'function'
    case 157:                       // 'if'
    case 170:                       // 'item'
    case 191:                       // 'namespace-node'
    case 197:                       // 'node'
    case 232:                       // 'schema-attribute'
    case 233:                       // 'schema-element'
    case 249:                       // 'switch'
    case 259:                       // 'typeswitch'
    case 15366:                     // EQName^Token '#'
    case 15435:                     // 'after' '#'
    case 15437:                     // 'allowing' '#'
    case 15438:                     // 'ancestor' '#'
    case 15439:                     // 'ancestor-or-self' '#'
    case 15440:                     // 'and' '#'
    case 15443:                     // 'array' '#'
    case 15444:                     // 'as' '#'
    case 15445:                     // 'ascending' '#'
    case 15446:                     // 'at' '#'
    case 15447:                     // 'attribute' '#'
    case 15448:                     // 'base-uri' '#'
    case 15449:                     // 'before' '#'
    case 15450:                     // 'boundary-space' '#'
    case 15451:                     // 'break' '#'
    case 15453:                     // 'case' '#'
    case 15454:                     // 'cast' '#'
    case 15455:                     // 'castable' '#'
    case 15456:                     // 'catch' '#'
    case 15458:                     // 'child' '#'
    case 15459:                     // 'collation' '#'
    case 15461:                     // 'comment' '#'
    case 15462:                     // 'constraint' '#'
    case 15463:                     // 'construction' '#'
    case 15466:                     // 'context' '#'
    case 15467:                     // 'continue' '#'
    case 15468:                     // 'copy' '#'
    case 15469:                     // 'copy-namespaces' '#'
    case 15470:                     // 'count' '#'
    case 15471:                     // 'decimal-format' '#'
    case 15473:                     // 'declare' '#'
    case 15474:                     // 'default' '#'
    case 15475:                     // 'delete' '#'
    case 15476:                     // 'descendant' '#'
    case 15477:                     // 'descendant-or-self' '#'
    case 15478:                     // 'descending' '#'
    case 15483:                     // 'div' '#'
    case 15484:                     // 'document' '#'
    case 15486:                     // 'element' '#'
    case 15487:                     // 'else' '#'
    case 15488:                     // 'empty' '#'
    case 15490:                     // 'encoding' '#'
    case 15491:                     // 'end' '#'
    case 15493:                     // 'eq' '#'
    case 15494:                     // 'every' '#'
    case 15496:                     // 'except' '#'
    case 15497:                     // 'exit' '#'
    case 15498:                     // 'external' '#'
    case 15499:                     // 'first' '#'
    case 15500:                     // 'following' '#'
    case 15501:                     // 'following-sibling' '#'
    case 15502:                     // 'for' '#'
    case 15506:                     // 'ft-option' '#'
    case 15511:                     // 'ge' '#'
    case 15513:                     // 'group' '#'
    case 15515:                     // 'gt' '#'
    case 15516:                     // 'idiv' '#'
    case 15518:                     // 'import' '#'
    case 15519:                     // 'in' '#'
    case 15520:                     // 'index' '#'
    case 15524:                     // 'insert' '#'
    case 15525:                     // 'instance' '#'
    case 15526:                     // 'integrity' '#'
    case 15527:                     // 'intersect' '#'
    case 15528:                     // 'into' '#'
    case 15529:                     // 'is' '#'
    case 15532:                     // 'json-item' '#'
    case 15535:                     // 'last' '#'
    case 15536:                     // 'lax' '#'
    case 15537:                     // 'le' '#'
    case 15539:                     // 'let' '#'
    case 15541:                     // 'loop' '#'
    case 15543:                     // 'lt' '#'
    case 15544:                     // 'map' '#'
    case 15546:                     // 'mod' '#'
    case 15547:                     // 'modify' '#'
    case 15548:                     // 'module' '#'
    case 15550:                     // 'namespace' '#'
    case 15552:                     // 'ne' '#'
    case 15558:                     // 'nodes' '#'
    case 15560:                     // 'object' '#'
    case 15564:                     // 'only' '#'
    case 15565:                     // 'option' '#'
    case 15566:                     // 'or' '#'
    case 15567:                     // 'order' '#'
    case 15568:                     // 'ordered' '#'
    case 15569:                     // 'ordering' '#'
    case 15572:                     // 'parent' '#'
    case 15578:                     // 'preceding' '#'
    case 15579:                     // 'preceding-sibling' '#'
    case 15582:                     // 'processing-instruction' '#'
    case 15584:                     // 'rename' '#'
    case 15585:                     // 'replace' '#'
    case 15586:                     // 'return' '#'
    case 15587:                     // 'returning' '#'
    case 15588:                     // 'revalidation' '#'
    case 15590:                     // 'satisfies' '#'
    case 15591:                     // 'schema' '#'
    case 15594:                     // 'score' '#'
    case 15595:                     // 'self' '#'
    case 15600:                     // 'sliding' '#'
    case 15601:                     // 'some' '#'
    case 15602:                     // 'stable' '#'
    case 15603:                     // 'start' '#'
    case 15606:                     // 'strict' '#'
    case 15610:                     // 'text' '#'
    case 15614:                     // 'to' '#'
    case 15615:                     // 'treat' '#'
    case 15616:                     // 'try' '#'
    case 15617:                     // 'tumbling' '#'
    case 15618:                     // 'type' '#'
    case 15620:                     // 'union' '#'
    case 15622:                     // 'unordered' '#'
    case 15623:                     // 'updating' '#'
    case 15626:                     // 'validate' '#'
    case 15627:                     // 'value' '#'
    case 15628:                     // 'variable' '#'
    case 15629:                     // 'version' '#'
    case 15632:                     // 'where' '#'
    case 15633:                     // 'while' '#'
    case 15636:                     // 'with' '#'
    case 15640:                     // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case -10:
      try_BlockExpr();
      break;
    case -11:
      try_ObjectConstructor();
      break;
    case 144568:                    // 'map' '{'
      try_MapConstructor();
      break;
    case 70:                        // '['
    case 144467:                    // 'array' '{'
      try_ArrayConstructor();
      break;
    case 73:                        // '``['
      try_StringConstructor();
      break;
    case 66:                        // '?'
      try_UnaryLookup();
      break;
    case 284:                       // '{|'
      try_JSONSimpleObjectUnion();
      break;
    case -17:
      break;
    default:
      try_Constructor();
    }
  }

  function parse_JSONSimpleObjectUnion()
  {
    eventHandler.startNonterminal("JSONSimpleObjectUnion", e0);
    consume(284);                   // '{|'
    lookahead1W(280);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|}'
    if (l1 != 287)                  // '|}'
    {
      whitespace();
      parse_Expr();
    }
    consume(287);                   // '|}'
    eventHandler.endNonterminal("JSONSimpleObjectUnion", e0);
  }

  function try_JSONSimpleObjectUnion()
  {
    consumeT(284);                  // '{|'
    lookahead1W(280);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|}'
    if (l1 != 287)                  // '|}'
    {
      try_Expr();
    }
    consumeT(287);                  // '|}'
  }

  function parse_ObjectConstructor()
  {
    eventHandler.startNonterminal("ObjectConstructor", e0);
    consume(282);                   // '{'
    lookahead1W(281);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 288)                  // '}'
    {
      whitespace();
      parse_PairConstructor();
      for (;;)
      {
        if (l1 != 42)               // ','
        {
          break;
        }
        consume(42);                // ','
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_PairConstructor();
      }
    }
    consume(288);                   // '}'
    eventHandler.endNonterminal("ObjectConstructor", e0);
  }

  function try_ObjectConstructor()
  {
    consumeT(282);                  // '{'
    lookahead1W(281);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 288)                  // '}'
    {
      try_PairConstructor();
      for (;;)
      {
        if (l1 != 42)               // ','
        {
          break;
        }
        consumeT(42);               // ','
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_PairConstructor();
      }
    }
    consumeT(288);                  // '}'
  }

  function parse_PairConstructor()
  {
    eventHandler.startNonterminal("PairConstructor", e0);
    parse_ExprSingle();
    consume(50);                    // ':'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("PairConstructor", e0);
  }

  function try_PairConstructor()
  {
    try_ExprSingle();
    consumeT(50);                   // ':'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_MapConstructor()
  {
    eventHandler.startNonterminal("MapConstructor", e0);
    consume(184);                   // 'map'
    lookahead1W(89);                // S^WS | '(:' | '{'
    consume(282);                   // '{'
    lookahead1W(281);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 288)                  // '}'
    {
      whitespace();
      parse_MapConstructorEntry();
      for (;;)
      {
        if (l1 != 42)               // ','
        {
          break;
        }
        consume(42);                // ','
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_MapConstructorEntry();
      }
    }
    consume(288);                   // '}'
    eventHandler.endNonterminal("MapConstructor", e0);
  }

  function try_MapConstructor()
  {
    consumeT(184);                  // 'map'
    lookahead1W(89);                // S^WS | '(:' | '{'
    consumeT(282);                  // '{'
    lookahead1W(281);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 288)                  // '}'
    {
      try_MapConstructorEntry();
      for (;;)
      {
        if (l1 != 42)               // ','
        {
          break;
        }
        consumeT(42);               // ','
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_MapConstructorEntry();
      }
    }
    consumeT(288);                  // '}'
  }

  function parse_MapConstructorEntry()
  {
    eventHandler.startNonterminal("MapConstructorEntry", e0);
    parse_MapKeyExpr();
    consume(50);                    // ':'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_MapValueExpr();
    eventHandler.endNonterminal("MapConstructorEntry", e0);
  }

  function try_MapConstructorEntry()
  {
    try_MapKeyExpr();
    consumeT(50);                   // ':'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_MapValueExpr();
  }

  function parse_MapKeyExpr()
  {
    eventHandler.startNonterminal("MapKeyExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapKeyExpr", e0);
  }

  function try_MapKeyExpr()
  {
    try_ExprSingle();
  }

  function parse_MapValueExpr()
  {
    eventHandler.startNonterminal("MapValueExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapValueExpr", e0);
  }

  function try_MapValueExpr()
  {
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    switch (l1)
    {
    case 70:                        // '['
      parse_SquareArrayConstructor();
      break;
    default:
      parse_CurlyArrayConstructor();
    }
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    switch (l1)
    {
    case 70:                        // '['
      try_SquareArrayConstructor();
      break;
    default:
      try_CurlyArrayConstructor();
    }
  }

  function parse_SquareArrayConstructor()
  {
    eventHandler.startNonterminal("SquareArrayConstructor", e0);
    consume(70);                    // '['
    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | ']' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 71)                   // ']'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        if (l1 != 42)               // ','
        {
          break;
        }
        consume(42);                // ','
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(71);                    // ']'
    eventHandler.endNonterminal("SquareArrayConstructor", e0);
  }

  function try_SquareArrayConstructor()
  {
    consumeT(70);                   // '['
    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | ']' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 71)                   // ']'
    {
      try_ExprSingle();
      for (;;)
      {
        if (l1 != 42)               // ','
        {
          break;
        }
        consumeT(42);               // ','
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
      }
    }
    consumeT(71);                   // ']'
  }

  function parse_CurlyArrayConstructor()
  {
    eventHandler.startNonterminal("CurlyArrayConstructor", e0);
    consume(83);                    // 'array'
    lookahead1W(89);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CurlyArrayConstructor", e0);
  }

  function try_CurlyArrayConstructor()
  {
    consumeT(83);                   // 'array'
    lookahead1W(89);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_StringConstructor()
  {
    eventHandler.startNonterminal("StringConstructor", e0);
    consume(73);                    // '``['
    parse_StringConstructorContent();
    consume(72);                    // ']``'
    eventHandler.endNonterminal("StringConstructor", e0);
  }

  function try_StringConstructor()
  {
    consumeT(73);                   // '``['
    try_StringConstructorContent();
    consumeT(72);                   // ']``'
  }

  function parse_StringConstructorContent()
  {
    eventHandler.startNonterminal("StringConstructorContent", e0);
    lookahead1(5);                  // StringConstructorChars
    consume(21);                    // StringConstructorChars
    for (;;)
    {
      lookahead1(16);               // ']``' | '`{'
      if (l1 != 74)                 // '`{'
      {
        break;
      }
      parse_StringConstructorInterpolation();
      lookahead1(5);                // StringConstructorChars
      consume(21);                  // StringConstructorChars
    }
    eventHandler.endNonterminal("StringConstructorContent", e0);
  }

  function try_StringConstructorContent()
  {
    lookahead1(5);                  // StringConstructorChars
    consumeT(21);                   // StringConstructorChars
    for (;;)
    {
      lookahead1(16);               // ']``' | '`{'
      if (l1 != 74)                 // '`{'
      {
        break;
      }
      try_StringConstructorInterpolation();
      lookahead1(5);                // StringConstructorChars
      consumeT(21);                 // StringConstructorChars
    }
  }

  function parse_StringConstructorInterpolation()
  {
    eventHandler.startNonterminal("StringConstructorInterpolation", e0);
    consume(74);                    // '`{'
    lookahead1W(282);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}`'
    if (l1 != 289)                  // '}`'
    {
      whitespace();
      parse_Expr();
    }
    consume(289);                   // '}`'
    eventHandler.endNonterminal("StringConstructorInterpolation", e0);
  }

  function try_StringConstructorInterpolation()
  {
    consumeT(74);                   // '`{'
    lookahead1W(282);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}`'
    if (l1 != 289)                  // '}`'
    {
      try_Expr();
    }
    consumeT(289);                  // '}`'
  }

  function parse_UnaryLookup()
  {
    eventHandler.startNonterminal("UnaryLookup", e0);
    consume(66);                    // '?'
    lookahead1W(259);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("UnaryLookup", e0);
  }

  function try_UnaryLookup()
  {
    consumeT(66);                   // '?'
    lookahead1W(259);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_KeySpecifier();
  }

  function parse_BlockExpr()
  {
    eventHandler.startNonterminal("BlockExpr", e0);
    consume(282);                   // '{'
    lookahead1W(281);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    whitespace();
    parse_StatementsAndOptionalExpr();
    consume(288);                   // '}'
    eventHandler.endNonterminal("BlockExpr", e0);
  }

  function try_BlockExpr()
  {
    consumeT(282);                  // '{'
    lookahead1W(281);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    try_StatementsAndOptionalExpr();
    consumeT(288);                  // '}'
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    consume(150);                   // 'function'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(96);                // S^WS | '$' | '(:' | ')'
    if (l1 == 32)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(38);                    // ')'
    lookahead1W(150);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 84)                   // 'as'
    {
      consume(84);                  // 'as'
      lookahead1W(268);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(120);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      consume(282);                 // '{'
      lookahead1W(281);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      whitespace();
      parse_StatementsAndOptionalExpr();
      consume(288);                 // '}'
      break;
    default:
      consume(138);                 // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function consume(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(XQueryParser.TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function consumeT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  function matchW(set)
  {
    var code;
    for (;;)
    {
      code = match(set);
      if (code != 23)               // S^WS
      {
        if (code != 37)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(set)
  {
    if (l1 == 0)
    {
      l1 = matchW(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(set)
  {
    if (l2 == 0)
    {
      l2 = matchW(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function lookahead1(set)
  {
    if (l1 == 0)
    {
      l1 = match(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2(set)
  {
    if (l2 == 0)
    {
      l2 = match(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function error(b, e, s, l, t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new thisParser.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 4) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 4) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;

  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = XQueryParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 4095; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = XQueryParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = XQueryParser.MAP1[(c0 & 15) + XQueryParser.MAP1[(c1 & 31) + XQueryParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }

        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (XQueryParser.MAP2[m] > c0) hi = m - 1;
          else if (XQueryParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = XQueryParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 12) + code - 1;
      code = XQueryParser.TRANSITION[(i0 & 15) + XQueryParser.TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 9; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 9;
    }

    if (end > size) end = size;
    return (result & 511) - 1;
  }

}

XQueryParser.XmlSerializer = function(log, indent)
{
  var input = null;
  var delayedTag = null;
  var hasChildElement = false;
  var depth = 0;

  this.reset = function(string)
  {
    log("<?xml version=\"1.0\" encoding=\"UTF-8\"?" + ">");
    input = string;
    delayedTag = null;
    hasChildElement = false;
    depth = 0;
  };

  this.startNonterminal = function(tag, begin)
  {
    if (delayedTag != null)
    {
      log("<");
      log(delayedTag);
      log(">");
    }
    delayedTag = tag;
    if (indent)
    {
      log("\n");
      for (var i = 0; i < depth; ++i)
      {
        log("  ");
      }
    }
    hasChildElement = false;
    ++depth;
  };

  this.endNonterminal = function(tag, end)
  {
    --depth;
    if (delayedTag != null)
    {
      delayedTag = null;
      log("<");
      log(tag);
      log("/>");
    }
    else
    {
      if (indent)
      {
        if (hasChildElement)
        {
          log("\n");
          for (var i = 0; i < depth; ++i)
          {
            log("  ");
          }
        }
      }
      log("</");
      log(tag);
      log(">");
    }
    hasChildElement = true;
  };

  this.terminal = function(tag, begin, end)
  {
    if (tag.charAt(0) == '\'') tag = "TOKEN";
    this.startNonterminal(tag, begin);
    characters(begin, end);
    this.endNonterminal(tag, end);
  };

  this.whitespace = function(begin, end)
  {
    characters(begin, end);
  };

  function characters(begin, end)
  {
    if (begin < end)
    {
      if (delayedTag != null)
      {
        log("<");
        log(delayedTag);
        log(">");
        delayedTag = null;
      }
      log(input.substring(begin, end)
               .replace(/&/g, "&amp;")
               .replace(/</g, "&lt;")
               .replace(/>/g, "&gt;"));
    }
  }
};

XQueryParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : XQueryParser.INITIAL[tokenSetId] & 4095;
  for (var i = 0; i < 291; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 3709 + s - 1;
    var i1 = i0 >> 1;
    var i2 = i1 >> 2;
    var f = XQueryParser.EXPECTED[(i0 & 1) + XQueryParser.EXPECTED[(i1 & 3) + XQueryParser.EXPECTED[(i2 & 3) + XQueryParser.EXPECTED[i2 >> 2]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(XQueryParser.TOKEN[j]);
      }
    }
  }
  return set;
};

XQueryParser.TopDownTreeBuilder = function()
{
  var input = null;
  var stack = null;

  this.reset = function(i)
  {
    input = i;
    stack = [];
  };

  this.startNonterminal = function(name, begin)
  {
    var nonterminal = new XQueryParser.Nonterminal(name, begin, begin, []);
    if (stack.length > 0) addChild(nonterminal);
    stack.push(nonterminal);
  };

  this.endNonterminal = function(name, end)
  {
    stack[stack.length - 1].end = end;
    if (stack.length > 1) stack.pop();
  };

  this.terminal = function(name, begin, end)
  {
    addChild(new XQueryParser.Terminal(name, begin, end));
  };

  this.whitespace = function(begin, end)
  {
  };

  function addChild(s)
  {
    var current = stack[stack.length - 1];
    current.children.push(s);
  }

  this.serialize = function(e)
  {
    e.reset(input);
    stack[0].send(e);
  };
};

XQueryParser.Terminal = function(name, begin, end)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.terminal(name, begin, end);
  };
};

XQueryParser.Nonterminal = function(name, begin, end, children)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.startNonterminal(name, begin);
    var pos = begin;
    children.forEach
    (
      function(c)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
    );
    if (pos < end) e.whitespace(pos, end);
    e.endNonterminal(name, end);
  };
};

XQueryParser.MAP0 =
[
  /*   0 */ 71, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 38, 39, 38, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
  /* 118 */ 62, 63, 64, 65, 66, 67, 68, 69, 38, 38
];

XQueryParser.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 71, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30,
  /* 371 */ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
  /* 398 */ 67, 68, 69, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 70, 38, 38,
  /* 425 */ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
  /* 452 */ 70, 70, 70, 70
];

XQueryParser.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30,
  /* 17 */ 38
];

XQueryParser.INITIAL =
[
  /*   0 */ 1, 12290, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
  /*  82 */ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
  /* 107 */ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
  /* 128 */ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
  /* 149 */ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
  /* 170 */ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
  /* 191 */ 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
  /* 212 */ 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
  /* 233 */ 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
  /* 254 */ 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
  /* 275 */ 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292
];

XQueryParser.TRANSITION =
[
  /*     0 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*    15 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*    30 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*    45 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*    60 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*    75 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*    90 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*   105 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*   120 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*   135 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*   150 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*   165 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*   180 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*   195 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*   210 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*   225 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*   240 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*   255 */ 21210, 18432, 18480, 18530, 18530, 18530, 18486, 18530, 18530, 18530, 18530, 18502, 18529, 18530, 18530,
  /*   270 */ 18530, 18513, 18530, 18530, 18546, 18562, 21210, 21210, 21210, 26418, 21210, 22969, 21210, 21210, 21210,
  /*   285 */ 21210, 21210, 21210, 21210, 21210, 21449, 19047, 18835, 20068, 20624, 27298, 18589, 18614, 50195, 28500,
  /*   300 */ 38420, 21210, 21210, 47888, 21210, 24332, 18638, 18685, 18713, 18718, 18734, 18653, 18753, 19585, 20614,
  /*   315 */ 20343, 18791, 20120, 18813, 20620, 20349, 18797, 25891, 19321, 18852, 21210, 35787, 34141, 21210, 21210,
  /*   330 */ 21210, 18880, 18917, 21210, 25323, 18952, 27285, 18968, 19573, 18987, 19045, 19593, 18775, 18836, 21821,
  /*   345 */ 20160, 18835, 22493, 18827, 19143, 21825, 20164, 18835, 22497, 19343, 21210, 28742, 27091, 36699, 19063,
  /*   360 */ 36689, 40940, 21210, 21210, 19079, 34781, 34183, 19113, 19159, 19175, 19197, 19125, 51913, 20301, 19257,
  /*   375 */ 19275, 19293, 19311, 51915, 20303, 19259, 19277, 19295, 19337, 51752, 19359, 19397, 19427, 25756, 19463,
  /*   390 */ 27880, 19498, 19533, 19560, 19609, 18765, 19625, 19654, 19670, 52075, 19691, 19712, 19733, 19665, 52070,
  /*   405 */ 19686, 19707, 19728, 20194, 19749, 19765, 21210, 19811, 51055, 19846, 19862, 19210, 19918, 19888, 19135,
  /*   420 */ 19904, 20105, 19934, 19135, 19904, 20105, 19934, 19950, 19985, 50240, 20008, 20031, 23399, 20513, 19181,
  /*   435 */ 20057, 20090, 25915, 20141, 20090, 25915, 20180, 20904, 20210, 20226, 20261, 20277, 20319, 20365, 20413,
  /*   450 */ 20381, 20404, 20420, 20388, 20436, 20484, 25301, 20500, 19638, 20529, 20549, 20533, 20553, 20569, 20600,
  /*   465 */ 20640, 20656, 20654, 20672, 21452, 27304, 18835, 20865, 20701, 18668, 18669, 34173, 20742, 20764, 20780,
  /*   480 */ 20821, 20852, 20890, 20920, 20958, 20836, 20974, 20986, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*   495 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*   510 */ 21210, 21210, 21002, 21210, 21210, 21210, 21210, 31533, 21210, 21210, 21210, 21210, 23781, 21024, 21035,
  /*   525 */ 21045, 21054, 21070, 21210, 21098, 21112, 43992, 21210, 21210, 21210, 26418, 21210, 22969, 21210, 32967,
  /*   540 */ 21210, 21210, 21210, 21210, 21210, 21210, 21449, 19047, 18835, 20068, 27309, 27298, 21147, 18614, 50195,
  /*   555 */ 28500, 38420, 21210, 21210, 47888, 21210, 24332, 18638, 18685, 18713, 18718, 18734, 18653, 18753, 19585,
  /*   570 */ 20614, 20343, 18791, 20120, 18813, 20620, 20349, 18797, 25891, 19321, 18852, 21210, 35787, 34141, 21210,
  /*   585 */ 21210, 21210, 18880, 18917, 21210, 25323, 18952, 27285, 18968, 19573, 18987, 19045, 19593, 18775, 18836,
  /*   600 */ 21821, 20160, 18835, 22493, 18827, 19143, 21825, 20164, 18835, 22497, 19343, 21210, 28742, 27091, 36699,
  /*   615 */ 19063, 36689, 40940, 21210, 21210, 19079, 34781, 34183, 19113, 19159, 19175, 19197, 19125, 51913, 20301,
  /*   630 */ 19257, 19275, 19293, 19311, 51915, 20303, 19259, 19277, 19295, 19337, 51752, 19359, 19397, 19427, 25756,
  /*   645 */ 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625, 19654, 19670, 52075, 19691, 19712, 19733, 19665,
  /*   660 */ 52070, 19686, 19707, 19728, 20194, 19749, 19765, 21210, 19811, 51055, 19846, 19862, 19210, 19918, 19888,
  /*   675 */ 19135, 19904, 20105, 19934, 19135, 19904, 20105, 19934, 19950, 19985, 50240, 20008, 20031, 23399, 20513,
  /*   690 */ 19181, 20057, 20090, 25915, 20141, 20090, 25915, 20180, 20904, 20210, 20226, 20261, 20277, 20319, 20365,
  /*   705 */ 20413, 20381, 20404, 20420, 20388, 20436, 20484, 25301, 20500, 19638, 20529, 20549, 20533, 20553, 20569,
  /*   720 */ 20600, 20640, 20656, 20654, 20672, 21452, 27304, 18835, 20865, 20701, 18668, 18669, 34173, 20742, 20764,
  /*   735 */ 20780, 20821, 20852, 20890, 20920, 20958, 20836, 20974, 20986, 21210, 21210, 21210, 21210, 21210, 21210,
  /*   750 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*   765 */ 21210, 21210, 21210, 21172, 21188, 21210, 21210, 21210, 27344, 21210, 21210, 34914, 21243, 33166, 21209,
  /*   780 */ 21210, 21210, 21210, 21210, 21240, 21227, 21297, 21259, 21210, 21210, 21210, 26418, 21210, 22969, 23660,
  /*   795 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21449, 19047, 18835, 20068, 20624, 27298, 21284, 18614,
  /*   810 */ 50195, 28500, 38420, 21210, 21210, 47888, 21210, 24332, 18638, 18685, 18713, 18718, 18734, 18653, 18753,
  /*   825 */ 19585, 20614, 20343, 18791, 20120, 18813, 20620, 20349, 18797, 25891, 19321, 18852, 21210, 35787, 34141,
  /*   840 */ 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952, 27285, 18968, 19573, 18987, 19045, 19593, 18775,
  /*   855 */ 18836, 21821, 20160, 18835, 22493, 18827, 19143, 21825, 20164, 18835, 22497, 19343, 21210, 28742, 27091,
  /*   870 */ 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781, 34183, 19113, 19159, 19175, 19197, 19125, 51913,
  /*   885 */ 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259, 19277, 19295, 19337, 51752, 19359, 19397, 19427,
  /*   900 */ 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625, 19654, 19670, 52075, 19691, 19712, 19733,
  /*   915 */ 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765, 21210, 19811, 51055, 19846, 19862, 19210, 19918,
  /*   930 */ 19888, 19135, 19904, 20105, 19934, 19135, 19904, 20105, 19934, 19950, 19985, 50240, 20008, 20031, 23399,
  /*   945 */ 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915, 20180, 20904, 20210, 20226, 20261, 20277, 20319,
  /*   960 */ 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484, 25301, 20500, 19638, 20529, 20549, 20533, 20553,
  /*   975 */ 20569, 20600, 20640, 20656, 20654, 20672, 21452, 27304, 18835, 20865, 20701, 18668, 18669, 34173, 20742,
  /*   990 */ 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836, 20974, 20986, 21210, 21210, 21210, 21210, 21210,
  /*  1005 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  1020 */ 21210, 21210, 21210, 21210, 21325, 23826, 21210, 21210, 21210, 21738, 21210, 21210, 29372, 21210, 23781,
  /*  1035 */ 21360, 21373, 21383, 29177, 21405, 21440, 21389, 21468, 43992, 21210, 21210, 21210, 27031, 21210, 22969,
  /*  1050 */ 19089, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21449, 19047, 18835, 20068, 20624, 27298, 21503,
  /*  1065 */ 21538, 50195, 28500, 38420, 21210, 21210, 47888, 21210, 24332, 18638, 18685, 18713, 18718, 18734, 18653,
  /*  1080 */ 18753, 19585, 20614, 20343, 18791, 20120, 18813, 20620, 20349, 18797, 25891, 19321, 18852, 21210, 35787,
  /*  1095 */ 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952, 27285, 18968, 19573, 18987, 19045, 19593,
  /*  1110 */ 19544, 18836, 21821, 20160, 18835, 22493, 20756, 19143, 21825, 20164, 18835, 22497, 19343, 21210, 28742,
  /*  1125 */ 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781, 34183, 19113, 19159, 19175, 19197, 19125,
  /*  1140 */ 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259, 19277, 19295, 19337, 51752, 19359, 19397,
  /*  1155 */ 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625, 19654, 19670, 52075, 19691, 19712,
  /*  1170 */ 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765, 21210, 19811, 51055, 19846, 19862, 19210,
  /*  1185 */ 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904, 20105, 19934, 19950, 19985, 50240, 20008, 20031,
  /*  1200 */ 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915, 20180, 20904, 20210, 20226, 20261, 20277,
  /*  1215 */ 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484, 25301, 20500, 19638, 20529, 20549, 20533,
  /*  1230 */ 20553, 20569, 20600, 20640, 20656, 20654, 20672, 21452, 27304, 18835, 20865, 20701, 18668, 18669, 34173,
  /*  1245 */ 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836, 20974, 20986, 21210, 21210, 21210, 21210,
  /*  1260 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  1275 */ 21210, 21210, 21210, 21210, 21210, 21002, 32931, 21210, 21210, 21210, 31533, 21568, 21210, 31111, 21210,
  /*  1290 */ 21628, 21587, 21618, 32937, 31862, 21210, 21591, 21607, 21644, 43992, 21210, 21210, 21210, 26418, 21210,
  /*  1305 */ 22969, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21449, 19047, 18835, 20068, 20624, 27298,
  /*  1320 */ 18589, 18614, 50195, 28500, 38420, 21210, 21210, 47888, 21210, 24332, 18638, 18685, 18713, 18718, 18734,
  /*  1335 */ 18653, 18753, 19585, 20614, 20343, 18791, 20120, 18813, 20620, 20349, 18797, 25891, 19321, 18852, 21210,
  /*  1350 */ 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952, 27285, 18968, 19573, 18987, 19045,
  /*  1365 */ 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143, 21825, 20164, 18835, 22497, 19343, 21210,
  /*  1380 */ 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781, 34183, 19113, 19159, 19175, 19197,
  /*  1395 */ 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259, 19277, 19295, 19337, 51752, 19359,
  /*  1410 */ 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625, 19654, 19670, 52075, 19691,
  /*  1425 */ 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765, 21210, 19811, 51055, 19846, 19862,
  /*  1440 */ 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904, 20105, 19934, 19950, 19985, 50240, 20008,
  /*  1455 */ 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915, 20180, 20904, 20210, 20226, 20261,
  /*  1470 */ 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484, 25301, 20500, 19638, 20529, 20549,
  /*  1485 */ 20533, 20553, 20569, 20600, 20640, 20656, 20654, 20672, 21452, 27304, 18835, 20865, 20701, 18668, 18669,
  /*  1500 */ 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836, 20974, 20986, 21210, 21210, 21210,
  /*  1515 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  1530 */ 21210, 21210, 21210, 21210, 21210, 21210, 21002, 21210, 21210, 21210, 21210, 31533, 21679, 21210, 21210,
  /*  1545 */ 21210, 22421, 21700, 21210, 25314, 21210, 21210, 23632, 21719, 21754, 43992, 21210, 21210, 21210, 26418,
  /*  1560 */ 21210, 22969, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21449, 19047, 18835, 20068, 20624,
  /*  1575 */ 27298, 18589, 18614, 50195, 28500, 38420, 21210, 21210, 47888, 21210, 24332, 18638, 18685, 18713, 18718,
  /*  1590 */ 18734, 18653, 18753, 19585, 20614, 20343, 18791, 20120, 18813, 20620, 20349, 18797, 25891, 19321, 18852,
  /*  1605 */ 21210, 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952, 27285, 18968, 19573, 18987,
  /*  1620 */ 19045, 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143, 21825, 20164, 18835, 22497, 19343,
  /*  1635 */ 21210, 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781, 34183, 19113, 19159, 19175,
  /*  1650 */ 19197, 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259, 19277, 19295, 19337, 51752,
  /*  1665 */ 19359, 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625, 19654, 19670, 52075,
  /*  1680 */ 19691, 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765, 21210, 19811, 51055, 19846,
  /*  1695 */ 19862, 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904, 20105, 19934, 19950, 19985, 50240,
  /*  1710 */ 20008, 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915, 20180, 20904, 20210, 20226,
  /*  1725 */ 20261, 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484, 25301, 20500, 19638, 20529,
  /*  1740 */ 20549, 20533, 20553, 20569, 20600, 20640, 20656, 20654, 20672, 21452, 27304, 18835, 20865, 20701, 18668,
  /*  1755 */ 18669, 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836, 20974, 20986, 21210, 21210,
  /*  1770 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  1785 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21002, 21210, 21210, 21210, 21210, 31533, 21210, 21210,
  /*  1800 */ 21210, 21210, 18622, 21790, 21210, 21210, 21210, 21210, 21210, 21210, 50176, 28733, 21210, 21210, 21210,
  /*  1815 */ 26418, 21210, 22969, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21449, 19047, 18835, 20068,
  /*  1830 */ 20624, 27298, 18589, 18614, 50195, 28500, 38420, 21210, 21210, 47888, 21210, 24332, 18638, 18685, 18713,
  /*  1845 */ 18718, 18734, 18653, 18753, 19585, 20795, 20343, 18791, 20120, 21807, 20620, 20349, 18797, 25891, 19321,
  /*  1860 */ 18852, 21210, 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952, 27285, 18968, 19573,
  /*  1875 */ 18987, 19045, 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143, 21825, 20164, 18835, 22497,
  /*  1890 */ 19343, 21210, 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781, 34183, 19113, 19159,
  /*  1905 */ 19175, 19197, 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259, 19277, 19295, 19337,
  /*  1920 */ 51752, 19359, 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625, 19654, 19670,
  /*  1935 */ 52075, 19691, 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765, 21210, 19811, 51055,
  /*  1950 */ 19846, 19862, 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904, 20105, 19934, 19950, 19985,
  /*  1965 */ 50240, 20008, 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915, 20180, 20904, 20210,
  /*  1980 */ 20226, 20261, 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484, 25301, 20500, 19638,
  /*  1995 */ 20529, 20549, 20533, 20553, 20569, 20600, 20640, 20656, 20654, 20672, 21452, 27304, 18835, 20865, 20701,
  /*  2010 */ 18668, 18669, 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836, 20974, 20986, 21210,
  /*  2025 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  2040 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21841, 21936, 21210, 21210, 21210, 51786, 21210,
  /*  2055 */ 21210, 37258, 18573, 36111, 21209, 21210, 21210, 21210, 21210, 18570, 21857, 21895, 47550, 21210, 21210,
  /*  2070 */ 21210, 26418, 21210, 22969, 43462, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21449, 19047, 18835,
  /*  2085 */ 20068, 20624, 27298, 21923, 21957, 50195, 28500, 38420, 21210, 21210, 47888, 21210, 24332, 18638, 18685,
  /*  2100 */ 18713, 18718, 18734, 18653, 18753, 19585, 20614, 20343, 18791, 20120, 18813, 20620, 20349, 18797, 25891,
  /*  2115 */ 19321, 18852, 21210, 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952, 27285, 18968,
  /*  2130 */ 19573, 18987, 19045, 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143, 21825, 20164, 18835,
  /*  2145 */ 22497, 19343, 21210, 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781, 34183, 19113,
  /*  2160 */ 19159, 19175, 19197, 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259, 19277, 19295,
  /*  2175 */ 19337, 51752, 19359, 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625, 19654,
  /*  2190 */ 19670, 52075, 19691, 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765, 21210, 19811,
  /*  2205 */ 51055, 19846, 19862, 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904, 20105, 19934, 19950,
  /*  2220 */ 19985, 50240, 20008, 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915, 20180, 20904,
  /*  2235 */ 20210, 20226, 20261, 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484, 25301, 20500,
  /*  2250 */ 19638, 20529, 20549, 20533, 20553, 20569, 20600, 20640, 20656, 20654, 20672, 21452, 27304, 18835, 20865,
  /*  2265 */ 20701, 18668, 18669, 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836, 20974, 20986,
  /*  2280 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  2295 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21002, 21981, 22012, 22012, 22012, 22104,
  /*  2310 */ 22005, 22012, 22015, 21989, 22031, 22074, 22085, 22095, 22045, 22120, 22155, 22058, 22167, 43992, 21210,
  /*  2325 */ 21210, 21210, 26721, 21210, 22969, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21449, 19047,
  /*  2340 */ 18835, 20068, 20624, 27298, 18589, 18614, 50195, 28500, 48739, 21210, 21210, 47888, 21210, 24332, 18638,
  /*  2355 */ 18685, 18713, 18718, 18734, 18653, 18753, 19585, 20614, 20343, 18791, 20120, 18813, 20620, 20349, 18797,
  /*  2370 */ 25891, 19321, 18852, 21210, 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952, 27285,
  /*  2385 */ 18968, 19573, 18987, 19045, 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143, 21825, 20164,
  /*  2400 */ 18835, 22497, 19343, 21210, 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781, 34183,
  /*  2415 */ 19113, 19159, 19175, 19197, 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259, 19277,
  /*  2430 */ 19295, 19337, 51752, 19359, 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625,
  /*  2445 */ 19654, 19670, 52075, 19691, 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765, 21210,
  /*  2460 */ 19811, 51055, 19846, 19862, 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904, 20105, 19934,
  /*  2475 */ 19950, 19985, 50240, 20008, 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915, 20180,
  /*  2490 */ 20904, 20210, 20226, 20261, 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484, 25301,
  /*  2505 */ 20500, 19638, 20529, 20549, 20533, 20553, 20569, 20600, 20640, 20656, 20654, 20672, 21452, 27304, 18835,
  /*  2520 */ 20865, 20701, 18668, 18669, 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836, 20974,
  /*  2535 */ 20986, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  2550 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21002, 22203, 21210, 21210, 21210,
  /*  2565 */ 31533, 22233, 21210, 21210, 22239, 23781, 22202, 21210, 49466, 49475, 49479, 22219, 49457, 22258, 43992,
  /*  2580 */ 21210, 21210, 21210, 27760, 21210, 22969, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21449,
  /*  2595 */ 19047, 18835, 20068, 20624, 27298, 18589, 18614, 50195, 28500, 36961, 21210, 21210, 47888, 21210, 24332,
  /*  2610 */ 18638, 18685, 18713, 18718, 18734, 18653, 18753, 19585, 20614, 20343, 18791, 20120, 18813, 20620, 20349,
  /*  2625 */ 18797, 25891, 19321, 18852, 21210, 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952,
  /*  2640 */ 27285, 18968, 19573, 18987, 19045, 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143, 21825,
  /*  2655 */ 20164, 18835, 22497, 19343, 21210, 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781,
  /*  2670 */ 34183, 19113, 19159, 19175, 19197, 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259,
  /*  2685 */ 19277, 19295, 19337, 51752, 19359, 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765,
  /*  2700 */ 19625, 19654, 19670, 52075, 19691, 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765,
  /*  2715 */ 21210, 19811, 51055, 19846, 19862, 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904, 20105,
  /*  2730 */ 19934, 19950, 19985, 50240, 20008, 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915,
  /*  2745 */ 20180, 20904, 20210, 20226, 20261, 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484,
  /*  2760 */ 25301, 20500, 19638, 20529, 20549, 20533, 20553, 20569, 20600, 20640, 20656, 20654, 20672, 21452, 27304,
  /*  2775 */ 18835, 20865, 20701, 18668, 18669, 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836,
  /*  2790 */ 20974, 20986, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  2805 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21002, 46696, 21210, 21210,
  /*  2820 */ 21210, 31533, 21210, 21210, 21210, 31837, 48041, 22293, 22319, 22329, 22303, 22363, 22401, 22437, 22451,
  /*  2835 */ 43992, 21210, 21210, 21210, 26418, 21210, 22969, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  2850 */ 21449, 19047, 18835, 20068, 20624, 27298, 18589, 18614, 50195, 28500, 38420, 21210, 21210, 47888, 21210,
  /*  2865 */ 24332, 18638, 18685, 18713, 18718, 18734, 18653, 18753, 19585, 20614, 20343, 18791, 20120, 22479, 20620,
  /*  2880 */ 20349, 18797, 25891, 19321, 18852, 21210, 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323,
  /*  2895 */ 18952, 27285, 18968, 19573, 18987, 19045, 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143,
  /*  2910 */ 21825, 20164, 18835, 22497, 19343, 21210, 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079,
  /*  2925 */ 34781, 34183, 19113, 19159, 19175, 19197, 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303,
  /*  2940 */ 19259, 19277, 19295, 19337, 51752, 19359, 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609,
  /*  2955 */ 18765, 19625, 19654, 19670, 52075, 19691, 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749,
  /*  2970 */ 19765, 21210, 19811, 51055, 19846, 19862, 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904,
  /*  2985 */ 20105, 19934, 19950, 19985, 50240, 20008, 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090,
  /*  3000 */ 25915, 20180, 20904, 20210, 20226, 20261, 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436,
  /*  3015 */ 20484, 25301, 20500, 19638, 20529, 20549, 20533, 20553, 20569, 20600, 20640, 20656, 20654, 20672, 21452,
  /*  3030 */ 27304, 18835, 20865, 20701, 18668, 18669, 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958,
  /*  3045 */ 20836, 20974, 20986, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  3060 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21002, 21210, 21210,
  /*  3075 */ 21210, 21210, 31533, 21210, 21210, 21210, 32097, 33185, 22513, 22524, 22540, 22523, 22565, 21210, 22522,
  /*  3090 */ 22600, 43992, 21210, 21210, 21210, 26418, 21210, 22969, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  3105 */ 21210, 21449, 19047, 18835, 20068, 20624, 27298, 18589, 18614, 50195, 28500, 38420, 21210, 21210, 33960,
  /*  3120 */ 21210, 24332, 18638, 18685, 18713, 18718, 18734, 18653, 18753, 19585, 20614, 20343, 18791, 20120, 18813,
  /*  3135 */ 20620, 20349, 18797, 25891, 19321, 18852, 21210, 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210,
  /*  3150 */ 25323, 18952, 27285, 18968, 19573, 18987, 19045, 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827,
  /*  3165 */ 19143, 21825, 20164, 18835, 22497, 19343, 21210, 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210,
  /*  3180 */ 19079, 34781, 34183, 19113, 19159, 19175, 19197, 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915,
  /*  3195 */ 20303, 19259, 19277, 19295, 19337, 51752, 19359, 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560,
  /*  3210 */ 19609, 18765, 19625, 19654, 19670, 52075, 19691, 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194,
  /*  3225 */ 19749, 19765, 21210, 19811, 51055, 19846, 19862, 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135,
  /*  3240 */ 19904, 20105, 19934, 19950, 19985, 50240, 20008, 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141,
  /*  3255 */ 20090, 25915, 20180, 20904, 20210, 20226, 20261, 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388,
  /*  3270 */ 20436, 20484, 25301, 20500, 19638, 20529, 20549, 20533, 20553, 20569, 20600, 20640, 20656, 20654, 20672,
  /*  3285 */ 21452, 27304, 18835, 20865, 20701, 18668, 18669, 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920,
  /*  3300 */ 20958, 20836, 20974, 20986, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  3315 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21002, 36040,
  /*  3330 */ 21210, 21210, 21210, 31533, 22636, 21210, 21210, 22628, 27639, 22652, 22687, 22695, 22695, 22699, 36040,
  /*  3345 */ 22715, 22729, 43992, 21210, 21210, 21210, 26418, 21210, 22969, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  3360 */ 21210, 21210, 21449, 19047, 18835, 20068, 20624, 27298, 18589, 18614, 50195, 28500, 38420, 21210, 21210,
  /*  3375 */ 47888, 21210, 24332, 18638, 18685, 18713, 18718, 18734, 18653, 18753, 19585, 20614, 20343, 18791, 20120,
  /*  3390 */ 18813, 20620, 20349, 18797, 25891, 19321, 18852, 21210, 35787, 34141, 21210, 21210, 21210, 18880, 18917,
  /*  3405 */ 21210, 25323, 18952, 27285, 18968, 19573, 18987, 19045, 19593, 18775, 18836, 21821, 20160, 18835, 22493,
  /*  3420 */ 18827, 19143, 21825, 20164, 18835, 22497, 19343, 21210, 28742, 27091, 36699, 19063, 36689, 40940, 21210,
  /*  3435 */ 21210, 19079, 34781, 34183, 19113, 19159, 19175, 19197, 19125, 51913, 20301, 19257, 19275, 19293, 19311,
  /*  3450 */ 51915, 20303, 19259, 19277, 19295, 19337, 51752, 19359, 19397, 19427, 25756, 19463, 27880, 19498, 19533,
  /*  3465 */ 19560, 19609, 18765, 19625, 19654, 19670, 52075, 19691, 19712, 19733, 19665, 52070, 19686, 19707, 19728,
  /*  3480 */ 20194, 19749, 19765, 21210, 19811, 51055, 19846, 19862, 19210, 19918, 19888, 19135, 19904, 20105, 19934,
  /*  3495 */ 19135, 19904, 20105, 19934, 19950, 19985, 50240, 20008, 20031, 23399, 20513, 19181, 20057, 20090, 25915,
  /*  3510 */ 20141, 20090, 25915, 20180, 20904, 20210, 20226, 20261, 20277, 20319, 20365, 20413, 20381, 20404, 20420,
  /*  3525 */ 20388, 20436, 20484, 25301, 20500, 19638, 20529, 20549, 20533, 20553, 20569, 20600, 20640, 20656, 20654,
  /*  3540 */ 20672, 21452, 27304, 18835, 20865, 20701, 18668, 18669, 34173, 20742, 20764, 20780, 20821, 20852, 20890,
  /*  3555 */ 20920, 20958, 20836, 20974, 20986, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  3570 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 22774,
  /*  3585 */ 21210, 21210, 21210, 21210, 31533, 21210, 21210, 21210, 21210, 23781, 22798, 22809, 22825, 22808, 22850,
  /*  3600 */ 21210, 22807, 22885, 43992, 21210, 21210, 21210, 26418, 21210, 22969, 21210, 21210, 21210, 21210, 21210,
  /*  3615 */ 21210, 21210, 21210, 49719, 49076, 48154, 39785, 31991, 48143, 22915, 21210, 27768, 21210, 32993, 39725,
  /*  3630 */ 22949, 33960, 39850, 21210, 21210, 21210, 21210, 20584, 49074, 26883, 49074, 49074, 28772, 26692, 48154,
  /*  3645 */ 48154, 30778, 37350, 37510, 37350, 37350, 29129, 35317, 21210, 21210, 21210, 21210, 21210, 21210, 26048,
  /*  3660 */ 33685, 22967, 21210, 21210, 20583, 49074, 49074, 49074, 49074, 49074, 35080, 48154, 48154, 48154, 48154,
  /*  3675 */ 48154, 22985, 37350, 37350, 37350, 37350, 37352, 28471, 21210, 19961, 23005, 21210, 21210, 21210, 21210,
  /*  3690 */ 21210, 23024, 21210, 21210, 19788, 23058, 49074, 49074, 49074, 20468, 23077, 48154, 50099, 48154, 48154,
  /*  3705 */ 37340, 23140, 37350, 45148, 37350, 37350, 28465, 46357, 21210, 21210, 21210, 21210, 23008, 21210, 21210,
  /*  3720 */ 49718, 49074, 23181, 49074, 49074, 29068, 48154, 45519, 48154, 48154, 46167, 37349, 39705, 37350, 37350,
  /*  3735 */ 37350, 28469, 32549, 21210, 21210, 23202, 47210, 21210, 49070, 49074, 49074, 23222, 29078, 48154, 48154,
  /*  3750 */ 23242, 37348, 37350, 37350, 23262, 32539, 31690, 21210, 30482, 23282, 49716, 48431, 49074, 30644, 28175,
  /*  3765 */ 48154, 43916, 46760, 37350, 23547, 31637, 21210, 37771, 22577, 43348, 46538, 49075, 23299, 48154, 35088,
  /*  3780 */ 49164, 37350, 29001, 21210, 23526, 49720, 37039, 48151, 23354, 47953, 23377, 46360, 22741, 23415, 23441,
  /*  3795 */ 23477, 23513, 22862, 38096, 23542, 40281, 49072, 48153, 37351, 37596, 33889, 36629, 41422, 30646, 43922,
  /*  3810 */ 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  3825 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  3840 */ 21002, 21210, 21210, 21210, 21210, 31533, 21210, 21210, 21210, 34997, 23781, 21209, 21210, 21210, 21210,
  /*  3855 */ 21210, 51274, 23613, 23648, 43992, 21210, 21210, 21210, 26418, 21210, 27954, 21210, 21210, 21210, 21210,
  /*  3870 */ 21210, 21210, 21210, 21210, 49719, 49076, 48154, 39785, 31991, 23683, 22915, 21210, 21210, 21210, 32993,
  /*  3885 */ 21210, 21210, 47888, 21210, 21210, 21210, 21210, 21210, 20584, 49074, 49074, 49074, 49074, 28772, 48154,
  /*  3900 */ 48154, 48154, 30778, 37350, 37350, 37350, 37350, 48137, 35317, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  3915 */ 26048, 21210, 21210, 21210, 21210, 20583, 49074, 49074, 49074, 49074, 49074, 35080, 48154, 48154, 48154,
  /*  3930 */ 48154, 48154, 22985, 37350, 37350, 37350, 37350, 37352, 28471, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  3945 */ 21210, 21210, 21210, 21210, 21210, 49073, 49074, 49074, 49074, 49074, 20468, 48154, 48154, 48154, 48154,
  /*  3960 */ 48154, 37340, 37350, 37350, 37350, 37350, 37350, 28465, 46357, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  3975 */ 21210, 49718, 49074, 49074, 49074, 49074, 29068, 48154, 48154, 48154, 48154, 46167, 37349, 37350, 37350,
  /*  3990 */ 37350, 37350, 28469, 32549, 21210, 21210, 21210, 21210, 21210, 49070, 49074, 49074, 49074, 29078, 48154,
  /*  4005 */ 48154, 48154, 37348, 37350, 37350, 37350, 32539, 21210, 21210, 21210, 21210, 49716, 49074, 49074, 30644,
  /*  4020 */ 48154, 48154, 43916, 37350, 37350, 23547, 32545, 21210, 21210, 21210, 49721, 49074, 49075, 48154, 48154,
  /*  4035 */ 43919, 37350, 37350, 29001, 21210, 20582, 49720, 49074, 48151, 48155, 37350, 29352, 46360, 49717, 49077,
  /*  4050 */ 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153, 37351, 49717, 30647, 43922, 41422, 30646,
  /*  4065 */ 43922, 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  4080 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  4095 */ 21210, 21002, 25988, 21210, 21210, 21210, 26461, 21210, 21210, 21210, 21210, 23781, 23705, 23798, 23725,
  /*  4110 */ 23709, 23750, 21210, 23797, 23814, 43992, 21210, 21210, 21210, 26418, 21210, 22969, 21210, 22271, 21210,
  /*  4125 */ 43255, 21210, 21210, 21210, 21210, 21449, 19047, 18835, 20068, 20624, 27298, 18589, 18614, 50195, 28500,
  /*  4140 */ 38420, 21210, 21210, 47888, 21210, 24332, 18638, 18685, 18713, 18718, 18734, 18653, 18753, 19585, 20614,
  /*  4155 */ 20343, 18791, 20120, 18813, 20620, 20349, 18797, 25891, 19321, 18852, 21210, 35787, 34141, 21210, 21210,
  /*  4170 */ 21210, 18880, 18917, 21210, 25323, 18952, 27285, 18968, 19573, 18987, 19045, 19593, 18775, 18836, 21821,
  /*  4185 */ 20160, 18835, 22493, 18827, 19143, 21825, 20164, 18835, 22497, 19343, 21210, 28742, 27091, 36699, 19063,
  /*  4200 */ 36689, 40940, 21210, 21210, 19079, 34781, 34183, 19113, 19159, 19175, 19197, 19125, 51913, 20301, 19257,
  /*  4215 */ 19275, 19293, 19311, 51915, 20303, 19259, 19277, 19295, 19337, 51752, 19359, 19397, 19427, 25756, 19463,
  /*  4230 */ 27880, 19498, 19533, 19560, 19609, 18765, 19625, 19654, 19670, 52075, 19691, 19712, 19733, 19665, 52070,
  /*  4245 */ 19686, 19707, 19728, 20194, 19749, 19765, 21210, 19811, 51055, 19846, 19862, 19210, 19918, 19888, 19135,
  /*  4260 */ 19904, 20105, 19934, 19135, 19904, 20105, 19934, 19950, 19985, 50240, 20008, 20031, 23399, 20513, 19181,
  /*  4275 */ 20057, 20090, 25915, 20141, 20090, 25915, 20180, 20904, 20210, 20226, 20261, 20277, 20319, 20365, 20413,
  /*  4290 */ 20381, 20404, 20420, 20388, 20436, 20484, 25301, 20500, 19638, 20529, 20549, 20533, 20553, 20569, 20600,
  /*  4305 */ 20640, 20656, 20654, 20672, 21452, 27304, 18835, 20865, 20701, 18668, 18669, 34173, 20742, 20764, 20780,
  /*  4320 */ 20821, 20852, 20890, 20920, 20958, 20836, 20974, 20986, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  4335 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  4350 */ 21210, 21210, 21002, 23849, 21210, 21210, 21210, 31533, 21210, 21210, 21210, 35052, 23781, 21209, 21210,
  /*  4365 */ 21210, 21210, 21210, 49432, 23868, 49445, 43718, 21210, 21210, 21210, 26418, 21210, 31036, 21210, 21210,
  /*  4380 */ 21210, 21210, 21210, 21210, 21210, 21210, 49719, 49076, 48154, 39785, 31991, 23905, 22915, 21210, 21210,
  /*  4395 */ 21210, 32993, 21210, 21210, 48595, 21210, 21210, 21210, 21210, 21210, 20584, 49074, 49074, 49074, 49074,
  /*  4410 */ 28772, 48154, 48154, 48154, 30778, 37350, 37350, 37350, 37350, 48137, 35535, 23927, 21210, 21210, 21210,
  /*  4425 */ 21210, 21210, 23327, 21210, 21210, 21210, 21210, 20583, 49074, 49074, 49074, 49074, 49074, 35080, 48154,
  /*  4440 */ 48154, 48154, 48154, 48154, 22985, 37350, 37350, 37350, 37350, 37352, 48846, 23961, 23994, 21210, 21210,
  /*  4455 */ 21210, 21210, 33391, 21210, 21210, 21210, 21210, 49073, 49074, 49074, 49074, 49074, 33483, 48154, 48154,
  /*  4470 */ 48154, 48154, 48154, 35116, 37350, 37350, 37350, 37350, 37350, 28465, 24013, 21210, 21210, 21210, 21210,
  /*  4485 */ 21210, 21210, 21210, 49718, 49074, 49074, 49074, 49074, 31277, 48154, 48154, 48154, 48154, 50528, 37349,
  /*  4500 */ 37350, 37350, 37350, 37350, 28469, 32549, 21210, 21210, 21210, 21210, 21210, 49070, 49074, 49074, 49074,
  /*  4515 */ 24050, 48154, 48154, 48154, 24068, 37350, 37350, 37350, 32539, 21210, 21210, 21210, 21210, 49716, 49074,
  /*  4530 */ 49074, 30644, 48154, 48154, 43916, 37350, 37350, 23547, 32545, 21210, 21210, 21210, 49721, 49074, 49075,
  /*  4545 */ 48154, 48154, 43919, 37350, 37350, 29001, 21210, 20582, 49720, 49074, 48151, 48155, 37350, 29352, 46360,
  /*  4560 */ 49717, 49077, 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153, 37351, 49717, 30647, 43922,
  /*  4575 */ 41422, 30646, 43922, 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  4590 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  4605 */ 21210, 21210, 21210, 21002, 29731, 21210, 21210, 21210, 21522, 31818, 21210, 21210, 50391, 23781, 24085,
  /*  4620 */ 21424, 24025, 24034, 24120, 21210, 28228, 24161, 47360, 21210, 21210, 21210, 27079, 21210, 22969, 21210,
  /*  4635 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21449, 18971, 24457, 24485, 24832, 24196, 24224, 18614,
  /*  4650 */ 50195, 28500, 35887, 21210, 21210, 47888, 21210, 24332, 18638, 18685, 18713, 18718, 18734, 18653, 18753,
  /*  4665 */ 19585, 20716, 20726, 24258, 25517, 24274, 24825, 24304, 24736, 25377, 24437, 24320, 21210, 35787, 34141,
  /*  4680 */ 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952, 27285, 18968, 19573, 18987, 19045, 19593, 19872,
  /*  4695 */ 24458, 19016, 25525, 24457, 25448, 24426, 24671, 24355, 24591, 24829, 24382, 25240, 21210, 28742, 27091,
  /*  4710 */ 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781, 34183, 19113, 19159, 19175, 19197, 19222, 24951,
  /*  4725 */ 19241, 24412, 24453, 24474, 25045, 24603, 24366, 24507, 24523, 24579, 25234, 24619, 19359, 19397, 19427,
  /*  4740 */ 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625, 24635, 19029, 25188, 24651, 25456, 24687,
  /*  4755 */ 24722, 25057, 24752, 24780, 24810, 24396, 24848, 19765, 21210, 19811, 51055, 19846, 19862, 19210, 19918,
  /*  4770 */ 19888, 19232, 24864, 25502, 24880, 24896, 24288, 24764, 24924, 24552, 19985, 50240, 20008, 20031, 23399,
  /*  4785 */ 20513, 19181, 24940, 25487, 24208, 24967, 25554, 24491, 24538, 25584, 20210, 20226, 20261, 20277, 20319,
  /*  4800 */ 25014, 25030, 25073, 25100, 25219, 24794, 25144, 20484, 25301, 20500, 19638, 25179, 25204, 25256, 25272,
  /*  4815 */ 25288, 20600, 25339, 25355, 25370, 25393, 21452, 24202, 24666, 24980, 20701, 19002, 25115, 34173, 25434,
  /*  4830 */ 25084, 25128, 25472, 25541, 25570, 25600, 25635, 24908, 25651, 25663, 21210, 21210, 21210, 21210, 21210,
  /*  4845 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  4860 */ 21210, 21210, 21210, 21210, 21002, 34484, 21210, 21210, 21210, 31533, 25684, 21210, 21210, 25679, 18598,
  /*  4875 */ 25700, 25710, 25710, 25710, 25714, 21210, 25730, 25744, 43992, 21210, 21210, 21210, 26418, 21210, 22969,
  /*  4890 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21449, 19047, 18835, 20068, 20624, 27298, 18589,
  /*  4905 */ 18614, 50195, 28500, 38420, 21210, 21210, 47888, 21210, 24332, 18638, 18685, 18713, 18718, 18734, 18653,
  /*  4920 */ 18753, 19585, 20614, 20343, 18791, 20120, 18813, 20620, 20349, 18797, 25891, 19321, 18852, 21210, 35787,
  /*  4935 */ 34141, 21210, 21210, 21210, 25779, 18917, 21210, 25323, 18952, 27285, 18968, 19573, 18987, 19045, 19593,
  /*  4950 */ 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143, 21825, 20164, 18835, 22497, 25826, 32177, 21869,
  /*  4965 */ 27091, 36699, 19063, 36689, 42009, 21210, 21210, 19079, 34781, 34183, 19113, 19159, 19175, 19197, 19125,
  /*  4980 */ 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259, 19277, 19295, 19337, 25836, 19359, 19397,
  /*  4995 */ 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625, 25852, 19670, 52075, 19691, 19712,
  /*  5010 */ 25868, 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765, 21210, 19811, 51055, 19846, 19862, 19210,
  /*  5025 */ 19918, 19888, 25907, 19904, 20105, 19934, 25883, 19904, 20105, 19934, 19950, 19985, 50240, 20008, 20031,
  /*  5040 */ 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915, 20180, 20904, 20210, 20226, 20261, 20277,
  /*  5055 */ 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484, 25301, 20500, 19638, 20529, 20549, 20533,
  /*  5070 */ 20553, 20569, 20600, 20640, 20656, 20654, 20672, 21452, 27304, 18835, 20865, 20701, 18668, 18669, 34173,
  /*  5085 */ 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836, 20974, 20986, 21210, 21210, 21210, 21210,
  /*  5100 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  5115 */ 21210, 21210, 21210, 21210, 21210, 21002, 21210, 21210, 21210, 21210, 31533, 21210, 21210, 21210, 21210,
  /*  5130 */ 21210, 25931, 25942, 25942, 25942, 25946, 51601, 25962, 25976, 43992, 21210, 21210, 21210, 26418, 21210,
  /*  5145 */ 22969, 21210, 21210, 21210, 35642, 21210, 21210, 21210, 21210, 21449, 19047, 18835, 20068, 20624, 27298,
  /*  5160 */ 26010, 18614, 50195, 28500, 38420, 21210, 21210, 47888, 21210, 24332, 18638, 18685, 18713, 18718, 18734,
  /*  5175 */ 18653, 18753, 19585, 20614, 20343, 18791, 20120, 18813, 20620, 20349, 18797, 25891, 19321, 18852, 21210,
  /*  5190 */ 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952, 27285, 18968, 19573, 18987, 19045,
  /*  5205 */ 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143, 21825, 20164, 18835, 22497, 19343, 21210,
  /*  5220 */ 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781, 34183, 19113, 19159, 19175, 19197,
  /*  5235 */ 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259, 19277, 19295, 19337, 51752, 19359,
  /*  5250 */ 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625, 19654, 19670, 52075, 19691,
  /*  5265 */ 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765, 21210, 19811, 51055, 19846, 19862,
  /*  5280 */ 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904, 20105, 19934, 19950, 19985, 50240, 20008,
  /*  5295 */ 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915, 20180, 20904, 20210, 20226, 20261,
  /*  5310 */ 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484, 25301, 20500, 19638, 20529, 20549,
  /*  5325 */ 20533, 20553, 20569, 20600, 20640, 20656, 20654, 20672, 21452, 27304, 18835, 20865, 20701, 18668, 18669,
  /*  5340 */ 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836, 20974, 20986, 21210, 21210, 21210,
  /*  5355 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  5370 */ 21210, 21210, 21210, 21210, 21210, 21210, 26035, 32939, 21210, 21210, 21210, 31533, 21210, 21210, 21210,
  /*  5385 */ 21210, 23781, 26070, 26081, 26091, 26101, 26117, 21210, 26145, 26159, 46790, 21210, 21210, 21210, 26418,
  /*  5400 */ 21210, 22969, 21210, 21210, 21210, 23762, 21210, 21210, 21210, 21210, 21449, 19047, 18835, 20068, 20624,
  /*  5415 */ 27298, 26187, 18614, 50195, 28500, 38420, 21210, 21210, 47888, 21210, 24332, 18638, 18685, 18713, 18718,
  /*  5430 */ 18734, 18653, 18753, 19585, 20614, 20343, 18791, 20120, 18813, 20620, 20349, 18797, 25891, 19321, 18852,
  /*  5445 */ 21210, 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952, 27285, 18968, 19573, 18987,
  /*  5460 */ 19045, 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143, 21825, 20164, 18835, 22497, 19343,
  /*  5475 */ 21210, 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781, 34183, 19113, 19159, 19175,
  /*  5490 */ 19197, 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259, 19277, 19295, 19337, 51752,
  /*  5505 */ 19359, 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625, 19654, 19670, 52075,
  /*  5520 */ 19691, 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765, 21210, 19811, 51055, 19846,
  /*  5535 */ 19862, 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904, 20105, 19934, 19950, 19985, 50240,
  /*  5550 */ 20008, 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915, 20180, 20904, 20210, 20226,
  /*  5565 */ 20261, 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484, 25301, 20500, 19638, 20529,
  /*  5580 */ 20549, 20533, 20553, 20569, 20600, 20640, 20656, 20654, 20672, 21452, 27304, 18835, 20865, 20701, 18668,
  /*  5595 */ 18669, 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836, 20974, 20986, 21210, 21210,
  /*  5610 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  5625 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 26212, 22665, 21210, 21210, 21210, 45237, 21210, 21210,
  /*  5640 */ 21210, 21210, 23781, 26247, 26258, 26258, 26258, 26262, 21210, 26278, 26292, 46976, 21210, 21210, 21210,
  /*  5655 */ 26418, 21210, 22969, 21210, 21210, 21210, 44001, 21210, 21210, 21210, 21210, 21449, 19047, 18835, 20068,
  /*  5670 */ 20624, 27298, 26308, 18614, 50195, 28500, 38420, 21210, 21210, 47888, 21210, 24332, 18638, 18685, 18713,
  /*  5685 */ 18718, 18734, 18653, 18753, 19585, 20614, 20343, 18791, 20120, 18813, 20620, 20349, 18797, 25891, 19321,
  /*  5700 */ 18852, 21210, 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952, 27285, 18968, 19573,
  /*  5715 */ 18987, 19045, 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143, 21825, 20164, 18835, 22497,
  /*  5730 */ 19343, 21210, 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781, 34183, 19113, 19159,
  /*  5745 */ 19175, 19197, 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259, 19277, 19295, 19337,
  /*  5760 */ 51752, 19359, 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625, 19654, 19670,
  /*  5775 */ 52075, 19691, 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765, 21210, 19811, 51055,
  /*  5790 */ 19846, 19862, 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904, 20105, 19934, 19950, 19985,
  /*  5805 */ 50240, 20008, 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915, 20180, 20904, 20210,
  /*  5820 */ 20226, 20261, 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484, 25301, 20500, 19638,
  /*  5835 */ 20529, 20549, 20533, 20553, 20569, 20600, 20640, 20656, 20654, 26342, 21452, 27304, 18835, 20865, 20701,
  /*  5850 */ 18668, 18669, 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836, 20974, 20986, 21210,
  /*  5865 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  5880 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 26378, 21210, 21210, 21210, 21210, 31533, 36228,
  /*  5895 */ 21210, 21210, 21703, 20874, 21209, 36230, 21210, 23974, 23978, 21702, 26442, 26477, 43992, 21210, 21210,
  /*  5910 */ 21210, 26418, 21210, 22969, 21210, 36974, 21210, 21210, 21210, 21210, 21210, 21210, 21449, 19047, 18835,
  /*  5925 */ 20068, 20074, 27298, 26512, 18614, 50195, 28500, 38420, 21210, 21210, 47888, 21210, 24332, 18638, 18685,
  /*  5940 */ 18713, 18718, 18734, 18653, 18753, 19585, 20614, 20343, 18791, 20120, 18813, 20620, 20349, 18797, 25891,
  /*  5955 */ 19321, 18852, 21210, 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952, 27285, 18968,
  /*  5970 */ 19573, 18987, 19045, 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143, 21825, 20164, 18835,
  /*  5985 */ 22497, 19343, 21210, 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781, 34183, 19113,
  /*  6000 */ 19159, 19175, 19197, 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259, 19277, 19295,
  /*  6015 */ 19337, 51752, 19359, 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625, 19654,
  /*  6030 */ 19670, 52075, 19691, 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765, 21210, 19811,
  /*  6045 */ 51055, 19846, 19862, 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904, 20105, 19934, 19950,
  /*  6060 */ 19985, 50240, 20008, 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915, 20180, 20904,
  /*  6075 */ 20210, 20226, 20261, 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484, 25301, 20500,
  /*  6090 */ 19638, 20529, 20549, 20533, 20553, 20569, 20600, 20640, 20656, 20654, 20672, 21452, 27304, 18835, 20865,
  /*  6105 */ 20701, 18668, 18669, 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836, 20974, 20986,
  /*  6120 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  6135 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21002, 21210, 21210, 21210, 21210, 31533,
  /*  6150 */ 21210, 21210, 21210, 21210, 23781, 21209, 21210, 21210, 21210, 21210, 21210, 26546, 26605, 43992, 21210,
  /*  6165 */ 21210, 21210, 26418, 21210, 22969, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21449, 19047,
  /*  6180 */ 18835, 20068, 20624, 27298, 18589, 18614, 50195, 28500, 38420, 21210, 21210, 47888, 21210, 24332, 18638,
  /*  6195 */ 18685, 18713, 18718, 18734, 18653, 18753, 19585, 20614, 20343, 18791, 20120, 18813, 20620, 20349, 18797,
  /*  6210 */ 25891, 19321, 18852, 21210, 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952, 27285,
  /*  6225 */ 18968, 19573, 18987, 19045, 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143, 21825, 20164,
  /*  6240 */ 18835, 22497, 19343, 21210, 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781, 34183,
  /*  6255 */ 19113, 19159, 19175, 19197, 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259, 19277,
  /*  6270 */ 19295, 19337, 51752, 19359, 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625,
  /*  6285 */ 19654, 19670, 52075, 19691, 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765, 21210,
  /*  6300 */ 19811, 51055, 19846, 19862, 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904, 20105, 19934,
  /*  6315 */ 19950, 19985, 50240, 20008, 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915, 20180,
  /*  6330 */ 20904, 20210, 20226, 20261, 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484, 25301,
  /*  6345 */ 20500, 19638, 20529, 20549, 20533, 20553, 20569, 20600, 20640, 20656, 20654, 20672, 21452, 27304, 18835,
  /*  6360 */ 20865, 20701, 18668, 18669, 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836, 20974,
  /*  6375 */ 20986, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  6390 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 26633, 21210, 21210, 21210, 21210,
  /*  6405 */ 43825, 21210, 21210, 21210, 21210, 23781, 21209, 21210, 21210, 21210, 20942, 35306, 29883, 26406, 41604,
  /*  6420 */ 21210, 21210, 21210, 26418, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49719,
  /*  6435 */ 49076, 48154, 39785, 31991, 48143, 26655, 21210, 21210, 21210, 32993, 21210, 21210, 21210, 21210, 21210,
  /*  6450 */ 21210, 21210, 21210, 20584, 49074, 49074, 49074, 49074, 26688, 48154, 48154, 48154, 50788, 37350, 37350,
  /*  6465 */ 37350, 37350, 48137, 35317, 21210, 21210, 21210, 21210, 21210, 21210, 47020, 21210, 21210, 21210, 21210,
  /*  6480 */ 20583, 49074, 49074, 49074, 49074, 49074, 35080, 48154, 48154, 48154, 48154, 48154, 22985, 37350, 37350,
  /*  6495 */ 37350, 37350, 37352, 28471, 26708, 26745, 21210, 21210, 21210, 21210, 33391, 21210, 21210, 21210, 21210,
  /*  6510 */ 49073, 49074, 49074, 49074, 49074, 20468, 48154, 48154, 48154, 48154, 48154, 37340, 37350, 37350, 37350,
  /*  6525 */ 37350, 37350, 28465, 24013, 21210, 21210, 21210, 21210, 47379, 21210, 21210, 49718, 49074, 49074, 49074,
  /*  6540 */ 49074, 37320, 48154, 48154, 48154, 48154, 33910, 37349, 37350, 37350, 37350, 37350, 28469, 32549, 21210,
  /*  6555 */ 21210, 21210, 21210, 21210, 49070, 49074, 49074, 49074, 24050, 48154, 48154, 48154, 24068, 37350, 37350,
  /*  6570 */ 37350, 32539, 21210, 21210, 43688, 21210, 49716, 49074, 49074, 30644, 48154, 48154, 43916, 37350, 37350,
  /*  6585 */ 23547, 32545, 21210, 21210, 21210, 49721, 49074, 49075, 48154, 48154, 43919, 37350, 37350, 29001, 21210,
  /*  6600 */ 20582, 49720, 49074, 48151, 48155, 37350, 29352, 46360, 49717, 49077, 48155, 37350, 29896, 49722, 48149,
  /*  6615 */ 43923, 40281, 49072, 48153, 37351, 49717, 30647, 43922, 41422, 30646, 43922, 28390, 48129, 33032, 28081,
  /*  6630 */ 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  6645 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 26633, 21210, 21210, 21210,
  /*  6660 */ 21210, 43825, 21210, 21210, 21210, 21210, 23781, 21209, 21210, 21210, 21210, 20942, 35306, 29883, 26406,
  /*  6675 */ 41604, 21210, 21210, 21210, 26418, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  6690 */ 49719, 49076, 48154, 39785, 31991, 48143, 26655, 21210, 21210, 21210, 32993, 21210, 21210, 21210, 21210,
  /*  6705 */ 21210, 21210, 21210, 21210, 20584, 49074, 49074, 49074, 49074, 26688, 48154, 48154, 48154, 50788, 37350,
  /*  6720 */ 37350, 37350, 37350, 48137, 35317, 21210, 21210, 21210, 21210, 21210, 21210, 47020, 21210, 21210, 21210,
  /*  6735 */ 21210, 20583, 49074, 49074, 49074, 49074, 49074, 35080, 48154, 48154, 48154, 48154, 48154, 22985, 37350,
  /*  6750 */ 37350, 37350, 37350, 37352, 28471, 26708, 26745, 21210, 21210, 21210, 21210, 33391, 21210, 21210, 21210,
  /*  6765 */ 21210, 49073, 49074, 49074, 49074, 49074, 20468, 48154, 48154, 48154, 48154, 48154, 37340, 37350, 37350,
  /*  6780 */ 37350, 37350, 37350, 28465, 24013, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49718, 49074, 49074,
  /*  6795 */ 49074, 49074, 37320, 48154, 48154, 48154, 48154, 33910, 37349, 37350, 37350, 37350, 37350, 28469, 32549,
  /*  6810 */ 21210, 21210, 21210, 21210, 21210, 49070, 49074, 49074, 49074, 24050, 48154, 48154, 48154, 24068, 37350,
  /*  6825 */ 37350, 37350, 32539, 21210, 21210, 21210, 21210, 49716, 49074, 49074, 30644, 48154, 48154, 43916, 37350,
  /*  6840 */ 37350, 23547, 32545, 21210, 21210, 21210, 49721, 49074, 49075, 48154, 48154, 43919, 37350, 37350, 29001,
  /*  6855 */ 21210, 20582, 49720, 49074, 48151, 48155, 37350, 29352, 46360, 49717, 49077, 48155, 37350, 29896, 49722,
  /*  6870 */ 48149, 43923, 40281, 49072, 48153, 37351, 49717, 30647, 43922, 41422, 30646, 43922, 28390, 48129, 33032,
  /*  6885 */ 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  6900 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 26633, 21210, 21210,
  /*  6915 */ 21210, 21210, 43825, 21210, 21210, 21210, 21210, 23781, 21209, 21210, 21210, 21210, 20942, 35306, 29883,
  /*  6930 */ 26406, 41604, 21210, 21210, 21210, 26418, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  6945 */ 21210, 49719, 49076, 48154, 39785, 31991, 48143, 26655, 21210, 21210, 21210, 32993, 21210, 21210, 21210,
  /*  6960 */ 21210, 21210, 21210, 21210, 21210, 20584, 49074, 49074, 49074, 49074, 26688, 48154, 48154, 48154, 50788,
  /*  6975 */ 37350, 37350, 37350, 37350, 48137, 35317, 21210, 21210, 21210, 21210, 21210, 21210, 47020, 51343, 21210,
  /*  6990 */ 21210, 21210, 20583, 49074, 49074, 49074, 49074, 49074, 35080, 48154, 48154, 48154, 48154, 48154, 22985,
  /*  7005 */ 37350, 37350, 37350, 37350, 37352, 28471, 26708, 26745, 21210, 21210, 21210, 21210, 33391, 21210, 21210,
  /*  7020 */ 21210, 21210, 49073, 49074, 49074, 49074, 49074, 20468, 48154, 48154, 48154, 48154, 48154, 37340, 37350,
  /*  7035 */ 37350, 37350, 37350, 37350, 28465, 24013, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49718, 49074,
  /*  7050 */ 49074, 49074, 49074, 37320, 48154, 48154, 48154, 48154, 33910, 37349, 37350, 37350, 37350, 37350, 28469,
  /*  7065 */ 32549, 21210, 21210, 21210, 21210, 21210, 49070, 49074, 49074, 49074, 24050, 48154, 48154, 48154, 24068,
  /*  7080 */ 37350, 37350, 37350, 32539, 21210, 21210, 21210, 21210, 49716, 49074, 49074, 30644, 48154, 48154, 43916,
  /*  7095 */ 37350, 37350, 23547, 32545, 21210, 21210, 21210, 49721, 49074, 49075, 48154, 48154, 43919, 37350, 37350,
  /*  7110 */ 29001, 21210, 20582, 49720, 49074, 48151, 48155, 37350, 29352, 46360, 49717, 49077, 48155, 37350, 29896,
  /*  7125 */ 49722, 48149, 43923, 40281, 49072, 48153, 37351, 49717, 30647, 43922, 41422, 30646, 43922, 28390, 48129,
  /*  7140 */ 33032, 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  7155 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 26633, 21210,
  /*  7170 */ 21210, 21210, 21210, 43825, 21210, 21210, 21210, 21210, 23781, 21209, 21210, 21210, 21210, 20942, 35306,
  /*  7185 */ 29883, 26406, 41604, 21210, 21210, 21210, 26418, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  7200 */ 21210, 21210, 49719, 49076, 48154, 39785, 31991, 48143, 26655, 21210, 21210, 21210, 32993, 21210, 21210,
  /*  7215 */ 21210, 21210, 21210, 21210, 21210, 21210, 20584, 49074, 49074, 49074, 49074, 26688, 48154, 48154, 48154,
  /*  7230 */ 50788, 37350, 37350, 37350, 37350, 48137, 35317, 21210, 21210, 21210, 21210, 21210, 21210, 47020, 21210,
  /*  7245 */ 21210, 21210, 21210, 20583, 49074, 49074, 49074, 49074, 49074, 35080, 48154, 48154, 48154, 48154, 48154,
  /*  7260 */ 22985, 37350, 37350, 37350, 37350, 37352, 28471, 26708, 26745, 21210, 21210, 21210, 21210, 33391, 48606,
  /*  7275 */ 21210, 21210, 21210, 49073, 49074, 49074, 49074, 49074, 20468, 48154, 48154, 48154, 48154, 48154, 37340,
  /*  7290 */ 37350, 37350, 37350, 37350, 37350, 28465, 24013, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49718,
  /*  7305 */ 49074, 49074, 49074, 49074, 37320, 48154, 48154, 48154, 48154, 33910, 37349, 37350, 37350, 37350, 37350,
  /*  7320 */ 28469, 32549, 21210, 21210, 21210, 21210, 21210, 49070, 49074, 49074, 49074, 24050, 48154, 48154, 48154,
  /*  7335 */ 24068, 37350, 37350, 37350, 32539, 21210, 21210, 21210, 21210, 49716, 49074, 49074, 30644, 48154, 48154,
  /*  7350 */ 43916, 37350, 37350, 23547, 32545, 21210, 21210, 21210, 49721, 49074, 49075, 48154, 48154, 43919, 37350,
  /*  7365 */ 37350, 29001, 21210, 20582, 49720, 49074, 48151, 48155, 37350, 29352, 46360, 49717, 49077, 48155, 37350,
  /*  7380 */ 29896, 49722, 48149, 43923, 40281, 49072, 48153, 37351, 49717, 30647, 43922, 41422, 30646, 43922, 28390,
  /*  7395 */ 48129, 33032, 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  7410 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 26633,
  /*  7425 */ 21210, 21210, 21210, 21210, 43825, 21210, 21210, 21210, 21210, 23781, 21209, 21210, 21210, 21210, 20942,
  /*  7440 */ 35306, 29883, 26406, 41604, 21210, 21210, 21210, 26418, 21210, 31224, 21210, 21210, 21210, 21210, 21210,
  /*  7455 */ 21210, 21210, 21210, 49719, 49076, 48154, 39785, 31991, 48143, 26655, 21210, 21210, 21210, 32993, 21210,
  /*  7470 */ 21210, 31492, 21210, 21210, 21210, 21210, 21210, 20584, 49074, 49074, 49074, 49074, 26688, 48154, 48154,
  /*  7485 */ 48154, 50788, 37350, 37350, 37350, 37350, 48137, 35317, 21210, 21210, 21210, 21210, 21210, 21210, 47020,
  /*  7500 */ 21210, 21210, 21210, 21210, 20583, 49074, 49074, 49074, 49074, 49074, 35080, 48154, 48154, 48154, 48154,
  /*  7515 */ 48154, 22985, 37350, 37350, 37350, 37350, 37352, 28471, 26708, 26745, 21210, 21210, 21210, 21210, 33391,
  /*  7530 */ 21210, 21210, 21210, 21210, 49073, 49074, 49074, 49074, 49074, 20468, 48154, 48154, 48154, 48154, 48154,
  /*  7545 */ 37340, 37350, 37350, 37350, 37350, 37350, 28465, 24013, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  7560 */ 49718, 49074, 49074, 49074, 49074, 37320, 48154, 48154, 48154, 48154, 33910, 37349, 37350, 37350, 37350,
  /*  7575 */ 37350, 28469, 32549, 21210, 21210, 21210, 21210, 21210, 49070, 49074, 49074, 49074, 24050, 48154, 48154,
  /*  7590 */ 48154, 24068, 37350, 37350, 37350, 32539, 21210, 21210, 21210, 21210, 49716, 49074, 49074, 30644, 48154,
  /*  7605 */ 48154, 43916, 37350, 37350, 23547, 32545, 21210, 21210, 21210, 49721, 49074, 49075, 48154, 48154, 43919,
  /*  7620 */ 37350, 37350, 29001, 21210, 20582, 49720, 49074, 48151, 48155, 37350, 29352, 46360, 49717, 49077, 48155,
  /*  7635 */ 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153, 37351, 49717, 30647, 43922, 41422, 30646, 43922,
  /*  7650 */ 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  7665 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  7680 */ 26633, 21210, 21210, 21210, 21210, 43825, 21210, 21210, 21210, 21210, 23781, 21209, 21210, 21210, 21210,
  /*  7695 */ 20942, 35306, 29883, 26406, 41604, 21210, 21210, 21210, 26418, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  7710 */ 21210, 21210, 21210, 21210, 49719, 49076, 48154, 39785, 31991, 48143, 26655, 21210, 21210, 21210, 32993,
  /*  7725 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 20584, 49074, 49074, 49074, 49074, 26688, 48154,
  /*  7740 */ 48154, 48154, 50788, 37350, 37350, 37350, 37350, 48137, 35317, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  7755 */ 21210, 21210, 21210, 21210, 21210, 20583, 49074, 49074, 49074, 49074, 49074, 35080, 48154, 48154, 48154,
  /*  7770 */ 48154, 48154, 22985, 37350, 37350, 37350, 37350, 37352, 28471, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  7785 */ 21210, 21210, 21210, 21210, 21210, 49073, 49074, 49074, 49074, 49074, 20468, 48154, 48154, 48154, 48154,
  /*  7800 */ 48154, 37340, 37350, 37350, 37350, 37350, 37350, 28465, 46357, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  7815 */ 21210, 49718, 49074, 49074, 49074, 49074, 29068, 48154, 48154, 48154, 48154, 46167, 37349, 37350, 37350,
  /*  7830 */ 37350, 37350, 28469, 32549, 21210, 21210, 21210, 21210, 21210, 49070, 49074, 49074, 49074, 29078, 48154,
  /*  7845 */ 48154, 48154, 37348, 37350, 37350, 37350, 32539, 21210, 21210, 21210, 21210, 49716, 49074, 49074, 30644,
  /*  7860 */ 48154, 48154, 43916, 37350, 37350, 23547, 32545, 21210, 21210, 21210, 49721, 49074, 49075, 48154, 48154,
  /*  7875 */ 43919, 37350, 37350, 29001, 21210, 20582, 49720, 49074, 48151, 48155, 37350, 29352, 46360, 49717, 49077,
  /*  7890 */ 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153, 37351, 49717, 30647, 43922, 41422, 30646,
  /*  7905 */ 43922, 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  7920 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  7935 */ 21210, 26633, 21210, 21210, 21210, 21210, 43825, 21210, 21210, 21210, 21210, 23781, 21209, 21210, 21210,
  /*  7950 */ 21210, 20942, 35306, 29883, 26406, 41604, 21210, 21210, 21210, 26418, 21210, 21210, 21210, 21210, 21210,
  /*  7965 */ 21210, 21210, 21210, 21210, 21210, 49719, 49076, 48154, 39785, 31991, 48143, 26764, 21210, 21210, 21210,
  /*  7980 */ 32993, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 20584, 49074, 49074, 49074, 49074, 26688,
  /*  7995 */ 48154, 48154, 48154, 50788, 37350, 37350, 37350, 37350, 48137, 35317, 21210, 21210, 21210, 21210, 21210,
  /*  8010 */ 21210, 21210, 21210, 21210, 21210, 21210, 20583, 49074, 49074, 49074, 49074, 49074, 35080, 48154, 48154,
  /*  8025 */ 48154, 48154, 48154, 22985, 37350, 37350, 37350, 37350, 37352, 28471, 21210, 21210, 21210, 21210, 21210,
  /*  8040 */ 21210, 21210, 21210, 21210, 21210, 21210, 49073, 49074, 49074, 49074, 49074, 20468, 48154, 48154, 48154,
  /*  8055 */ 48154, 48154, 37340, 37350, 37350, 37350, 37350, 37350, 28465, 46357, 21210, 21210, 21210, 21210, 21210,
  /*  8070 */ 21210, 21210, 49718, 49074, 49074, 49074, 49074, 29068, 48154, 48154, 48154, 48154, 46167, 37349, 37350,
  /*  8085 */ 37350, 37350, 37350, 28469, 32549, 21210, 21210, 21210, 21210, 21210, 49070, 49074, 49074, 49074, 29078,
  /*  8100 */ 48154, 48154, 48154, 37348, 37350, 37350, 37350, 32539, 21210, 21210, 21210, 21210, 49716, 49074, 49074,
  /*  8115 */ 30644, 48154, 48154, 43916, 37350, 37350, 23547, 32545, 21210, 21210, 21210, 49721, 49074, 49075, 48154,
  /*  8130 */ 48154, 43919, 37350, 37350, 29001, 21210, 20582, 49720, 49074, 48151, 48155, 37350, 29352, 46360, 49717,
  /*  8145 */ 49077, 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153, 37351, 49717, 30647, 43922, 41422,
  /*  8160 */ 30646, 43922, 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  8175 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  8190 */ 21210, 21210, 26633, 21210, 21210, 21210, 21210, 43825, 21210, 21210, 21210, 21210, 23781, 21209, 21210,
  /*  8205 */ 21210, 21210, 20942, 35306, 29883, 43040, 41604, 21210, 21210, 21210, 26418, 21210, 21210, 21210, 21210,
  /*  8220 */ 21210, 21210, 21210, 21210, 21210, 21210, 49719, 49076, 48154, 39785, 31991, 48143, 26655, 21210, 21210,
  /*  8235 */ 21210, 32993, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 20584, 49074, 49074, 49074, 49074,
  /*  8250 */ 26688, 48154, 48154, 48154, 50788, 37350, 37350, 37350, 37350, 48137, 35317, 21210, 21210, 21210, 21210,
  /*  8265 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 20583, 49074, 49074, 49074, 49074, 49074, 35080, 48154,
  /*  8280 */ 48154, 48154, 48154, 48154, 22985, 37350, 37350, 37350, 37350, 37352, 28471, 21210, 21210, 21210, 21210,
  /*  8295 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49073, 49074, 49074, 49074, 49074, 20468, 48154, 48154,
  /*  8310 */ 48154, 48154, 48154, 37340, 37350, 37350, 37350, 37350, 37350, 28465, 46357, 21210, 21210, 21210, 21210,
  /*  8325 */ 21210, 21210, 21210, 49718, 49074, 49074, 49074, 49074, 29068, 48154, 48154, 48154, 48154, 46167, 37349,
  /*  8340 */ 37350, 37350, 37350, 37350, 28469, 32549, 21210, 21210, 21210, 21210, 21210, 49070, 49074, 49074, 49074,
  /*  8355 */ 29078, 48154, 48154, 48154, 37348, 37350, 37350, 37350, 32539, 21210, 21210, 21210, 21210, 49716, 49074,
  /*  8370 */ 49074, 30644, 48154, 48154, 43916, 37350, 37350, 23547, 32545, 21210, 21210, 21210, 49721, 49074, 49075,
  /*  8385 */ 48154, 48154, 43919, 37350, 37350, 29001, 21210, 20582, 49720, 49074, 48151, 48155, 37350, 29352, 46360,
  /*  8400 */ 49717, 49077, 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153, 37351, 49717, 30647, 43922,
  /*  8415 */ 41422, 30646, 43922, 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  8430 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  8445 */ 21210, 21210, 21210, 26633, 21210, 21210, 21210, 21210, 43825, 21210, 21210, 21210, 21210, 23781, 26789,
  /*  8460 */ 21210, 21210, 21210, 20942, 35306, 29883, 26406, 41604, 21210, 21210, 21210, 26418, 21210, 21210, 21210,
  /*  8475 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49719, 49076, 48154, 39785, 31991, 48143, 26655, 21210,
  /*  8490 */ 21210, 21210, 32993, 21210, 21210, 21210, 23667, 21210, 21210, 21210, 21210, 20584, 49074, 49074, 49074,
  /*  8505 */ 49074, 26688, 48154, 48154, 48154, 50788, 37350, 37350, 37350, 37350, 48137, 35317, 21210, 21210, 21210,
  /*  8520 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 20583, 49074, 49074, 49074, 49074, 49074, 35080,
  /*  8535 */ 48154, 48154, 48154, 48154, 48154, 22985, 37350, 37350, 37350, 37350, 37352, 28471, 21210, 21210, 21210,
  /*  8550 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49073, 49074, 49074, 49074, 49074, 20468, 48154,
  /*  8565 */ 48154, 48154, 48154, 48154, 37340, 37350, 37350, 37350, 37350, 37350, 28465, 46357, 21210, 21210, 21210,
  /*  8580 */ 21210, 21210, 21210, 21210, 49718, 49074, 49074, 49074, 49074, 29068, 48154, 48154, 48154, 48154, 46167,
  /*  8595 */ 37349, 37350, 37350, 37350, 37350, 28469, 32549, 21210, 21210, 21210, 21210, 21210, 49070, 49074, 49074,
  /*  8610 */ 49074, 29078, 48154, 48154, 48154, 37348, 37350, 37350, 37350, 32539, 21210, 21210, 21210, 21210, 49716,
  /*  8625 */ 49074, 49074, 30644, 48154, 48154, 43916, 37350, 37350, 23547, 32545, 21210, 21210, 21210, 49721, 49074,
  /*  8640 */ 49075, 48154, 48154, 43919, 37350, 37350, 29001, 21210, 20582, 49720, 49074, 48151, 48155, 37350, 29352,
  /*  8655 */ 46360, 49717, 49077, 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153, 37351, 49717, 30647,
  /*  8670 */ 43922, 41422, 30646, 43922, 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210,
  /*  8685 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  8700 */ 21210, 21210, 21210, 21210, 26633, 21210, 21210, 21210, 21210, 43825, 21210, 21210, 21210, 21210, 23781,
  /*  8715 */ 21209, 21210, 21210, 21210, 49915, 26812, 26854, 26826, 41604, 21210, 21210, 21210, 26418, 21210, 21210,
  /*  8730 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49719, 49076, 48154, 39785, 31991, 48143, 26655,
  /*  8745 */ 21210, 21210, 21210, 32993, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 20584, 49074, 49074,
  /*  8760 */ 49074, 49074, 26688, 48154, 48154, 48154, 50788, 37350, 37350, 37350, 37350, 48137, 35317, 21210, 21210,
  /*  8775 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 20583, 49074, 49074, 49074, 49074, 49074,
  /*  8790 */ 35080, 48154, 48154, 48154, 48154, 48154, 22985, 37350, 37350, 37350, 37350, 37352, 28471, 21210, 21210,
  /*  8805 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49073, 49074, 49074, 49074, 49074, 20468,
  /*  8820 */ 48154, 48154, 48154, 48154, 48154, 37340, 37350, 37350, 37350, 37350, 37350, 28465, 46357, 21210, 21210,
  /*  8835 */ 21210, 21210, 21210, 21210, 21210, 49718, 49074, 49074, 49074, 49074, 29068, 48154, 48154, 48154, 48154,
  /*  8850 */ 46167, 37349, 37350, 37350, 37350, 37350, 28469, 32549, 21210, 21210, 21210, 21210, 21210, 49070, 49074,
  /*  8865 */ 49074, 49074, 29078, 48154, 48154, 48154, 37348, 37350, 37350, 37350, 32539, 21210, 21210, 21210, 21210,
  /*  8880 */ 49716, 49074, 49074, 30644, 48154, 48154, 43916, 37350, 37350, 23547, 32545, 21210, 21210, 21210, 49721,
  /*  8895 */ 49074, 49075, 48154, 48154, 43919, 37350, 37350, 29001, 21210, 20582, 49720, 49074, 48151, 48155, 37350,
  /*  8910 */ 29352, 46360, 49717, 49077, 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153, 37351, 49717,
  /*  8925 */ 30647, 43922, 41422, 30646, 43922, 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210, 21210, 21210,
  /*  8940 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  8955 */ 21210, 21210, 21210, 21210, 21210, 26633, 21210, 21210, 21210, 21210, 43825, 21210, 21210, 21210, 21210,
  /*  8970 */ 23781, 21209, 21210, 21210, 21210, 20942, 35306, 29883, 26406, 41604, 21210, 21210, 21210, 26418, 21210,
  /*  8985 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49719, 49076, 48154, 39785, 31991, 48143,
  /*  9000 */ 26655, 21210, 21210, 21210, 32993, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 20584, 49074,
  /*  9015 */ 49074, 49074, 49074, 26688, 48154, 48154, 48154, 50788, 37350, 37350, 37350, 37350, 48137, 35317, 21210,
  /*  9030 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 20583, 49074, 49074, 49074, 49074,
  /*  9045 */ 49074, 35080, 48154, 48154, 48154, 48154, 48154, 22985, 37350, 37350, 37350, 37350, 37352, 28471, 21210,
  /*  9060 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49073, 49074, 49074, 49074, 49074,
  /*  9075 */ 20468, 48154, 48154, 48154, 48154, 48154, 37340, 37350, 37350, 37350, 37350, 37350, 28465, 46357, 21210,
  /*  9090 */ 21210, 21210, 21210, 21210, 21210, 21210, 49718, 49074, 49074, 49074, 49074, 29068, 48154, 48154, 48154,
  /*  9105 */ 48154, 46167, 37349, 37350, 37350, 37350, 37350, 28469, 32549, 21210, 21210, 35507, 21210, 21210, 49070,
  /*  9120 */ 49074, 49074, 49074, 29078, 48154, 48154, 48154, 37348, 37350, 37350, 37350, 32539, 21210, 21210, 21210,
  /*  9135 */ 21210, 49716, 49074, 49074, 30644, 48154, 48154, 43916, 37350, 37350, 23547, 32545, 21210, 21210, 21210,
  /*  9150 */ 49721, 49074, 49075, 48154, 48154, 43919, 37350, 37350, 29001, 21210, 20582, 49720, 49074, 48151, 48155,
  /*  9165 */ 37350, 29352, 46360, 49717, 49077, 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153, 37351,
  /*  9180 */ 49717, 30647, 43922, 41422, 30646, 43922, 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210, 21210,
  /*  9195 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  9210 */ 21210, 21210, 21210, 21210, 21210, 21210, 26905, 21210, 21210, 21210, 21210, 43825, 21210, 21210, 21210,
  /*  9225 */ 21210, 23781, 21209, 21210, 21210, 21210, 20942, 35306, 29883, 26406, 41604, 21210, 21210, 21210, 26418,
  /*  9240 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49719, 49076, 48154, 39785, 31991,
  /*  9255 */ 48143, 26655, 21210, 21210, 21210, 32993, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 20584,
  /*  9270 */ 49074, 49074, 49074, 49074, 26688, 48154, 48154, 48154, 50788, 37350, 37350, 37350, 37350, 48137, 35317,
  /*  9285 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 20583, 49074, 49074, 49074,
  /*  9300 */ 49074, 49074, 35080, 48154, 48154, 48154, 48154, 48154, 22985, 37350, 37350, 37350, 37350, 37352, 28471,
  /*  9315 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49073, 49074, 49074, 49074,
  /*  9330 */ 49074, 20468, 48154, 48154, 48154, 48154, 48154, 37340, 37350, 37350, 37350, 37350, 37350, 28465, 46357,
  /*  9345 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49718, 49074, 49074, 49074, 49074, 29068, 48154, 48154,
  /*  9360 */ 48154, 48154, 46167, 37349, 37350, 37350, 37350, 37350, 28469, 32549, 21210, 21210, 21210, 21210, 21210,
  /*  9375 */ 49070, 49074, 49074, 49074, 29078, 48154, 48154, 48154, 37348, 37350, 37350, 37350, 32539, 21210, 21210,
  /*  9390 */ 21210, 21210, 49716, 49074, 49074, 30644, 48154, 48154, 43916, 37350, 37350, 23547, 32545, 21210, 21210,
  /*  9405 */ 21210, 49721, 49074, 49075, 48154, 48154, 43919, 37350, 37350, 29001, 21210, 20582, 49720, 49074, 48151,
  /*  9420 */ 48155, 37350, 29352, 46360, 49717, 49077, 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153,
  /*  9435 */ 37351, 49717, 30647, 43922, 41422, 30646, 43922, 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210,
  /*  9450 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  9465 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21002, 21210, 21210, 21210, 21210, 31533, 21210, 21210,
  /*  9480 */ 21210, 21210, 23781, 26927, 26947, 26957, 26931, 26991, 22951, 26947, 27019, 43992, 21210, 21210, 21210,
  /*  9495 */ 26418, 21210, 22969, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21449, 19047, 18835, 20068,
  /*  9510 */ 20624, 27298, 18589, 18614, 50195, 28500, 38420, 21210, 21210, 47888, 45018, 24332, 18638, 18685, 18713,
  /*  9525 */ 18718, 18734, 18653, 18753, 19585, 20614, 20343, 18791, 20120, 18813, 20620, 20349, 18797, 25891, 20805,
  /*  9540 */ 18852, 21210, 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952, 27285, 18968, 19573,
  /*  9555 */ 18987, 19045, 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143, 21825, 20164, 18835, 22497,
  /*  9570 */ 19343, 21210, 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781, 34183, 19113, 19159,
  /*  9585 */ 19175, 19197, 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259, 19277, 19295, 19337,
  /*  9600 */ 51752, 19359, 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625, 19654, 19670,
  /*  9615 */ 52075, 19691, 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765, 21210, 19811, 51055,
  /*  9630 */ 19846, 19862, 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904, 20105, 19934, 19950, 19985,
  /*  9645 */ 50240, 20008, 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915, 20180, 20904, 20210,
  /*  9660 */ 27066, 20261, 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484, 25301, 20500, 19638,
  /*  9675 */ 20529, 20549, 20533, 20553, 20569, 20600, 20640, 20656, 20654, 20672, 21452, 27304, 18835, 20865, 20701,
  /*  9690 */ 18668, 18669, 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836, 20974, 20986, 21210,
  /*  9705 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  9720 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21002, 21210, 21210, 21210, 21210, 31533, 21210,
  /*  9735 */ 21210, 21210, 21210, 23781, 21209, 21210, 21210, 21210, 21210, 21210, 21210, 50176, 43992, 21210, 21210,
  /*  9750 */ 21210, 26418, 21210, 22969, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21449, 19047, 18835,
  /*  9765 */ 20068, 20624, 27298, 18589, 18614, 50195, 28500, 38420, 21210, 21210, 47888, 21210, 24332, 18638, 18685,
  /*  9780 */ 18713, 18718, 18734, 18653, 18753, 19585, 20614, 20343, 18791, 20120, 18813, 20620, 20349, 18797, 25891,
  /*  9795 */ 19321, 18852, 21210, 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952, 27285, 18968,
  /*  9810 */ 19573, 18987, 19045, 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143, 21825, 20164, 18835,
  /*  9825 */ 22497, 19343, 21210, 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781, 34183, 19113,
  /*  9840 */ 19159, 19175, 19197, 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259, 19277, 19295,
  /*  9855 */ 19337, 51752, 19359, 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625, 19654,
  /*  9870 */ 19670, 52075, 19691, 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765, 21210, 19811,
  /*  9885 */ 51055, 19846, 19862, 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904, 20105, 19934, 19950,
  /*  9900 */ 19985, 50240, 20008, 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915, 20180, 20904,
  /*  9915 */ 20210, 20226, 20261, 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484, 25301, 20500,
  /*  9930 */ 19638, 20529, 20549, 20533, 20553, 20569, 20600, 20640, 20656, 20654, 20672, 21452, 27304, 18835, 20865,
  /*  9945 */ 20701, 18668, 18669, 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836, 20974, 20986,
  /*  9960 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /*  9975 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 27107, 27129, 21210, 21210, 21210, 31533,
  /*  9990 */ 21210, 21210, 21210, 21210, 23781, 27146, 21210, 24132, 24141, 24145, 21210, 27149, 27165, 43992, 21210,
  /* 10005 */ 21210, 21210, 26418, 21210, 22969, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21449, 19047,
  /* 10020 */ 18835, 20068, 20624, 27298, 27211, 18614, 50195, 28500, 38420, 21210, 21210, 47888, 21210, 24332, 18638,
  /* 10035 */ 18685, 18713, 18718, 18734, 18653, 18753, 19585, 20614, 20343, 18791, 20120, 18813, 20620, 20349, 18797,
  /* 10050 */ 25891, 19321, 18852, 21210, 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952, 27285,
  /* 10065 */ 18968, 19573, 18987, 19045, 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143, 21825, 20164,
  /* 10080 */ 18835, 22497, 19343, 21210, 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781, 34183,
  /* 10095 */ 19113, 19159, 19175, 19197, 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259, 19277,
  /* 10110 */ 19295, 19337, 51752, 19359, 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625,
  /* 10125 */ 19654, 19670, 52075, 19691, 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765, 21210,
  /* 10140 */ 19811, 51055, 19846, 19862, 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904, 20105, 19934,
  /* 10155 */ 19950, 19985, 50240, 20008, 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915, 20180,
  /* 10170 */ 20904, 20210, 20226, 20261, 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484, 27272,
  /* 10185 */ 20500, 19638, 20529, 20549, 20533, 20553, 27325, 20600, 20640, 20656, 20654, 27360, 21452, 27304, 18835,
  /* 10200 */ 20865, 20701, 18668, 18669, 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836, 20974,
  /* 10215 */ 20986, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 10230 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 27395, 27417, 21210, 21210, 21210,
  /* 10245 */ 31533, 21210, 21210, 21210, 21210, 23781, 21209, 21210, 21210, 21210, 21210, 27130, 27434, 27464, 27528,
  /* 10260 */ 21210, 21210, 21210, 26418, 21210, 22969, 21210, 21210, 21210, 25157, 21210, 21210, 21210, 21210, 21449,
  /* 10275 */ 19047, 18835, 20068, 20125, 27298, 27553, 18614, 50195, 28500, 38420, 21210, 21210, 47888, 21210, 24332,
  /* 10290 */ 18638, 18685, 18713, 18718, 18734, 18653, 18753, 19585, 20614, 20343, 18791, 20120, 18813, 20620, 20349,
  /* 10305 */ 18797, 25891, 19321, 18852, 21210, 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952,
  /* 10320 */ 27285, 18968, 19573, 18987, 19045, 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143, 21825,
  /* 10335 */ 20164, 18835, 22497, 19343, 21210, 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781,
  /* 10350 */ 34183, 19113, 19159, 19175, 19197, 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259,
  /* 10365 */ 19277, 19295, 19337, 51752, 19359, 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765,
  /* 10380 */ 19625, 19654, 19670, 52075, 19691, 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765,
  /* 10395 */ 21210, 19811, 51055, 19846, 19862, 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904, 20105,
  /* 10410 */ 19934, 19950, 19985, 50240, 20008, 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915,
  /* 10425 */ 20180, 20904, 20210, 20226, 20261, 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484,
  /* 10440 */ 25301, 20500, 19638, 20529, 20549, 20533, 20553, 20569, 20600, 20640, 20656, 20654, 20672, 21452, 27304,
  /* 10455 */ 18835, 20865, 20701, 18668, 18669, 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836,
  /* 10470 */ 20974, 20986, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 10485 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 26633, 21210, 27604, 21210,
  /* 10500 */ 21210, 43825, 26129, 27603, 21210, 27588, 27620, 27655, 27666, 27676, 27692, 27703, 27734, 27719, 27748,
  /* 10515 */ 42056, 27784, 27923, 21210, 27803, 27838, 27857, 20041, 24242, 27904, 27941, 27925, 27970, 27952, 28009,
  /* 10530 */ 41693, 28025, 28054, 28070, 28097, 28132, 28191, 28226, 21210, 21210, 32993, 38271, 35668, 21210, 39319,
  /* 10545 */ 28244, 43263, 21210, 47013, 42252, 49074, 49074, 49074, 47628, 26688, 48154, 48154, 30088, 50788, 37350,
  /* 10560 */ 37350, 37350, 47835, 41243, 35317, 21210, 22584, 21210, 28264, 45026, 51099, 47020, 28282, 34792, 21210,
  /* 10575 */ 28300, 35901, 51444, 28319, 49074, 42753, 31768, 36423, 28338, 48154, 48154, 32833, 39774, 28375, 37472,
  /* 10590 */ 37350, 37350, 28433, 28455, 36174, 26708, 28487, 21210, 41082, 19830, 21210, 28523, 21210, 21210, 21309,
  /* 10605 */ 28573, 28591, 44660, 34935, 46399, 49074, 28641, 32403, 28676, 44751, 38508, 48154, 28694, 39582, 37350,
  /* 10620 */ 40535, 38726, 39600, 29471, 28718, 27503, 29692, 21210, 31695, 36662, 27448, 21210, 49718, 28758, 49074,
  /* 10635 */ 49074, 28792, 37320, 46162, 28808, 48154, 45991, 50150, 32868, 47308, 37350, 42793, 42446, 28469, 23587,
  /* 10650 */ 28825, 29150, 21210, 21907, 21210, 28841, 28887, 20460, 49074, 28916, 50426, 47778, 48154, 28932, 49665,
  /* 10665 */ 37133, 37350, 39144, 26231, 21210, 21210, 29750, 49716, 39021, 49074, 28948, 46610, 48154, 28972, 44039,
  /* 10680 */ 37350, 28991, 32545, 21210, 21210, 21210, 49721, 49074, 49075, 48154, 48154, 43919, 37350, 37350, 29001,
  /* 10695 */ 21210, 20582, 49720, 49074, 48151, 48155, 37350, 29352, 46360, 49717, 49077, 48155, 37350, 29023, 29058,
  /* 10710 */ 28400, 28549, 23153, 29096, 45210, 29119, 32624, 30647, 43922, 41929, 30646, 43922, 28390, 48129, 33032,
  /* 10725 */ 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 10740 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 26633, 21210, 29145,
  /* 10755 */ 21210, 21210, 43825, 21210, 21210, 21210, 21210, 18936, 29166, 21210, 39485, 39494, 29193, 29209, 29225,
  /* 10770 */ 29241, 41604, 21210, 21210, 21210, 26418, 21210, 21210, 21210, 21210, 24989, 21210, 21210, 21210, 21210,
  /* 10785 */ 21210, 49719, 49076, 28776, 39785, 29275, 48143, 26655, 21210, 21210, 21210, 32993, 21210, 21210, 21210,
  /* 10800 */ 21210, 21210, 21210, 21210, 21210, 20584, 49074, 49074, 49074, 49074, 26688, 48154, 48154, 48154, 50788,
  /* 10815 */ 37350, 37350, 37350, 37350, 48137, 35317, 21210, 21210, 21210, 21210, 21210, 26796, 47020, 18697, 21210,
  /* 10830 */ 18696, 21210, 20583, 49074, 49074, 49074, 49074, 29299, 35080, 48154, 48154, 48154, 48154, 29326, 22985,
  /* 10845 */ 37350, 37350, 37350, 35749, 29349, 28471, 26708, 26745, 21210, 21210, 21210, 21210, 33391, 21210, 21210,
  /* 10860 */ 21210, 21210, 49073, 49074, 49074, 49074, 49074, 20468, 48154, 48154, 48154, 48154, 48154, 37340, 37350,
  /* 10875 */ 37350, 37350, 37350, 37350, 28465, 24013, 21210, 21210, 29368, 21210, 21210, 30300, 27043, 41425, 29388,
  /* 10890 */ 49074, 49074, 49074, 29408, 29436, 48154, 48154, 48154, 41328, 29459, 37350, 37350, 37350, 49988, 28469,
  /* 10905 */ 32549, 21210, 21210, 21210, 21210, 21210, 49070, 49074, 49074, 49074, 24050, 48154, 48154, 48154, 24068,
  /* 10920 */ 37350, 37350, 37350, 32539, 21210, 21210, 21210, 21210, 49716, 49074, 49074, 30644, 48154, 48154, 43916,
  /* 10935 */ 37350, 37350, 23547, 32545, 21210, 21210, 21210, 49721, 49074, 49075, 48154, 48154, 43919, 37350, 37350,
  /* 10950 */ 29001, 21210, 20582, 49720, 49074, 48151, 48155, 37350, 29352, 46360, 49717, 49077, 48155, 37350, 29896,
  /* 10965 */ 49722, 48149, 43923, 40281, 29499, 49951, 48967, 49717, 30647, 43922, 41422, 30646, 43922, 28390, 48129,
  /* 10980 */ 33032, 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 10995 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 26633, 21210,
  /* 11010 */ 26171, 21210, 21210, 43825, 21210, 51051, 21210, 36277, 46737, 29515, 29526, 29537, 29553, 29564, 29580,
  /* 11025 */ 29596, 29612, 41604, 21210, 21210, 51335, 27476, 21210, 19097, 21210, 21210, 28507, 21210, 21210, 21210,
  /* 11040 */ 43629, 42568, 32711, 48409, 28809, 39785, 49402, 29646, 29683, 21210, 29708, 21210, 32993, 29727, 25994,
  /* 11055 */ 21210, 22671, 36980, 29747, 29766, 27113, 26639, 29783, 29799, 49074, 49074, 29818, 29843, 48154, 48154,
  /* 11070 */ 50788, 29869, 29925, 37350, 37350, 48137, 35317, 21210, 29945, 21210, 21210, 29963, 40326, 47020, 21210,
  /* 11085 */ 29980, 30020, 21210, 20583, 44666, 49252, 51016, 32787, 49074, 35080, 47409, 24052, 48154, 50782, 48154,
  /* 11100 */ 22985, 30040, 43602, 37350, 30067, 37352, 28471, 26708, 26745, 21210, 21210, 26226, 21210, 23042, 21210,
  /* 11115 */ 52201, 21210, 21210, 49073, 49074, 49074, 49074, 32778, 20468, 48154, 48154, 48154, 30085, 29660, 37340,
  /* 11130 */ 37350, 37350, 37350, 30104, 30121, 30142, 24013, 30170, 21210, 21210, 26362, 21210, 40719, 21210, 49718,
  /* 11145 */ 49074, 49074, 34520, 49074, 37320, 48154, 48154, 48154, 30189, 33910, 37349, 37350, 37350, 38851, 37350,
  /* 11160 */ 28469, 32549, 21210, 50024, 21210, 21210, 46829, 30209, 49074, 30229, 49074, 24050, 48154, 30248, 48154,
  /* 11175 */ 24068, 37350, 30265, 37350, 32920, 30282, 21210, 21210, 45590, 52034, 45079, 39389, 30644, 35366, 46310,
  /* 11190 */ 43916, 43596, 37418, 23547, 32545, 21210, 21210, 30325, 49721, 49074, 50306, 48154, 48154, 30343, 37350,
  /* 11205 */ 46630, 29001, 21210, 20582, 49720, 49074, 48151, 48155, 37350, 29352, 46360, 49717, 49077, 48155, 37350,
  /* 11220 */ 29896, 49722, 48149, 43923, 23490, 30367, 34591, 30393, 49717, 30647, 43922, 41422, 30646, 43922, 28390,
  /* 11235 */ 48129, 33032, 33583, 30420, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 11250 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 26633,
  /* 11265 */ 21210, 21211, 30460, 21210, 43825, 21210, 30477, 23124, 30460, 23945, 30498, 30509, 30519, 30535, 30539,
  /* 11280 */ 30570, 30555, 30584, 41604, 21210, 21210, 21210, 26418, 21210, 21210, 21210, 21210, 21210, 21210, 42567,
  /* 11295 */ 42565, 21210, 42556, 30618, 30641, 28409, 33137, 31991, 48143, 26655, 21210, 30673, 30663, 32993, 21210,
  /* 11310 */ 45585, 39809, 21210, 21210, 45722, 26773, 30697, 30713, 30734, 28322, 33996, 34540, 30750, 35453, 45423,
  /* 11325 */ 30773, 41214, 30794, 30811, 45393, 30266, 48137, 35317, 21210, 21210, 21210, 32751, 21210, 34800, 47020,
  /* 11340 */ 21210, 21210, 21210, 21210, 30872, 49074, 49074, 49074, 49074, 30894, 35080, 48154, 48154, 48154, 28678,
  /* 11355 */ 48154, 22985, 37350, 37350, 37350, 31092, 37352, 39458, 26708, 30913, 21210, 21210, 48880, 44468, 33391,
  /* 11370 */ 21210, 21210, 21210, 21337, 32634, 33068, 49074, 49074, 34502, 30956, 40905, 48213, 48154, 48154, 43787,
  /* 11385 */ 37340, 30991, 37464, 37350, 37350, 44288, 28465, 24013, 21210, 21210, 21210, 21210, 21210, 31015, 31034,
  /* 11400 */ 34111, 49074, 49074, 40581, 49074, 37320, 31052, 48154, 48154, 31069, 33910, 31086, 37350, 37350, 42476,
  /* 11415 */ 37350, 36540, 32549, 21656, 19482, 21210, 21210, 31108, 49070, 37287, 41165, 31127, 24050, 31145, 34428,
  /* 11430 */ 31166, 24068, 31184, 48553, 31205, 32539, 48058, 21210, 21210, 21210, 49716, 49074, 49074, 30644, 48154,
  /* 11445 */ 48154, 43916, 37350, 37350, 23547, 32545, 21210, 31223, 21210, 49721, 49074, 31584, 48154, 48154, 31240,
  /* 11460 */ 37350, 46238, 29001, 21210, 20582, 49720, 49074, 48151, 48155, 37350, 51217, 46360, 49717, 49077, 48155,
  /* 11475 */ 37350, 29896, 31264, 23689, 36549, 43415, 30625, 38344, 47843, 49717, 30647, 43922, 41422, 30646, 43922,
  /* 11490 */ 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 11505 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 11520 */ 26633, 21210, 21210, 31303, 21210, 43825, 22139, 46802, 21210, 31324, 44416, 31350, 31361, 31372, 31388,
  /* 11535 */ 31399, 31430, 31415, 31444, 41604, 36457, 50813, 43244, 43052, 32259, 31481, 21210, 31513, 39620, 32194,
  /* 11550 */ 31549, 21879, 31565, 31600, 43856, 31624, 31660, 31725, 31676, 31711, 31741, 24339, 49838, 34393, 31784,
  /* 11565 */ 22782, 31834, 31853, 45672, 21210, 21210, 26911, 21210, 20584, 34008, 31878, 30232, 33449, 31894, 44318,
  /* 11580 */ 46455, 48206, 31930, 23461, 31988, 32007, 32024, 32059, 35317, 43367, 33660, 40073, 32094, 32113, 32148,
  /* 11595 */ 52167, 32193, 25418, 32210, 32247, 27256, 32287, 32313, 51468, 32329, 32345, 44542, 32380, 32419, 32445,
  /* 11610 */ 32461, 36833, 32477, 35395, 32493, 32509, 40825, 32525, 32566, 26708, 32610, 32650, 21210, 32672, 21344,
  /* 11625 */ 33391, 21082, 23338, 32696, 32732, 49869, 32767, 49074, 43767, 32803, 32821, 48988, 42188, 48154, 44589,
  /* 11640 */ 42377, 32859, 44893, 32884, 37350, 41915, 40422, 32905, 32955, 21571, 51664, 26496, 32989, 24096, 21131,
  /* 11655 */ 33009, 33025, 33048, 33065, 47687, 26869, 37320, 33084, 33104, 30975, 33126, 33153, 49393, 38875, 39743,
  /* 11670 */ 33201, 40851, 28469, 32549, 21210, 50746, 33217, 21210, 47486, 49070, 33234, 33254, 49074, 24050, 33270,
  /* 11685 */ 33289, 48154, 24068, 33305, 33323, 37350, 32539, 21210, 33339, 33407, 51886, 33429, 33465, 33499, 33522,
  /* 11700 */ 33556, 36824, 33572, 33599, 34053, 33615, 33641, 23206, 51255, 33676, 47087, 33719, 33738, 33756, 43011,
  /* 11715 */ 23361, 33783, 33803, 33822, 31018, 33844, 49720, 49074, 33865, 46869, 37350, 45182, 50284, 49717, 33884,
  /* 11730 */ 28618, 49117, 47874, 49722, 33905, 33926, 33946, 24706, 33532, 37696, 33982, 34024, 34078, 34108, 30646,
  /* 11745 */ 43922, 39129, 34127, 33032, 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 11760 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 11775 */ 21210, 26633, 21210, 21210, 26489, 21210, 43825, 22135, 27869, 28575, 44441, 38470, 34162, 21210, 23165,
  /* 11790 */ 34199, 34203, 34234, 34219, 34248, 41604, 21210, 29947, 21210, 26418, 21210, 21210, 21210, 21210, 18886,
  /* 11805 */ 21210, 21210, 18892, 34875, 21210, 34276, 34303, 34322, 38570, 31991, 34346, 26655, 21210, 44972, 21210,
  /* 11820 */ 32993, 44972, 21210, 21210, 42213, 21210, 34370, 21210, 34392, 20584, 38796, 49074, 49074, 49074, 34409,
  /* 11835 */ 34444, 48154, 48154, 50788, 42427, 37350, 37350, 37350, 48137, 35317, 21210, 21210, 21210, 21210, 21210,
  /* 11850 */ 21210, 47020, 21210, 21210, 21210, 19822, 20583, 49074, 49074, 49074, 49074, 34463, 35080, 48154, 48154,
  /* 11865 */ 48154, 33273, 48154, 22985, 37350, 37350, 37350, 36395, 37352, 28471, 26708, 26745, 21210, 21210, 21210,
  /* 11880 */ 21210, 33391, 21210, 21210, 34481, 21210, 49073, 49074, 49074, 34500, 49074, 20468, 48154, 48154, 31168,
  /* 11895 */ 48154, 48154, 37340, 37350, 37350, 38746, 37350, 37350, 28465, 24013, 21210, 21210, 21210, 21210, 21210,
  /* 11910 */ 21210, 48874, 49718, 49074, 49074, 49074, 34518, 37320, 48154, 48154, 48154, 38536, 33910, 37349, 37350,
  /* 11925 */ 37350, 49138, 37350, 28469, 32549, 21210, 21210, 21210, 21210, 21210, 49070, 49074, 49074, 49074, 24050,
  /* 11940 */ 48154, 48154, 48154, 24068, 37350, 37350, 37350, 32539, 21210, 21210, 21210, 21210, 49716, 49074, 49074,
  /* 11955 */ 30644, 48154, 48154, 43916, 37350, 37350, 23547, 29007, 21210, 21210, 21210, 49721, 34536, 49075, 38102,
  /* 11970 */ 48154, 43919, 34556, 37350, 29001, 21210, 20582, 49720, 49074, 48151, 48155, 37350, 29352, 46360, 49717,
  /* 11985 */ 49077, 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153, 37351, 49717, 30647, 43922, 41422,
  /* 12000 */ 30646, 43922, 30856, 28351, 33032, 30051, 34577, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 12015 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 12030 */ 21210, 21210, 26633, 21210, 21210, 21210, 21210, 43825, 21210, 25619, 21210, 21210, 25810, 34651, 34662,
  /* 12045 */ 34672, 34681, 34685, 34716, 34701, 34730, 41604, 21210, 21210, 21210, 26418, 21210, 21210, 23034, 21210,
  /* 12060 */ 21210, 21210, 21210, 21210, 21210, 21210, 49719, 49076, 48154, 39785, 31991, 48143, 34767, 34816, 21210,
  /* 12075 */ 21210, 32993, 21210, 21210, 21210, 42291, 21210, 21210, 21210, 21210, 20584, 49074, 49074, 49074, 49074,
  /* 12090 */ 26688, 48154, 48154, 48154, 50788, 37350, 37350, 37350, 37350, 48137, 35317, 21210, 21210, 21210, 21210,
  /* 12105 */ 21210, 21210, 21210, 21210, 23627, 21210, 21210, 34834, 49074, 49074, 49074, 49074, 49074, 49607, 48154,
  /* 12120 */ 48154, 48154, 48154, 48154, 34853, 37350, 37350, 37350, 37350, 37352, 28471, 21210, 21210, 21210, 21210,
  /* 12135 */ 34873, 50604, 21210, 34891, 21210, 42026, 45368, 49073, 49074, 42813, 49074, 49074, 20468, 48154, 48154,
  /* 12150 */ 34330, 48154, 48154, 37340, 37350, 37350, 41356, 37350, 37350, 30404, 34909, 21210, 21210, 36064, 21210,
  /* 12165 */ 21210, 21210, 21210, 49718, 49074, 49074, 49074, 49074, 29068, 48154, 48154, 48154, 48154, 46167, 37349,
  /* 12180 */ 37350, 37350, 37350, 37350, 28469, 32549, 21210, 26748, 21210, 50960, 21210, 49070, 49074, 49074, 34930,
  /* 12195 */ 29078, 48154, 48154, 34951, 37348, 37350, 37350, 34972, 32539, 51697, 34993, 35013, 35048, 31308, 49074,
  /* 12210 */ 35068, 35104, 48154, 35140, 35186, 37350, 35221, 35249, 32545, 35275, 40285, 30602, 47434, 37632, 35293,
  /* 12225 */ 35333, 35352, 28625, 50903, 35388, 29001, 21210, 20685, 35411, 35431, 40309, 48120, 49011, 35476, 46360,
  /* 12240 */ 49717, 49077, 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153, 37351, 49717, 30647, 43922,
  /* 12255 */ 41422, 30646, 43922, 28390, 48129, 26393, 35523, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 12270 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 12285 */ 21210, 21210, 21210, 26633, 21210, 21210, 21210, 21210, 43825, 21210, 21210, 21210, 21210, 23781, 21209,
  /* 12300 */ 21210, 21210, 21210, 20942, 35306, 29883, 26406, 41604, 29038, 21210, 28210, 35551, 21210, 21210, 21210,
  /* 12315 */ 21551, 21210, 21552, 21210, 34818, 32271, 21546, 30878, 23226, 35575, 35606, 34561, 35594, 35633, 21210,
  /* 12330 */ 21210, 36248, 32993, 26054, 39002, 21210, 21210, 21210, 35667, 21210, 21210, 20584, 49074, 49074, 49074,
  /* 12345 */ 35684, 26688, 48154, 48154, 30757, 50788, 37350, 37350, 37350, 35701, 48137, 35317, 21210, 21210, 21210,
  /* 12360 */ 21210, 21210, 21210, 21210, 21210, 21210, 27247, 47893, 20583, 49074, 49074, 49074, 49074, 49074, 35721,
  /* 12375 */ 48154, 48154, 48154, 48154, 48154, 35745, 37350, 37350, 37350, 37350, 38141, 28471, 21210, 43636, 21210,
  /* 12390 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 27494, 30940, 49074, 49074, 49074, 49074, 20468, 36841,
  /* 12405 */ 48154, 48154, 48154, 48154, 37340, 36388, 37350, 37350, 37350, 37350, 28465, 46357, 21210, 21210, 46257,
  /* 12420 */ 21210, 21210, 21210, 21210, 49718, 49074, 49074, 49074, 48905, 29068, 48154, 48154, 48154, 35578, 46167,
  /* 12435 */ 37349, 37350, 37350, 37350, 35765, 28469, 32549, 21210, 21210, 35784, 21210, 21210, 49070, 49074, 49074,
  /* 12450 */ 49074, 29078, 48154, 48154, 48154, 37348, 37350, 37350, 37350, 32539, 21210, 21210, 21210, 21210, 49716,
  /* 12465 */ 49074, 49074, 30644, 48154, 48154, 43916, 37350, 37350, 23547, 32545, 21210, 35803, 21210, 49863, 49074,
  /* 12480 */ 49075, 48154, 48154, 43919, 37350, 37350, 35821, 21210, 20582, 19511, 49074, 35854, 39040, 37350, 37553,
  /* 12495 */ 46360, 49717, 49077, 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153, 37351, 49717, 30647,
  /* 12510 */ 43922, 41422, 30646, 43922, 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210,
  /* 12525 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 12540 */ 21210, 21210, 21210, 21210, 26633, 21210, 21210, 44512, 21210, 43825, 21210, 47567, 44976, 47559, 35873,
  /* 12555 */ 35928, 35939, 35950, 35966, 35977, 36008, 35993, 36022, 41604, 21210, 21210, 21210, 36056, 36080, 21210,
  /* 12570 */ 21210, 21965, 21210, 41823, 21210, 23597, 41834, 36098, 35651, 29392, 36138, 36160, 34977, 36203, 36219,
  /* 12585 */ 21210, 21210, 21210, 37008, 21210, 39858, 36246, 21210, 21210, 21210, 36264, 31644, 20584, 50855, 36298,
  /* 12600 */ 49074, 36325, 36341, 29443, 36357, 48481, 46932, 37517, 36376, 37350, 46946, 36411, 35317, 21210, 48614,
  /* 12615 */ 25163, 21210, 36439, 27229, 36473, 32656, 21210, 23882, 32680, 31608, 49074, 36492, 49074, 36510, 42086,
  /* 12630 */ 36565, 46188, 48154, 33088, 36589, 36616, 22985, 49213, 37350, 31248, 35233, 36639, 28471, 21210, 21210,
  /* 12645 */ 21210, 21210, 34146, 36655, 36678, 21210, 21124, 21210, 21210, 36715, 36737, 49074, 49074, 36755, 36775,
  /* 12660 */ 36810, 48154, 48154, 48154, 36857, 36876, 48303, 37350, 37350, 30795, 32008, 45554, 46357, 21210, 36892,
  /* 12675 */ 36918, 30291, 36947, 36996, 47371, 49595, 49074, 46094, 32231, 37024, 30377, 48154, 49615, 28660, 31972,
  /* 12690 */ 37074, 37101, 40560, 37120, 37156, 37183, 37208, 32580, 50501, 21766, 46811, 37233, 37253, 41642, 38659,
  /* 12705 */ 37274, 37310, 37368, 51489, 37395, 37444, 37488, 50327, 37533, 37569, 28871, 21210, 21210, 51072, 31798,
  /* 12720 */ 37595, 37612, 45306, 34306, 37648, 38894, 34956, 37683, 45125, 23547, 32545, 45852, 21210, 37723, 49721,
  /* 12735 */ 49074, 49075, 48154, 48154, 43919, 37350, 37350, 33625, 52195, 20582, 46650, 46276, 43439, 36794, 51373,
  /* 12750 */ 37740, 46360, 44239, 49077, 48155, 37350, 29896, 37787, 37830, 37846, 37862, 49072, 48153, 37351, 49717,
  /* 12765 */ 30647, 43922, 41422, 37882, 37898, 28390, 48129, 33032, 28081, 37934, 37950, 21210, 21210, 21210, 21210,
  /* 12780 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 12795 */ 21210, 21210, 21210, 21210, 21210, 26633, 21210, 21210, 47193, 21210, 43825, 21210, 21210, 21210, 21210,
  /* 12810 */ 23781, 37984, 21210, 38010, 32132, 29042, 38030, 38081, 38044, 41604, 21210, 21210, 21210, 26418, 21210,
  /* 12825 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49719, 49076, 48154, 39785, 31991, 48143,
  /* 12840 */ 26655, 21210, 21210, 21210, 32993, 21210, 21210, 21210, 21210, 42931, 21210, 21210, 21210, 20584, 49074,
  /* 12855 */ 49074, 49074, 49074, 26688, 48154, 48154, 38118, 50788, 37350, 37350, 38591, 37350, 48137, 35317, 21210,
  /* 12870 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 20583, 49074, 49074, 49074, 49074,
  /* 12885 */ 49074, 35080, 48154, 48154, 48154, 48154, 48154, 22985, 37350, 37350, 37350, 37350, 37352, 28471, 21210,
  /* 12900 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49073, 49074, 49074, 49074, 49074,
  /* 12915 */ 20468, 48154, 48154, 48154, 48154, 48154, 37340, 37350, 37350, 37350, 37350, 37350, 28465, 46357, 21210,
  /* 12930 */ 21210, 21210, 21210, 21210, 21210, 21210, 49718, 49074, 49074, 49074, 49074, 29068, 48154, 48154, 48154,
  /* 12945 */ 48154, 46167, 37349, 37350, 37350, 37350, 37350, 28469, 32549, 21210, 21210, 21210, 21210, 21210, 49070,
  /* 12960 */ 49074, 49074, 49074, 29078, 48154, 48154, 48154, 37348, 37350, 37350, 37350, 32539, 21210, 21210, 21210,
  /* 12975 */ 21210, 49716, 49074, 49074, 30644, 48154, 48154, 43916, 37350, 37350, 23547, 32545, 21210, 21210, 21210,
  /* 12990 */ 49721, 49074, 49075, 48154, 48154, 43919, 37350, 37350, 29001, 21210, 20582, 49720, 49074, 48151, 48155,
  /* 13005 */ 37350, 29352, 46360, 49717, 49077, 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153, 37351,
  /* 13020 */ 49717, 30647, 43922, 41422, 30646, 43922, 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210, 21210,
  /* 13035 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 13050 */ 21210, 21210, 21210, 21210, 21210, 21210, 26633, 21210, 21210, 50259, 21210, 43825, 21210, 21210, 21210,
  /* 13065 */ 21210, 23781, 21209, 21210, 21210, 21210, 20942, 35306, 29883, 26406, 41604, 21210, 21210, 21210, 26418,
  /* 13080 */ 21210, 38640, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49719, 49076, 48154, 39785, 31991,
  /* 13095 */ 48143, 26655, 21210, 21210, 21210, 32993, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 20584,
  /* 13110 */ 49074, 49074, 49074, 49074, 26688, 48154, 48154, 48154, 50788, 37350, 37350, 37350, 37350, 48137, 35317,
  /* 13125 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 20583, 49074, 49074, 49074,
  /* 13140 */ 49074, 49074, 35080, 48154, 48154, 48154, 48154, 48154, 22985, 37350, 37350, 37350, 37350, 37352, 28471,
  /* 13155 */ 21210, 33413, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 27993, 49074, 49074, 49074,
  /* 13170 */ 49074, 20468, 49751, 48154, 48154, 48154, 48154, 37340, 38137, 37350, 37350, 37350, 37350, 28465, 46357,
  /* 13185 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49718, 49074, 49074, 49074, 49074, 29068, 48154, 48154,
  /* 13200 */ 48154, 48154, 46167, 37349, 37350, 37350, 37350, 37350, 28469, 32549, 21210, 21210, 21210, 21210, 21210,
  /* 13215 */ 49070, 49074, 49074, 49074, 29078, 48154, 48154, 48154, 37348, 37350, 37350, 37350, 32539, 21210, 21210,
  /* 13230 */ 21210, 21210, 49716, 49074, 49074, 30644, 48154, 48154, 43916, 37350, 37350, 23547, 32545, 21210, 21210,
  /* 13245 */ 21210, 49721, 49074, 49075, 48154, 48154, 43919, 37350, 37350, 29001, 21210, 20582, 49720, 49074, 48151,
  /* 13260 */ 48155, 37350, 29352, 46360, 49717, 49077, 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153,
  /* 13275 */ 37351, 49717, 30647, 43922, 41422, 30646, 43922, 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210,
  /* 13290 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 13305 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 26633, 21210, 21210, 30024, 21210, 43825, 21210, 24180,
  /* 13320 */ 21210, 29630, 38157, 38173, 38188, 38200, 38209, 38214, 38245, 38230, 38259, 41604, 38984, 21210, 21210,
  /* 13335 */ 26418, 21210, 23119, 38298, 21210, 27418, 21210, 21210, 22924, 49690, 22930, 38322, 42360, 38360, 40505,
  /* 13350 */ 34062, 38376, 38406, 38457, 21210, 21210, 36902, 21210, 21210, 46502, 26196, 21210, 47478, 35805, 26019,
  /* 13365 */ 38486, 22869, 40169, 33506, 38620, 38502, 38524, 48154, 38559, 42688, 39791, 44282, 29929, 38586, 38607,
  /* 13380 */ 35489, 21210, 38636, 21210, 21210, 21210, 39325, 21210, 21210, 21210, 21210, 21210, 20583, 47633, 38656,
  /* 13395 */ 38675, 51021, 49074, 38694, 41316, 48234, 48154, 44327, 38948, 34853, 38718, 49282, 37350, 38742, 46331,
  /* 13410 */ 28471, 21210, 21210, 44157, 44449, 21210, 21210, 38762, 44132, 21210, 21210, 21210, 49073, 49074, 49074,
  /* 13425 */ 38781, 44730, 20468, 48154, 48154, 40598, 42874, 38823, 37340, 37350, 37350, 37104, 51379, 38867, 28465,
  /* 13440 */ 46357, 35559, 21210, 21210, 46379, 21210, 21210, 21210, 49718, 42948, 49074, 49074, 49074, 29068, 48154,
  /* 13455 */ 38891, 48154, 48154, 46167, 37349, 38843, 37350, 37350, 37350, 28469, 39154, 23997, 21210, 36282, 38910,
  /* 13470 */ 51658, 32716, 38928, 49074, 38931, 37330, 38947, 48154, 36860, 28702, 38964, 37350, 44608, 32539, 21210,
  /* 13485 */ 38981, 21210, 39000, 49716, 49074, 39018, 30644, 48154, 39037, 43916, 37350, 39056, 23547, 32545, 21210,
  /* 13500 */ 32127, 21210, 49721, 49074, 39646, 48154, 48154, 39074, 37350, 43088, 29001, 21210, 20582, 49720, 49074,
  /* 13515 */ 48151, 48155, 37350, 29352, 46360, 49717, 49077, 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072,
  /* 13530 */ 48153, 37351, 49717, 39098, 39114, 31944, 42121, 40204, 28390, 48129, 28538, 39170, 23563, 23575, 21210,
  /* 13545 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 13560 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 26633, 21210, 21210, 28266, 21210, 43825, 21210,
  /* 13575 */ 23283, 39198, 21210, 46590, 39215, 39242, 39226, 39258, 39262, 39293, 39278, 39307, 41604, 29767, 21210,
  /* 13590 */ 21210, 26418, 21210, 51689, 21210, 21210, 29767, 21210, 21210, 33694, 18456, 33700, 18464, 39341, 40395,
  /* 13605 */ 33767, 31991, 48143, 26655, 21210, 21210, 39360, 32993, 21210, 20015, 22277, 21210, 23833, 21210, 21210,
  /* 13620 */ 50254, 48377, 29103, 49074, 32357, 39379, 26688, 39415, 29080, 30193, 39432, 28439, 37350, 30999, 45448,
  /* 13635 */ 29283, 37814, 39474, 27401, 39510, 39529, 21210, 21210, 21210, 21210, 30681, 21210, 21210, 20583, 30897,
  /* 13650 */ 37050, 49257, 49074, 49074, 35080, 34627, 39549, 43513, 48154, 48154, 22985, 39568, 37350, 39598, 37350,
  /* 13665 */ 37352, 28471, 21210, 21210, 39616, 40726, 21210, 21210, 19475, 27512, 30309, 21210, 21210, 49073, 39636,
  /* 13680 */ 49074, 40174, 39662, 47657, 48154, 39679, 48154, 42195, 48154, 49384, 33307, 39701, 37350, 37579, 37350,
  /* 13695 */ 28465, 46357, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49718, 49074, 49074, 49074, 49074, 29068,
  /* 13710 */ 48154, 48154, 48154, 48154, 46167, 37349, 37350, 37350, 37350, 37350, 28469, 32549, 21210, 21210, 21210,
  /* 13725 */ 21210, 21210, 49070, 49074, 49074, 49074, 29078, 48154, 48154, 48154, 37348, 37350, 37350, 37350, 32539,
  /* 13740 */ 39721, 21210, 21210, 21210, 49716, 49809, 49074, 30644, 38702, 48154, 43916, 43566, 37350, 23547, 32545,
  /* 13755 */ 21210, 21210, 27814, 49721, 49074, 49075, 48154, 40403, 43919, 37350, 39741, 29001, 21210, 20582, 49720,
  /* 13770 */ 49074, 48151, 48155, 37350, 29352, 41065, 49717, 42834, 39552, 50062, 48725, 52040, 49327, 23452, 40281,
  /* 13785 */ 49072, 48153, 37351, 49717, 30647, 43922, 41422, 30646, 43922, 39759, 48129, 33032, 28081, 23563, 23575,
  /* 13800 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 13815 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 26633, 21210, 21210, 21791, 39807, 28116,
  /* 13830 */ 21210, 22933, 39825, 37968, 39874, 39901, 39914, 39934, 39949, 39918, 39980, 39965, 39994, 41604, 21210,
  /* 13845 */ 40028, 30327, 26838, 40983, 40044, 26589, 35032, 29964, 40100, 40061, 40089, 43189, 40116, 40154, 40190,
  /* 13860 */ 40226, 40255, 40271, 40301, 26655, 39363, 40325, 21210, 19992, 38912, 40668, 19969, 40342, 51944, 42271,
  /* 13875 */ 44019, 38056, 40358, 45086, 32071, 31129, 49074, 26688, 40381, 48154, 34600, 50788, 40541, 43558, 37350,
  /* 13890 */ 40419, 46023, 37753, 22347, 21210, 40438, 50882, 21210, 21210, 21210, 40458, 50752, 21210, 43962, 20583,
  /* 13905 */ 47711, 40477, 49074, 49074, 49074, 35080, 40494, 48154, 30968, 48154, 48154, 40521, 32036, 37350, 40557,
  /* 13920 */ 37350, 37352, 28471, 21210, 21210, 21210, 21210, 21210, 26356, 21210, 50507, 43138, 44487, 21210, 40576,
  /* 13935 */ 49074, 49074, 33474, 33722, 20468, 40597, 48154, 48154, 34421, 41869, 32843, 37350, 37350, 37350, 40614,
  /* 13950 */ 45349, 37707, 46357, 46678, 40635, 27374, 47163, 21210, 40658, 40692, 30931, 38807, 40742, 40767, 40783,
  /* 13965 */ 29068, 39685, 47766, 48462, 49374, 46167, 24069, 40804, 40841, 40875, 37350, 30841, 32549, 40931, 40956,
  /* 13980 */ 24563, 40972, 22179, 31579, 42341, 44564, 31465, 41017, 32394, 47785, 36573, 41037, 43549, 43389, 39082,
  /* 13995 */ 41056, 40642, 41081, 21210, 51196, 22463, 49074, 41098, 39344, 48154, 41114, 42398, 37350, 41130, 23547,
  /* 14010 */ 28038, 21210, 21210, 40676, 40365, 41146, 41181, 42976, 41201, 28975, 41230, 49659, 47933, 21210, 25406,
  /* 14025 */ 49720, 41283, 34354, 48155, 51310, 29352, 46360, 19778, 49319, 34635, 37918, 50226, 48385, 41303, 41344,
  /* 14040 */ 41379, 19517, 41395, 51238, 49717, 30647, 43922, 41422, 30646, 43922, 30826, 41411, 33032, 28081, 23563,
  /* 14055 */ 30432, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 14070 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 26633, 21210, 21210, 21210, 41441,
  /* 14085 */ 43825, 21210, 47232, 29253, 21210, 43162, 41464, 41475, 41486, 41502, 41506, 41537, 41522, 41551, 41968,
  /* 14100 */ 41781, 27888, 32163, 44231, 33354, 24233, 38765, 41744, 41590, 41629, 41678, 41729, 41768, 41808, 43727,
  /* 14115 */ 41850, 41885, 41901, 41954, 41984, 42000, 21210, 41613, 42025, 26672, 21210, 35501, 26664, 42042, 42611,
  /* 14130 */ 21210, 21210, 47513, 20584, 49074, 51130, 42072, 42102, 26688, 31053, 29827, 48940, 47294, 37350, 37140,
  /* 14145 */ 42137, 42158, 48137, 35317, 21210, 21210, 42211, 21210, 42229, 50569, 18864, 21210, 42249, 42268, 42287,
  /* 14160 */ 26975, 42307, 36721, 42330, 49074, 41287, 35443, 42376, 44840, 42393, 48154, 28417, 42414, 37350, 42462,
  /* 14175 */ 42498, 37350, 42515, 28471, 42541, 42584, 21210, 42607, 43682, 21210, 21210, 21210, 21210, 21210, 45846,
  /* 14190 */ 49073, 49074, 42627, 41706, 49074, 20468, 48154, 39416, 48154, 44790, 48154, 37340, 37350, 35768, 37350,
  /* 14205 */ 42647, 37350, 28465, 46357, 21210, 21210, 21480, 46064, 21210, 21210, 21210, 49718, 49074, 49074, 49074,
  /* 14220 */ 49074, 42666, 48154, 48154, 48154, 48154, 45966, 34856, 37350, 37350, 37350, 42913, 28469, 32549, 42704,
  /* 14235 */ 21210, 21210, 21210, 21210, 42747, 46131, 49074, 49074, 42769, 35857, 48154, 48154, 42789, 42650, 37350,
  /* 14250 */ 37350, 23092, 23773, 21210, 21210, 21210, 49716, 42809, 42829, 30644, 42850, 42870, 43916, 42890, 42909,
  /* 14265 */ 23547, 23390, 21210, 21210, 21210, 49721, 49074, 49075, 48154, 48154, 43919, 37350, 37350, 29001, 42929,
  /* 14280 */ 20582, 31759, 42947, 42964, 51420, 35162, 29352, 48332, 32594, 42992, 43027, 43068, 29896, 43104, 23911,
  /* 14295 */ 37217, 40281, 49072, 48153, 37351, 49717, 30647, 43922, 41422, 30646, 43922, 45495, 45615, 33032, 28081,
  /* 14310 */ 23563, 43120, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 14325 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 26633, 21210, 21210, 21210,
  /* 14340 */ 25802, 43825, 21210, 21210, 43154, 51529, 43178, 43205, 21210, 21210, 43231, 43279, 43295, 43311, 43327,
  /* 14355 */ 41604, 21210, 21210, 43137, 26418, 21210, 21210, 39533, 21210, 43364, 21210, 21210, 31528, 43133, 21210,
  /* 14370 */ 49719, 31958, 23246, 43383, 43405, 43431, 26655, 21210, 43455, 21210, 32993, 21210, 40442, 43215, 26529,
  /* 14385 */ 45263, 21210, 21210, 26521, 20584, 37294, 30213, 47613, 26889, 26688, 43478, 43500, 34609, 43535, 47314,
  /* 14400 */ 33806, 44886, 43582, 28359, 30154, 43618, 21210, 50647, 21733, 21210, 43652, 43670, 21210, 21210, 21210,
  /* 14415 */ 21210, 20583, 49074, 49074, 35685, 49074, 49074, 35080, 48154, 48154, 49757, 48154, 48154, 22985, 37350,
  /* 14430 */ 37350, 35198, 37350, 37352, 28471, 43704, 48013, 24104, 21210, 21210, 21210, 43743, 26560, 21210, 27485,
  /* 14445 */ 21210, 49073, 40478, 43760, 49074, 49074, 47989, 48154, 50045, 43783, 48154, 48154, 48950, 37350, 35205,
  /* 14460 */ 43803, 37350, 37350, 28465, 46357, 26530, 21210, 21210, 21210, 21210, 31497, 21210, 49718, 49074, 49074,
  /* 14475 */ 41655, 49074, 32297, 48154, 48154, 31914, 48154, 31150, 37349, 37350, 42499, 37350, 37350, 28469, 32549,
  /* 14490 */ 21210, 21210, 21210, 21210, 21210, 49070, 49074, 49074, 49074, 29078, 48154, 48154, 48154, 37348, 37350,
  /* 14505 */ 37350, 37350, 32539, 21210, 50005, 21210, 21210, 41448, 49074, 49074, 30644, 48154, 48154, 43916, 37350,
  /* 14520 */ 37350, 30126, 43820, 21210, 21210, 21210, 49721, 49074, 49075, 48154, 48154, 43919, 37350, 37350, 29001,
  /* 14535 */ 21210, 20582, 49720, 49074, 48151, 48155, 37350, 29352, 43841, 43896, 33740, 43912, 43939, 46219, 20239,
  /* 14550 */ 48149, 43923, 40281, 49072, 48153, 37351, 49717, 30647, 43922, 41422, 30646, 43922, 28390, 48129, 33032,
  /* 14565 */ 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 14580 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 26633, 21210, 21210,
  /* 14595 */ 21210, 21210, 43825, 21210, 21210, 21210, 21210, 23781, 21209, 21210, 21210, 21210, 20942, 35306, 29883,
  /* 14610 */ 26406, 41604, 21210, 21210, 21210, 26418, 21210, 21210, 23937, 21210, 21210, 34893, 18898, 18901, 26318,
  /* 14625 */ 43959, 26326, 23061, 48476, 44269, 22989, 48143, 43978, 44017, 21210, 21210, 32993, 21210, 21210, 21210,
  /* 14640 */ 21210, 21210, 21210, 21210, 21210, 20584, 49074, 49074, 49074, 49074, 26688, 48154, 48154, 48154, 50788,
  /* 14655 */ 37350, 37350, 37350, 37350, 48137, 35317, 21210, 21210, 21210, 27220, 21210, 21210, 21210, 21210, 21210,
  /* 14670 */ 21210, 21210, 20583, 49074, 49074, 49074, 49074, 49074, 44742, 48154, 48154, 48154, 48154, 48154, 44035,
  /* 14685 */ 37350, 37350, 37350, 37350, 37352, 28471, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 14700 */ 21210, 21210, 49073, 49074, 49074, 49074, 49074, 20468, 48154, 48154, 48154, 48154, 48154, 37340, 37350,
  /* 14715 */ 37350, 37350, 37350, 37350, 28465, 46357, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49718, 49074,
  /* 14730 */ 49074, 49074, 49074, 29068, 48154, 48154, 48154, 48154, 46167, 37349, 37350, 37350, 37350, 37350, 28469,
  /* 14745 */ 32549, 21210, 21210, 21210, 21210, 21210, 49070, 49074, 49074, 49074, 29078, 48154, 48154, 48154, 37348,
  /* 14760 */ 37350, 37350, 37350, 32539, 21210, 21210, 21210, 21210, 49716, 49074, 49074, 30644, 48154, 48154, 43916,
  /* 14775 */ 37350, 37350, 23547, 32545, 21210, 21210, 21210, 49721, 48670, 49075, 49774, 48154, 43919, 35170, 37350,
  /* 14790 */ 29001, 21210, 20582, 49720, 49074, 48151, 48155, 37350, 29352, 46360, 49717, 49077, 48155, 37350, 29896,
  /* 14805 */ 49722, 48149, 43923, 40281, 49072, 48153, 37351, 49717, 30647, 43922, 41422, 30646, 43922, 28390, 48129,
  /* 14820 */ 33032, 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 14835 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 26633, 21210,
  /* 14850 */ 21210, 21210, 22549, 43825, 22345, 21210, 22338, 21210, 45271, 44055, 36476, 37085, 44071, 44075, 44106,
  /* 14865 */ 44091, 44120, 41604, 21210, 33389, 44154, 26418, 44941, 33703, 21210, 44173, 39840, 44200, 46491, 44218,
  /* 14880 */ 33382, 34260, 24998, 44255, 44304, 44391, 44351, 44377, 44407, 21210, 21210, 21210, 33966, 44432, 44184,
  /* 14895 */ 44465, 44484, 44503, 21210, 21210, 48017, 44528, 49074, 44558, 33238, 47598, 44580, 35372, 48154, 40239,
  /* 14910 */ 43880, 44605, 44624, 30105, 48778, 44646, 44682, 21210, 21210, 21210, 40045, 51179, 37765, 21210, 18928,
  /* 14925 */ 27238, 51177, 47452, 20583, 48089, 36759, 49074, 49074, 44716, 44775, 48154, 28168, 48154, 42773, 44811,
  /* 14940 */ 44875, 37350, 44909, 37350, 49221, 39446, 28471, 21210, 21210, 21210, 25793, 23497, 44928, 26456, 21210,
  /* 14955 */ 44957, 44992, 45008, 45042, 49074, 45066, 29310, 49074, 34287, 45102, 34447, 45510, 28146, 48154, 45437,
  /* 14970 */ 45122, 48807, 45141, 45164, 37350, 45198, 46357, 45232, 21210, 21210, 45253, 45287, 21210, 49051, 24698,
  /* 14985 */ 40751, 49074, 45303, 49074, 29068, 44859, 45322, 31908, 48154, 46167, 37349, 45342, 40210, 37350, 37350,
  /* 15000 */ 34039, 45365, 21774, 29259, 21210, 21210, 21210, 41938, 49074, 49074, 48095, 28651, 48154, 48154, 29333,
  /* 15015 */ 45384, 37350, 37350, 44630, 32539, 21210, 50822, 21210, 21210, 37237, 49074, 49074, 41185, 48154, 48154,
  /* 15030 */ 44795, 37350, 37350, 50549, 32545, 30173, 21210, 21210, 49721, 49074, 49075, 48154, 48154, 43919, 37350,
  /* 15045 */ 37350, 29001, 21210, 20582, 49720, 49074, 48151, 48155, 37350, 29352, 36187, 38282, 45409, 45464, 45480,
  /* 15060 */ 29896, 49722, 48149, 43923, 44361, 22750, 43004, 45543, 20449, 30647, 43922, 41422, 30646, 43922, 40890,
  /* 15075 */ 45570, 45606, 35617, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 15090 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 26633,
  /* 15105 */ 21210, 21210, 21210, 51949, 43825, 45751, 34751, 45631, 45661, 45695, 45711, 45738, 45645, 45770, 45786,
  /* 15120 */ 45802, 45818, 45834, 23106, 21210, 46689, 30461, 26418, 21210, 21210, 30596, 21210, 41792, 21210, 45868,
  /* 15135 */ 45885, 40012, 45892, 45908, 45943, 45982, 41267, 46015, 46039, 26655, 34742, 36034, 25763, 32993, 37994,
  /* 15150 */ 21210, 21210, 21210, 21210, 48582, 38434, 46063, 38441, 46080, 29802, 46130, 49074, 46147, 46183, 45957,
  /* 15165 */ 48154, 50788, 46204, 30069, 46235, 37350, 48137, 35317, 21210, 20934, 21210, 27187, 48753, 46254, 21210,
  /* 15180 */ 21210, 21210, 21210, 21210, 20939, 34465, 49074, 46273, 49074, 49074, 46292, 44759, 36144, 48154, 48154,
  /* 15195 */ 33868, 22985, 46326, 42439, 37350, 37350, 32043, 46347, 21210, 21210, 21210, 46376, 19439, 34376, 37724,
  /* 15210 */ 21193, 21663, 27339, 21941, 46395, 49074, 49074, 46415, 46849, 47719, 48154, 48154, 48154, 46431, 43519,
  /* 15225 */ 40915, 37350, 37350, 39058, 48828, 49290, 42525, 46478, 45754, 21210, 22242, 21210, 21210, 23852, 46509,
  /* 15240 */ 27984, 49074, 49074, 46525, 49074, 29068, 48154, 48154, 36787, 46561, 46167, 37349, 37350, 49032, 48546,
  /* 15255 */ 37350, 28469, 32549, 21210, 46581, 46713, 27841, 21210, 49070, 46114, 38678, 49074, 46606, 46301, 36360,
  /* 15270 */ 48154, 46626, 45174, 42893, 37350, 32539, 21210, 21210, 27564, 22413, 46646, 49074, 49074, 30644, 48154,
  /* 15285 */ 48154, 43916, 37350, 37350, 31189, 32545, 31812, 47520, 28248, 32224, 49074, 48643, 48154, 50586, 43919,
  /* 15300 */ 37350, 48786, 46666, 46712, 46729, 22612, 49074, 23425, 48155, 46753, 32889, 46776, 49717, 37802, 48180,
  /* 15315 */ 49172, 29896, 49722, 48149, 43923, 40281, 46845, 46865, 46885, 41752, 38337, 46902, 34092, 46918, 37408,
  /* 15330 */ 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 15345 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 15360 */ 26633, 21210, 21210, 21210, 28284, 46962, 21210, 21210, 26426, 21210, 47002, 47036, 47047, 47078, 47063,
  /* 15375 */ 47103, 47119, 47135, 47151, 42718, 21210, 47187, 23734, 26418, 47209, 33369, 47226, 33656, 40707, 47248,
  /* 15390 */ 47264, 30004, 29995, 46986, 42731, 47280, 47330, 29420, 47346, 47395, 47425, 26729, 32973, 31334, 32993,
  /* 15405 */ 47450, 21210, 42233, 51781, 47468, 47502, 19411, 47536, 47583, 47649, 47673, 47735, 49074, 47751, 29667,
  /* 15420 */ 46445, 47801, 35460, 47826, 47859, 47909, 47949, 47969, 29483, 48005, 49896, 21210, 40128, 52141, 48033,
  /* 15435 */ 21210, 21210, 48057, 27050, 43339, 48074, 32364, 32078, 42314, 49074, 47981, 35080, 48111, 48171, 48196,
  /* 15450 */ 48154, 48229, 48250, 48266, 48282, 48298, 31207, 46886, 48319, 21210, 50444, 21210, 19371, 27537, 48348,
  /* 15465 */ 36122, 48367, 21210, 21684, 44138, 49073, 48401, 48425, 49074, 28900, 22758, 42854, 48447, 48497, 48154,
  /* 15480 */ 44826, 38833, 42482, 48518, 37350, 37350, 48534, 28465, 46357, 48569, 21210, 45869, 23889, 21210, 48351,
  /* 15495 */ 30922, 48630, 46107, 36309, 48659, 42352, 39399, 38543, 43484, 48694, 45326, 46167, 48710, 38965, 48769,
  /* 15510 */ 48802, 48823, 48844, 30444, 21210, 28111, 27787, 48862, 50985, 35415, 48896, 49074, 50119, 31287, 48930,
  /* 15525 */ 48983, 46565, 35124, 49004, 49027, 43943, 32539, 21210, 22375, 27822, 50831, 34837, 36494, 45919, 28856,
  /* 15540 */ 38121, 42678, 38390, 44912, 37546, 47923, 33828, 49048, 21210, 42591, 49067, 49093, 36525, 44335, 47810,
  /* 15555 */ 49109, 49133, 49154, 35259, 31750, 29909, 22834, 49188, 46047, 45216, 49204, 37167, 46360, 49717, 49077,
  /* 15570 */ 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153, 51506, 49237, 41255, 49273, 49306, 43870,
  /* 15585 */ 49343, 42173, 48129, 33032, 28081, 49359, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 15600 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 15615 */ 21210, 26633, 21210, 21210, 21210, 21210, 49418, 21210, 21210, 29624, 21210, 27572, 49495, 49538, 49522,
  /* 15630 */ 49537, 49506, 49569, 49554, 49583, 41604, 21210, 21210, 21210, 27177, 21210, 41574, 21210, 21210, 21210,
  /* 15645 */ 21210, 41569, 21210, 32747, 21210, 50347, 19795, 37661, 49645, 28557, 49631, 49681, 26571, 21210, 21210,
  /* 15660 */ 32993, 21210, 21210, 40461, 49706, 21210, 21210, 21210, 21210, 49714, 47701, 49074, 49074, 49074, 49738,
  /* 15675 */ 49773, 48154, 48154, 33110, 37499, 37350, 37350, 37350, 49790, 35317, 49825, 21210, 22385, 49885, 21210,
  /* 15690 */ 21210, 21210, 22899, 51106, 21210, 21517, 49912, 49074, 41158, 37626, 49931, 39663, 35080, 48154, 49967,
  /* 15705 */ 41021, 45999, 48502, 22985, 33787, 42142, 40859, 49983, 37428, 28471, 21210, 21210, 25614, 21210, 50004,
  /* 15720 */ 21210, 21210, 21210, 50021, 21210, 21210, 49073, 49802, 49074, 49074, 49074, 45050, 48154, 50040, 48154,
  /* 15735 */ 48154, 48154, 37454, 37350, 50061, 37350, 37350, 37350, 28465, 50377, 21210, 45679, 21210, 21210, 21210,
  /* 15750 */ 21210, 21210, 50078, 49074, 49074, 49074, 49074, 29068, 50094, 48154, 48154, 48154, 46167, 48959, 37350,
  /* 15765 */ 37350, 37350, 37350, 28469, 35831, 21210, 21210, 50188, 46820, 21210, 35912, 50115, 49074, 49074, 50135,
  /* 15780 */ 48154, 48154, 48154, 50211, 37350, 37350, 37350, 50275, 28303, 21210, 21210, 21210, 49716, 49074, 49074,
  /* 15795 */ 30644, 48154, 48154, 43916, 37350, 37350, 23547, 32545, 21210, 21210, 21210, 49721, 49074, 49075, 48154,
  /* 15810 */ 48154, 43919, 37350, 37350, 29001, 21210, 20582, 49720, 50300, 28956, 48155, 51151, 29352, 46360, 49717,
  /* 15825 */ 49077, 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153, 37351, 21487, 49944, 50322, 50343,
  /* 15840 */ 30646, 43922, 28390, 48129, 50363, 50407, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 15855 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 15870 */ 21210, 21210, 26633, 21210, 21210, 21210, 21210, 36931, 37963, 40138, 36452, 21210, 27195, 50442, 40134,
  /* 15885 */ 18447, 32550, 37866, 50475, 50460, 50489, 41604, 21210, 21210, 21210, 26418, 21210, 21210, 21210, 21210,
  /* 15900 */ 21210, 21210, 21210, 21210, 21210, 21210, 30718, 49076, 41864, 36600, 31991, 48143, 26655, 21210, 33218,
  /* 15915 */ 39513, 32993, 21210, 21210, 21210, 21210, 21210, 43654, 21210, 21210, 20584, 23186, 49074, 32805, 49074,
  /* 15930 */ 26688, 50523, 48154, 34618, 50788, 23266, 37350, 37350, 50544, 48137, 35317, 21210, 21210, 21210, 21210,
  /* 15945 */ 21210, 21210, 50565, 21210, 21210, 44202, 21210, 20583, 49074, 49074, 42114, 49074, 49074, 35080, 48154,
  /* 15960 */ 48154, 50585, 48154, 48154, 22985, 37350, 33930, 37350, 37350, 37352, 28471, 21210, 21210, 21210, 21210,
  /* 15975 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49073, 49074, 49074, 49074, 49074, 20468, 48154, 48154,
  /* 15990 */ 48154, 48154, 48154, 37340, 37350, 37350, 37350, 37350, 37350, 28465, 46357, 21210, 21210, 21210, 21210,
  /* 16005 */ 21210, 21210, 21210, 49718, 49074, 49074, 49074, 49074, 29068, 48154, 48154, 48154, 48154, 46167, 37349,
  /* 16020 */ 37350, 37350, 37350, 37350, 28469, 32549, 21210, 38306, 21210, 21210, 21210, 49070, 49074, 49074, 49074,
  /* 16035 */ 29078, 48154, 48154, 48154, 37348, 37350, 37350, 37350, 32539, 21210, 22186, 21210, 21210, 49716, 49074,
  /* 16050 */ 49074, 30644, 48154, 48154, 43916, 37350, 37350, 23547, 32545, 21210, 21210, 21210, 49721, 49074, 49075,
  /* 16065 */ 48154, 48154, 43919, 37350, 37350, 29001, 47171, 20582, 49720, 49074, 48151, 48155, 37350, 29352, 46360,
  /* 16080 */ 49717, 49077, 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153, 37351, 49717, 30647, 43922,
  /* 16095 */ 41422, 30646, 43922, 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 16110 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 16125 */ 21210, 21210, 21210, 26633, 21210, 21210, 21210, 21210, 26617, 21210, 21210, 50602, 27379, 50620, 50636,
  /* 16140 */ 21210, 39885, 50670, 50686, 50702, 50718, 50734, 41604, 21210, 21210, 21210, 26418, 21210, 21210, 21210,
  /* 16155 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49719, 45927, 30249, 39785, 37192, 50768, 50804, 21210,
  /* 16170 */ 21210, 21210, 32993, 21210, 21210, 21210, 21210, 40006, 21210, 21210, 21210, 20584, 49074, 49074, 49074,
  /* 16185 */ 49074, 26688, 48154, 48154, 48154, 50788, 37350, 37350, 37350, 37350, 48137, 35317, 21210, 21210, 21210,
  /* 16200 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 20583, 49074, 49074, 49074, 49074, 49074, 35080,
  /* 16215 */ 48154, 48154, 48154, 48154, 48154, 22985, 37350, 37350, 37350, 37350, 37352, 28471, 21210, 21210, 21210,
  /* 16230 */ 21210, 21210, 21210, 50966, 21210, 21210, 21210, 21210, 50847, 49074, 49074, 49074, 49074, 48678, 48154,
  /* 16245 */ 48154, 48154, 48154, 48154, 32429, 37350, 37350, 37350, 37350, 37350, 28465, 46357, 21210, 43744, 21210,
  /* 16260 */ 21210, 21210, 21210, 21210, 49718, 49074, 20245, 49074, 40788, 29068, 48154, 35336, 48154, 48154, 50871,
  /* 16275 */ 37349, 37350, 50898, 37350, 43082, 28469, 32549, 21210, 21210, 21210, 21210, 21210, 49070, 49074, 49074,
  /* 16290 */ 49074, 29078, 48154, 48154, 48154, 37348, 37350, 37350, 37350, 32539, 21210, 21210, 21210, 21210, 49716,
  /* 16305 */ 49074, 49074, 30644, 48154, 48154, 43916, 37350, 37350, 23547, 32545, 21210, 21210, 21210, 49721, 49074,
  /* 16320 */ 49075, 48154, 48154, 43919, 37350, 37350, 29001, 21210, 20582, 49720, 49074, 48151, 48155, 37350, 29352,
  /* 16335 */ 46360, 49717, 49077, 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153, 37351, 49717, 30647,
  /* 16350 */ 43922, 41422, 30646, 43922, 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210, 21210, 21210, 21210,
  /* 16365 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 16380 */ 21210, 21210, 21210, 21210, 26905, 21210, 21210, 21210, 21210, 43825, 21210, 21210, 21210, 21210, 23781,
  /* 16395 */ 21209, 21210, 21210, 21210, 38014, 50934, 50919, 50948, 41604, 21210, 21210, 21210, 27003, 21210, 44700,
  /* 16410 */ 21210, 21210, 21210, 35277, 21008, 21210, 51722, 50982, 51001, 49076, 44854, 37379, 31991, 48143, 26655,
  /* 16425 */ 21210, 21210, 21210, 51037, 21210, 51071, 51088, 21210, 21210, 21210, 21210, 21210, 20584, 49074, 49074,
  /* 16440 */ 51122, 33441, 26688, 48154, 45527, 31070, 50788, 37350, 37350, 51146, 41363, 48137, 39182, 51167, 21210,
  /* 16455 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 20583, 49074, 49074, 49074, 49074, 49074,
  /* 16470 */ 35080, 48154, 48154, 48154, 48154, 48154, 22985, 37350, 37350, 37350, 37350, 37352, 28471, 21210, 21210,
  /* 16485 */ 21210, 21210, 21210, 21210, 21210, 51195, 21210, 21210, 21210, 49073, 49074, 41713, 49074, 49074, 48914,
  /* 16500 */ 48154, 48154, 50420, 48154, 48154, 35152, 37350, 37350, 51212, 37350, 37350, 28465, 46357, 21417, 21210,
  /* 16515 */ 21210, 21210, 21210, 21210, 21210, 49718, 41662, 49074, 49074, 49074, 29068, 45106, 48154, 48154, 48154,
  /* 16530 */ 46167, 37349, 51233, 37350, 37350, 37350, 28469, 32549, 21210, 21210, 21210, 21210, 21210, 49070, 49074,
  /* 16545 */ 49074, 49074, 29078, 48154, 48154, 48154, 37348, 37350, 37350, 37350, 32539, 21210, 21210, 21210, 21210,
  /* 16560 */ 49716, 49074, 49074, 30644, 48154, 48154, 43916, 37350, 37350, 23547, 32545, 21210, 21210, 21210, 49721,
  /* 16575 */ 49074, 49075, 48154, 48154, 43919, 37350, 37350, 29001, 21210, 20582, 49720, 49074, 48151, 48155, 37350,
  /* 16590 */ 29352, 46360, 49717, 49077, 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153, 37351, 49717,
  /* 16605 */ 30647, 43922, 41422, 30646, 43922, 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210, 21210, 21210,
  /* 16620 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 16635 */ 21210, 21210, 21210, 21210, 21210, 26633, 21210, 21210, 21210, 21210, 43825, 21210, 21210, 21210, 21210,
  /* 16650 */ 23781, 21209, 21210, 21210, 21210, 20942, 35306, 29883, 26406, 41604, 51254, 21210, 21210, 26418, 21210,
  /* 16665 */ 21210, 51271, 21210, 21210, 21210, 21210, 51273, 21210, 21210, 31456, 46545, 48154, 51304, 30351, 51290,
  /* 16680 */ 51326, 21210, 36082, 21210, 32993, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 39199, 20584, 49074,
  /* 16695 */ 49074, 49074, 51403, 26688, 48154, 48154, 48154, 51359, 37350, 37350, 37350, 40619, 48137, 35317, 21210,
  /* 16710 */ 26966, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 41563, 21210, 20583, 33049, 49074, 49074, 51395,
  /* 16725 */ 49074, 35080, 46462, 48154, 48154, 51419, 48154, 22985, 37912, 37350, 35705, 37350, 37352, 28471, 21210,
  /* 16740 */ 21210, 33177, 21210, 21210, 21210, 21210, 21210, 44694, 21210, 21210, 49073, 42631, 49074, 49074, 49074,
  /* 16755 */ 37058, 48154, 33540, 48154, 48154, 48154, 29853, 37350, 40816, 37350, 37350, 37350, 28465, 46357, 21210,
  /* 16770 */ 21210, 21210, 21210, 21210, 21210, 27918, 49718, 49074, 49074, 51436, 49074, 28606, 48154, 48154, 35729,
  /* 16785 */ 48154, 37667, 37349, 37350, 41040, 37350, 34857, 28469, 32549, 21210, 21210, 28205, 21210, 21210, 49070,
  /* 16800 */ 49074, 49074, 49074, 29078, 48154, 48154, 48154, 37348, 37350, 37350, 37350, 23314, 21210, 21210, 29711,
  /* 16815 */ 21210, 49716, 51460, 49074, 30644, 51484, 48154, 43916, 51505, 37350, 23547, 32545, 21210, 27631, 21210,
  /* 16830 */ 49721, 36739, 49075, 48154, 28158, 43919, 43804, 37350, 29001, 21210, 20582, 49720, 49074, 48151, 48155,
  /* 16845 */ 37350, 29352, 46360, 49717, 49077, 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153, 37351,
  /* 16860 */ 49717, 30647, 43922, 41422, 30646, 43922, 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210, 21210,
  /* 16875 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 16890 */ 21210, 21210, 21210, 21210, 21210, 21210, 26633, 21210, 21210, 21210, 21210, 43825, 21210, 21210, 21210,
  /* 16905 */ 21210, 23781, 51522, 21210, 21210, 21210, 20942, 35306, 29883, 26406, 41604, 21210, 21210, 21210, 26418,
  /* 16920 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49719, 49076, 48154, 39785, 31991,
  /* 16935 */ 48143, 26655, 21210, 21210, 21210, 32993, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 20584,
  /* 16950 */ 49074, 49074, 49074, 49074, 26688, 48154, 48154, 48154, 50788, 37350, 37350, 37350, 37350, 48137, 35317,
  /* 16965 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 20583, 49074, 49074, 49074,
  /* 16980 */ 49074, 49074, 35080, 48154, 48154, 48154, 48154, 48154, 22985, 37350, 37350, 37350, 37350, 37352, 28471,
  /* 16995 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49073, 49074, 49074, 49074,
  /* 17010 */ 49074, 20468, 48154, 48154, 48154, 48154, 48154, 37340, 37350, 37350, 37350, 37350, 37350, 28465, 46357,
  /* 17025 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49718, 49074, 49074, 49074, 49074, 29068, 48154, 48154,
  /* 17040 */ 48154, 48154, 46167, 37349, 37350, 37350, 37350, 37350, 28469, 32549, 21210, 21210, 21210, 21210, 21210,
  /* 17055 */ 49070, 49074, 49074, 49074, 29078, 48154, 48154, 48154, 37348, 37350, 37350, 37350, 32539, 21210, 21210,
  /* 17070 */ 21210, 21210, 49716, 49074, 49074, 30644, 48154, 48154, 43916, 37350, 37350, 23547, 32545, 21210, 21210,
  /* 17085 */ 21210, 49721, 49074, 49075, 48154, 48154, 43919, 37350, 37350, 29001, 21210, 20582, 49720, 49074, 48151,
  /* 17100 */ 48155, 37350, 29352, 46360, 49717, 49077, 48155, 37350, 29896, 49722, 48149, 43923, 40281, 49072, 48153,
  /* 17115 */ 37351, 49717, 30647, 43922, 41422, 30646, 43922, 28390, 48129, 33032, 28081, 23563, 23575, 21210, 21210,
  /* 17130 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 17145 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21002, 21210, 21210, 21210, 21210, 21156, 51560, 51558,
  /* 17160 */ 19446, 51553, 51590, 51600, 51545, 51562, 19447, 51578, 51617, 51632, 51646, 51680, 21210, 21210, 21210,
  /* 17175 */ 26418, 21210, 22969, 40992, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21449, 18737, 18835, 20152,
  /* 17190 */ 20624, 27298, 51713, 18614, 50195, 28500, 38420, 21210, 21210, 47888, 21210, 24332, 18638, 18685, 18713,
  /* 17205 */ 18718, 18734, 18653, 18753, 19585, 20291, 20343, 18791, 20120, 51738, 20620, 20349, 18797, 25891, 19321,
  /* 17220 */ 51768, 21210, 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952, 27285, 18968, 19573,
  /* 17235 */ 18987, 19045, 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143, 21825, 20164, 18835, 22497,
  /* 17250 */ 19343, 21210, 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781, 34183, 19113, 19159,
  /* 17265 */ 19175, 19197, 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259, 19277, 19295, 19337,
  /* 17280 */ 51752, 19359, 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625, 19654, 19670,
  /* 17295 */ 52075, 19691, 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765, 21210, 19811, 51055,
  /* 17310 */ 19846, 19862, 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904, 20105, 19934, 19950, 19985,
  /* 17325 */ 50240, 20008, 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915, 20180, 20904, 20210,
  /* 17340 */ 20226, 20261, 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484, 25301, 20500, 19638,
  /* 17355 */ 20529, 20549, 20533, 20553, 20569, 20600, 20640, 20656, 20654, 20672, 21452, 27304, 18835, 20865, 20701,
  /* 17370 */ 18668, 18669, 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836, 20974, 20986, 21210,
  /* 17385 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 17400 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21002, 21210, 21210, 21210, 21210, 31533, 21210,
  /* 17415 */ 21210, 41001, 21210, 23781, 51802, 51813, 51823, 51839, 51843, 21210, 51859, 51874, 43992, 21210, 21210,
  /* 17430 */ 21210, 26418, 21210, 22969, 21210, 21210, 21210, 21210, 19381, 21210, 21210, 19378, 21449, 19047, 18835,
  /* 17445 */ 20068, 20624, 51902, 18589, 18614, 50195, 28500, 38420, 21210, 21210, 47888, 21210, 24332, 18638, 18685,
  /* 17460 */ 18713, 18718, 18734, 18653, 18753, 19585, 20614, 20343, 18791, 20120, 18813, 20620, 20349, 18797, 25891,
  /* 17475 */ 19321, 18852, 21210, 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952, 27285, 18968,
  /* 17490 */ 19573, 18987, 19045, 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143, 21825, 20164, 18835,
  /* 17505 */ 22497, 19343, 21210, 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781, 34183, 19113,
  /* 17520 */ 19159, 19175, 19197, 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259, 19277, 19295,
  /* 17535 */ 19337, 51752, 19359, 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625, 19654,
  /* 17550 */ 19670, 52075, 19691, 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765, 21210, 19811,
  /* 17565 */ 51055, 19846, 19862, 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904, 20105, 19934, 19950,
  /* 17580 */ 19985, 50240, 20008, 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915, 20180, 20904,
  /* 17595 */ 20210, 20226, 20261, 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484, 25301, 20500,
  /* 17610 */ 19638, 20529, 20549, 20533, 20553, 20569, 20600, 20640, 20656, 20654, 20672, 21452, 27304, 18835, 20865,
  /* 17625 */ 20701, 18668, 18669, 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836, 20974, 20986,
  /* 17640 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 17655 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21002, 21210, 21210, 21210, 21210, 35838,
  /* 17670 */ 21210, 21210, 21210, 21210, 38065, 51931, 51965, 51978, 51987, 51991, 21210, 52007, 52022, 43992, 21210,
  /* 17685 */ 21210, 21210, 26418, 21210, 22969, 21268, 21210, 21210, 26584, 21210, 21210, 21210, 26578, 21449, 19047,
  /* 17700 */ 18835, 20068, 20624, 27298, 18589, 18614, 50195, 28500, 38420, 21210, 21210, 47888, 21210, 24332, 18638,
  /* 17715 */ 18685, 18713, 18718, 18734, 18653, 18753, 19585, 20333, 20343, 18791, 20120, 52056, 20620, 20349, 18797,
  /* 17730 */ 25891, 19321, 18852, 21210, 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323, 18952, 27285,
  /* 17745 */ 18968, 19573, 18987, 19045, 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143, 21825, 20164,
  /* 17760 */ 18835, 22497, 19343, 21210, 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079, 34781, 34183,
  /* 17775 */ 19113, 19159, 19175, 19197, 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303, 19259, 19277,
  /* 17790 */ 19295, 19337, 51752, 19359, 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609, 18765, 19625,
  /* 17805 */ 19654, 19670, 52075, 19691, 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749, 19765, 21210,
  /* 17820 */ 19811, 51055, 19846, 19862, 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904, 20105, 19934,
  /* 17835 */ 19950, 19985, 50240, 20008, 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090, 25915, 20180,
  /* 17850 */ 20904, 20210, 20226, 20261, 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436, 20484, 25301,
  /* 17865 */ 20500, 19638, 20529, 20549, 20533, 20553, 20569, 20600, 20640, 20656, 20654, 20672, 21452, 27304, 18835,
  /* 17880 */ 20865, 20701, 18668, 18669, 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958, 20836, 20974,
  /* 17895 */ 20986, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 17910 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21002, 21210, 21210, 21210, 21210,
  /* 17925 */ 31533, 21210, 21210, 21210, 21210, 23781, 21209, 21210, 21210, 21210, 21210, 21210, 21210, 49851, 41604,
  /* 17940 */ 21210, 21210, 21210, 26418, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49719,
  /* 17955 */ 49076, 48154, 39785, 31991, 48143, 22915, 21210, 21210, 21210, 32993, 21210, 21210, 21210, 21210, 21210,
  /* 17970 */ 21210, 21210, 21210, 20584, 49074, 49074, 49074, 49074, 28772, 48154, 48154, 48154, 30778, 37350, 37350,
  /* 17985 */ 37350, 37350, 48137, 35317, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 18000 */ 20583, 49074, 49074, 49074, 49074, 49074, 35080, 48154, 48154, 48154, 48154, 48154, 22985, 37350, 37350,
  /* 18015 */ 37350, 37350, 37352, 28471, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 18030 */ 49073, 49074, 49074, 49074, 49074, 20468, 48154, 48154, 48154, 48154, 48154, 37340, 37350, 37350, 37350,
  /* 18045 */ 37350, 37350, 28465, 46357, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 49718, 49074, 49074, 49074,
  /* 18060 */ 49074, 29068, 48154, 48154, 48154, 48154, 46167, 37349, 37350, 37350, 37350, 37350, 28469, 32549, 21210,
  /* 18075 */ 21210, 21210, 21210, 21210, 49070, 49074, 49074, 49074, 29078, 48154, 48154, 48154, 37348, 37350, 37350,
  /* 18090 */ 37350, 32539, 21210, 21210, 21210, 21210, 49716, 49074, 49074, 30644, 48154, 48154, 43916, 37350, 37350,
  /* 18105 */ 23547, 32545, 21210, 21210, 21210, 49721, 49074, 49075, 48154, 48154, 43919, 37350, 37350, 29001, 21210,
  /* 18120 */ 20582, 49720, 49074, 48151, 48155, 37350, 29352, 46360, 49717, 49077, 48155, 37350, 29896, 49722, 48149,
  /* 18135 */ 43923, 40281, 49072, 48153, 37351, 49717, 30647, 43922, 41422, 30646, 43922, 28390, 48129, 33032, 28081,
  /* 18150 */ 23563, 23575, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 18165 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 18180 */ 21210, 21210, 21210, 21210, 33849, 21210, 21210, 50654, 52091, 52099, 52099, 52103, 21210, 52119, 52131,
  /* 18195 */ 24173, 21210, 21210, 21210, 21210, 21210, 22969, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 18210 */ 21449, 19047, 18835, 20068, 20624, 27298, 51751, 18614, 50195, 28500, 35027, 21210, 21210, 47888, 21210,
  /* 18225 */ 24332, 18638, 18685, 18713, 18718, 18734, 18653, 18753, 19585, 20291, 20343, 18791, 20120, 51738, 20620,
  /* 18240 */ 20349, 18797, 25891, 19321, 18852, 21210, 35787, 34141, 21210, 21210, 21210, 18880, 18917, 21210, 25323,
  /* 18255 */ 18952, 27285, 18968, 19573, 18987, 19045, 19593, 18775, 18836, 21821, 20160, 18835, 22493, 18827, 19143,
  /* 18270 */ 21825, 20164, 18835, 22497, 19343, 21210, 28742, 27091, 36699, 19063, 36689, 40940, 21210, 21210, 19079,
  /* 18285 */ 34781, 34183, 19113, 19159, 19175, 19197, 19125, 51913, 20301, 19257, 19275, 19293, 19311, 51915, 20303,
  /* 18300 */ 19259, 19277, 19295, 19337, 51752, 19359, 19397, 19427, 25756, 19463, 27880, 19498, 19533, 19560, 19609,
  /* 18315 */ 18765, 19625, 19654, 19670, 52075, 19691, 19712, 19733, 19665, 52070, 19686, 19707, 19728, 20194, 19749,
  /* 18330 */ 19765, 21210, 19811, 51055, 19846, 19862, 19210, 19918, 19888, 19135, 19904, 20105, 19934, 19135, 19904,
  /* 18345 */ 20105, 19934, 19950, 19985, 50240, 20008, 20031, 23399, 20513, 19181, 20057, 20090, 25915, 20141, 20090,
  /* 18360 */ 25915, 20180, 20904, 20210, 20226, 20261, 20277, 20319, 20365, 20413, 20381, 20404, 20420, 20388, 20436,
  /* 18375 */ 20484, 50163, 20500, 19638, 20529, 20549, 20533, 20553, 52157, 20600, 20640, 20656, 20654, 52183, 21452,
  /* 18390 */ 27304, 18835, 20865, 20701, 18668, 18669, 34173, 20742, 20764, 20780, 20821, 20852, 20890, 20920, 20958,
  /* 18405 */ 20836, 20974, 20986, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210,
  /* 18420 */ 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 21210, 1, 12290, 3, 0, 0, 6,
  /* 18438 */ 0, 0, 0, 0, 0, 94512, 94512, 94512, 94512, 0, 0, 0, 369, 0, 379, 0, 0, 379, 0, 0, 0, 0, 0, 0, 0, 679, 0,
  /* 18465 */ 679, 0, 0, 0, 0, 0, 0, 0, 554, 554, 554, 554, 554, 879, 554, 0, 98611, 98611, 98611, 94512, 94512, 98611,
  /* 18487 */ 98611, 98611, 98611, 98611, 98611, 98611, 98611, 98611, 98611, 98611, 374, 98611, 94512, 98611, 98611,
  /* 18502 */ 98611, 98611, 98611, 98611, 98611, 98611, 98611, 98611, 98611, 69632, 73728, 98611, 98611, 98611, 98611,
  /* 18517 */ 98611, 98611, 98611, 98611, 98611, 98611, 98611, 98611, 98611, 0, 98611, 94512, 65536, 98611, 98611,
  /* 18532 */ 98611, 98611, 98611, 98611, 98611, 98611, 98611, 98611, 98611, 98611, 98611, 98611, 98611, 98611, 98611,
  /* 18547 */ 98611, 98611, 98611, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 94512, 0, 0, 98611, 308, 309, 0, 2134016,
  /* 18569 */ 312, 313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 313, 313, 0, 0, 0, 2125824, 2125824, 2125824, 2125824,
  /* 18594 */ 2125824, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 225280, 0, 0, 0, 0, 0, 0, 0, 2445312, 2453504,
  /* 18619 */ 0, 0, 2478080, 0, 0, 0, 0, 0, 0, 0, 0, 0, 424, 424, 0, 0, 0, 0, 0, 0, 0, 2445312, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18649 */ 0, 0, 0, 0, 2646016, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2719744, 2179072, 2736128,
  /* 18663 */ 2179072, 2744320, 2179072, 2752512, 2793472, 2179072, 2125824, 2125824, 2523136, 2125824, 2125824,
  /* 18674 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3035136, 2125824, 2125824, 2125824, 0,
  /* 18686 */ 2719744, 2736128, 0, 0, 2793472, 2826240, 2850816, 0, 2887680, 2945024, 0, 0, 0, 0, 0, 0, 0, 1702, 0, 0,
  /* 18706 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2826240, 2945024, 0, 0, 0, 0, 0, 2945024, 0, 0, 0, 0, 0, 0, 0, 2752512, 0,
  /* 18732 */ 2179072, 2179072, 2179072, 2445312, 2453504, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18743 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2126756, 2179072,
  /* 18754 */ 2826240, 2179072, 2850816, 2179072, 2179072, 2179072, 2887680, 2179072, 2179072, 2179072, 2945024,
  /* 18765 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2912256, 2179072, 2949120, 2179072,
  /* 18776 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 0, 2125824, 2125824, 2125824, 2428928, 2125824,
  /* 18788 */ 2125824, 2125824, 2125824, 2736128, 2125824, 2744320, 2125824, 2752512, 2793472, 2125824, 2125824,
  /* 18799 */ 2125824, 2826240, 2125824, 2850816, 2125824, 2125824, 2125824, 2887680, 2125824, 2125824, 2125824,
  /* 18810 */ 2125824, 2945024, 2125824, 3141632, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18821 */ 2125824, 2125824, 2125824, 0, 0, 1006, 2125824, 2125824, 0, 0, 2125824, 2125824, 2125824, 2428928,
  /* 18835 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18846 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2605056, 2179072, 2478080, 2125824, 2125824, 2125824,
  /* 18857 */ 2125824, 2478080, 2125824, 2125824, 2125824, 2125824, 2183168, 0, 0, 0, 0, 0, 0, 1692, 0, 1694, 0, 0, 0,
  /* 18876 */ 1696, 0, 765, 0, 2822144, 0, 0, 0, 0, 2142208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 802, 0, 0, 0, 0, 0, 0, 0,
  /* 18905 */ 0, 0, 0, 0, 816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2682880, 0, 2834432, 0, 0, 0, 0, 2383872, 0, 0, 0, 0, 0, 0,
  /* 18934 */ 0, 1703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 430, 0, 0, 2863104, 0, 0, 2863104, 0, 0, 0, 0,
  /* 18961 */ 0, 0, 0, 0, 0, 0, 2916352, 2179072, 2179072, 2428928, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18976 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2126755, 2126755,
  /* 18987 */ 2179072, 2179072, 2682880, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18998 */ 2179072, 2179072, 2822144, 2834432, 2179072, 2126755, 2126755, 2524067, 2126755, 2126755, 2126755,
  /* 19009 */ 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 3036067, 2126755, 2126755, 2126755, 2126755,
  /* 19020 */ 2126755, 2638755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2683811, 2126755, 2126755,
  /* 19031 */ 2126755, 2126755, 2126755, 2474915, 2126755, 2495395, 2503587, 2126755, 2126755, 2126755, 2126755,
  /* 19042 */ 2126755, 2126755, 2552739, 2854912, 2863104, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19053 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 0, 0, 0,
  /* 19066 */ 3211264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2818048, 0, 0, 0, 2936832, 0, 3231744, 2486272, 0, 0, 2740224,
  /* 19089 */ 0, 0, 0, 0, 0, 0, 0, 763, 0, 0, 0, 0, 0, 0, 0, 0, 0, 751, 0, 0, 0, 0, 0, 0, 2179072, 2179072, 2543616,
  /* 19116 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2621440, 2179072, 2179072,
  /* 19127 */ 2179072, 2179072, 2179072, 2179072, 3231744, 2179072, 0, 0, 0, 0, 2125824, 2125824, 2125824, 2125824,
  /* 19141 */ 2125824, 2465792, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19152 */ 2125824, 2125824, 2605056, 2125824, 2125824, 2125824, 2125824, 2662400, 2179072, 2179072, 2179072,
  /* 19163 */ 2179072, 2179072, 2179072, 2740224, 2179072, 2179072, 2179072, 2179072, 2179072, 2789376, 2797568,
  /* 19174 */ 2818048, 2842624, 2179072, 2179072, 2179072, 2908160, 2936832, 2179072, 2179072, 2179072, 2179072,
  /* 19185 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2953216, 2179072, 2179072, 2179072, 3022848,
  /* 19196 */ 2179072, 2179072, 2179072, 3063808, 2179072, 3088384, 2179072, 2179072, 2179072, 2179072, 3125248,
  /* 19207 */ 2179072, 2179072, 3158016, 2179072, 2179072, 2179072, 2179072, 2179072, 2572288, 2179072, 2179072,
  /* 19218 */ 2179072, 2179072, 2179072, 2658304, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3231744,
  /* 19229 */ 2179072, 0, 0, 0, 0, 2126755, 2126755, 2126755, 2126755, 2126755, 2466723, 2126755, 2126755, 2126755,
  /* 19243 */ 2126755, 2126755, 2126755, 2126755, 2126755, 2622371, 2126755, 2126755, 2126755, 2126755, 2663331,
  /* 19254 */ 2126755, 2126755, 2126755, 2125824, 2125824, 2125824, 2740224, 2125824, 2125824, 2125824, 2125824,
  /* 19265 */ 2125824, 2789376, 2797568, 2125824, 2818048, 2842624, 2125824, 2125824, 2125824, 2908160, 2125824,
  /* 19276 */ 2908160, 2125824, 2936832, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19287 */ 2125824, 2125824, 2125824, 2125824, 3063808, 2125824, 3063808, 2125824, 3088384, 2125824, 2125824,
  /* 19298 */ 2125824, 2125824, 3125248, 2125824, 2125824, 3158016, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19309 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3231744, 2125824, 0, 0, 0, 0, 2125824, 2125824,
  /* 19323 */ 2125824, 2125824, 2125824, 2125824, 0, 0, 2179072, 2125824, 2125824, 2125824, 2478080, 2179072, 2179072,
  /* 19336 */ 2179072, 2125824, 2125824, 3231744, 2125824, 2125824, 2179072, 2125824, 2125824, 2125824, 2179072,
  /* 19347 */ 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0,
  /* 19359 */ 2498560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2625536, 0, 0, 0, 0, 0, 0, 2085, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19388 */ 1175552, 0, 0, 0, 0, 0, 0, 0, 0, 2912256, 0, 2949120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3186688, 3194880, 0, 0,
  /* 19413 */ 0, 0, 1265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1271, 3244032, 3059712, 0, 0, 0, 0, 0, 3096576, 2670592, 0, 0,
  /* 19438 */ 2830336, 0, 0, 0, 0, 0, 0, 2097, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1159168, 0, 0, 1159168, 0, 0, 0, 0,
  /* 19464 */ 2707456, 2756608, 0, 0, 2551808, 2727936, 0, 3215360, 0, 0, 2596864, 0, 0, 0, 0, 0, 0, 2125, 0, 0, 0, 0,
  /* 19486 */ 0, 0, 0, 0, 0, 0, 2782, 0, 0, 0, 0, 0, 2408448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3145728, 3166208, 0, 0, 0,
  /* 19514 */ 0, 0, 3338, 0, 0, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 3542, 554, 554, 2949120, 0,
  /* 19535 */ 2703360, 0, 0, 0, 0, 0, 0, 3137536, 2408448, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19550 */ 2125824, 1849, 2125824, 2125824, 2125824, 2428928, 2125824, 2125824, 2125824, 2125824, 2179072, 2179072,
  /* 19562 */ 2473984, 2179072, 2494464, 2502656, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2551808,
  /* 19573 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2605056, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19584 */ 2637824, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3141632, 2179072, 2179072,
  /* 19595 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3149824, 2179072, 2179072, 2179072,
  /* 19606 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2625536, 2179072, 2650112, 2179072,
  /* 19617 */ 2179072, 2670592, 2179072, 2179072, 2179072, 2727936, 2179072, 2756608, 2179072, 2179072, 2179072,
  /* 19628 */ 3059712, 2179072, 2179072, 3096576, 2179072, 2179072, 3145728, 2179072, 2179072, 3166208, 2179072,
  /* 19639 */ 2179072, 2179072, 2179072, 2179072, 2674688, 2699264, 2781184, 2785280, 2879488, 2994176, 2179072,
  /* 19650 */ 3031040, 2179072, 3043328, 2179072, 3194880, 2179072, 2179072, 3215360, 3219456, 2179072, 0, 0, 0, 0, 0,
  /* 19665 */ 0, 2408448, 2125824, 2125824, 2441216, 2125824, 2125824, 2125824, 2125824, 2125824, 2473984, 2125824,
  /* 19677 */ 2494464, 2502656, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2551808, 2125824, 2670592,
  /* 19688 */ 2125824, 2125824, 2125824, 2727936, 2125824, 2756608, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19699 */ 2125824, 2125824, 2125824, 2912256, 2125824, 2125824, 2949120, 2125824, 2912256, 2125824, 2125824,
  /* 19710 */ 2949120, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3059712,
  /* 19721 */ 2125824, 2125824, 3096576, 2125824, 2125824, 3145728, 2125824, 3096576, 2125824, 2125824, 3145728,
  /* 19732 */ 2125824, 2125824, 3166208, 2125824, 2125824, 2125824, 3194880, 2125824, 2125824, 3215360, 3219456,
  /* 19743 */ 2125824, 0, 0, 0, 0, 0, 3244032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2838528, 2871296, 0, 2940928, 0,
  /* 19768 */ 0, 3026944, 0, 0, 3047424, 0, 0, 3170304, 0, 3227648, 0, 0, 0, 0, 0, 3411, 0, 0, 0, 0, 0, 554, 554, 554,
  /* 19792 */ 554, 554, 2192, 554, 554, 554, 554, 554, 554, 554, 554, 554, 922, 554, 554, 554, 554, 575, 575, 0,
  /* 19812 */ 2748416, 0, 0, 0, 3108864, 0, 0, 0, 0, 3092480, 0, 0, 0, 0, 0, 0, 0, 1745, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19839 */ 2100, 0, 0, 0, 0, 0, 0, 0, 2465792, 0, 2867200, 0, 0, 0, 2658304, 0, 0, 0, 0, 2641920, 0, 3207168,
  /* 19861 */ 2924544, 0, 2985984, 0, 0, 2179072, 2179072, 2179072, 2179072, 2179072, 2465792, 2179072, 2179072,
  /* 19874 */ 2179072, 2179072, 2179072, 2179072, 2125824, 0, 2126755, 2126755, 2126755, 2429859, 2126755, 2126755,
  /* 19886 */ 2126755, 2126755, 3026944, 2179072, 2179072, 3047424, 2179072, 3092480, 3108864, 3121152, 2179072,
  /* 19897 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3248128, 2125824, 2125824, 2125824, 2572288,
  /* 19908 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2658304, 2125824, 2125824, 2125824, 2125824, 2748416,
  /* 19919 */ 2772992, 2179072, 2179072, 2179072, 2867200, 2871296, 2179072, 2940928, 2179072, 2179072, 2969600,
  /* 19930 */ 2179072, 2179072, 3018752, 2179072, 3026944, 2125824, 2125824, 3047424, 2125824, 3092480, 3108864,
  /* 19941 */ 3121152, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3248128, 2125824, 2179072,
  /* 19952 */ 2437120, 2125824, 2125824, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 0, 0, 0, 0,
  /* 19968 */ 2062, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1209, 0, 0, 0, 0, 0, 0, 0, 2531328, 2535424, 0, 0, 2568192, 2617344, 0,
  /* 19993 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1166, 0, 374, 374, 0, 1169, 0, 3084288, 0, 2564096, 2686976, 0, 2654208, 0, 0,
  /* 20017 */ 0, 0, 0, 0, 0, 0, 0, 0, 1195, 0, 0, 0, 0, 0, 0, 0, 2981888, 0, 0, 0, 0, 0, 0, 2514944, 0, 0, 0, 0, 0, 0,
  /* 20047 */ 0, 764, 0, 0, 0, 0, 0, 662, 0, 0, 2179072, 2179072, 2179072, 3084288, 2179072, 2179072, 2179072, 2179072,
  /* 20065 */ 2179072, 2179072, 3203072, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 2125824, 2125824, 2125824,
  /* 20077 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 249856,
  /* 20089 */ 0, 2125824, 2125824, 2125824, 2514944, 2125824, 2125824, 2535424, 2125824, 2125824, 2125824, 2564096,
  /* 20101 */ 2568192, 2125824, 2125824, 2617344, 2125824, 2125824, 2125824, 2125824, 2867200, 2871296, 2125824,
  /* 20112 */ 2920448, 2940928, 2125824, 2125824, 2969600, 2125824, 2125824, 3018752, 2125824, 2125824, 2125824,
  /* 20123 */ 2125824, 2945024, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20134 */ 2125824, 2125824, 2125824, 2125824, 2125824, 0, 1080, 2125824, 2125824, 2125824, 3084288, 2125824,
  /* 20146 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3203072, 2125824, 2125824, 2125824, 2125824, 2125824, 0,
  /* 20158 */ 2125824, 2126830, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2822144,
  /* 20169 */ 2834432, 2125824, 2854912, 2863104, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20180 */ 2125824, 2125824, 2125824, 3084288, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3203072,
  /* 20191 */ 2125824, 2179072, 2125824, 2125824, 2179072, 2125824, 2125824, 2125824, 2179072, 2179072, 3137536,
  /* 20202 */ 3244032, 2125824, 2125824, 3137536, 3244032, 2125824, 2125824, 3137536, 2990080, 0, 0, 3100672, 0, 0,
  /* 20216 */ 2715648, 3198976, 2666496, 2633728, 2723840, 0, 0, 0, 0, 3002368, 0, 0, 3072000, 3153920, 0, 3006464,
  /* 20232 */ 2416640, 0, 3178496, 0, 0, 0, 2760704, 0, 0, 0, 0, 0, 3474, 554, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 20254 */ 554, 2574, 554, 554, 554, 554, 554, 0, 0, 2813952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2490368, 2527232,
  /* 20277 */ 2777088, 0, 0, 2600960, 0, 0, 0, 2416640, 2420736, 2179072, 2179072, 2461696, 2179072, 2490368, 2179072,
  /* 20292 */ 2179072, 0, 0, 2125824, 2125824, 2125824, 2125824, 2445312, 2453504, 2125824, 2125824, 2125824, 2125824,
  /* 20305 */ 2125824, 2125824, 2125824, 2621440, 2125824, 2125824, 2125824, 2125824, 2662400, 2125824, 2125824,
  /* 20316 */ 2125824, 2125824, 2125824, 2179072, 2539520, 2179072, 2179072, 2179072, 2179072, 2609152, 2179072,
  /* 20327 */ 2633728, 2666496, 2179072, 2179072, 2715648, 2777088, 2179072, 2179072, 0, 931, 2125824, 2125824, 2125824,
  /* 20340 */ 2125824, 2445312, 2453504, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2646016,
  /* 20351 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2719744, 2125824, 2736128, 2125824, 2744320,
  /* 20362 */ 2125824, 2752512, 2793472, 2179072, 2957312, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 20373 */ 2179072, 3153920, 2179072, 2179072, 3178496, 3190784, 3198976, 2416640, 2633728, 2666496, 2125824,
  /* 20384 */ 2125824, 2715648, 2777088, 2125824, 2125824, 2125824, 2125824, 2957312, 2125824, 2125824, 2125824,
  /* 20395 */ 2125824, 2125824, 2125824, 2125824, 3153920, 2125824, 2125824, 3178496, 3190784, 2125824, 2125824,
  /* 20406 */ 3153920, 2125824, 2125824, 3178496, 3190784, 3198976, 2416640, 2420736, 2125824, 2125824, 2461696,
  /* 20417 */ 2125824, 2490368, 2125824, 2125824, 2125824, 2539520, 2125824, 2125824, 2125824, 2125824, 2609152,
  /* 20428 */ 2125824, 2633728, 2666496, 2125824, 2125824, 2715648, 2777088, 2125824, 3198976, 2125824, 2527232,
  /* 20439 */ 2527232, 2527232, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 0, 2506752, 0, 0, 0, 0, 0, 3577,
  /* 20455 */ 0, 0, 0, 0, 0, 554, 554, 554, 554, 554, 554, 554, 2858, 554, 554, 554, 554, 554, 554, 554, 554, 0, 0, 0,
  /* 20479 */ 0, 575, 575, 575, 575, 0, 0, 2699264, 2879488, 3031040, 0, 3133440, 3223552, 0, 0, 3067904, 0, 3174400,
  /* 20497 */ 2961408, 0, 2781184, 2449408, 0, 3043328, 2785280, 2592768, 0, 0, 3076096, 2179072, 2449408, 2457600,
  /* 20511 */ 2179072, 2506752, 2179072, 2179072, 2179072, 2179072, 2514944, 2179072, 2179072, 2535424, 2179072,
  /* 20522 */ 2179072, 2179072, 2564096, 2568192, 2179072, 2179072, 2617344, 2179072, 2179072, 3174400, 2125824,
  /* 20533 */ 2449408, 2457600, 2125824, 2506752, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20544 */ 2125824, 2674688, 2699264, 2781184, 2785280, 2674688, 2699264, 2781184, 2785280, 2805760, 2879488,
  /* 20555 */ 2994176, 2125824, 3031040, 2125824, 3043328, 2125824, 2125824, 2125824, 3174400, 2125824, 2179072,
  /* 20566 */ 3076096, 2125824, 3076096, 2125824, 3076096, 0, 2510848, 2519040, 0, 0, 0, 0, 2899968, 0, 0, 0, 3201, 0,
  /* 20584 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 554, 554, 2859008, 0, 3252224, 2588672, 0, 0, 0, 0, 2584576, 0,
  /* 20610 */ 2965504, 2179072, 2179072, 2519040, 2179072, 2179072, 0, 932, 2125824, 2125824, 2125824, 2125824, 2445312,
  /* 20623 */ 2453504, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20634 */ 2125824, 2125824, 2125824, 2125824, 0, 0, 2179072, 2576384, 2584576, 2179072, 2179072, 2179072, 2179072,
  /* 20647 */ 2179072, 2179072, 2179072, 2179072, 2179072, 3162112, 2125824, 2125824, 2519040, 2125824, 2125824,
  /* 20658 */ 2125824, 2576384, 2584576, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20669 */ 2125824, 3162112, 2125824, 3162112, 2125824, 2965504, 2965504, 2965504, 0, 0, 0, 0, 0, 2768896, 2904064,
  /* 20684 */ 0, 3201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3335, 0, 0, 3014656, 2179072, 2179072, 2523136, 2179072,
  /* 20707 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3035136, 2179072, 2179072, 0, 932,
  /* 20720 */ 2126755, 2126755, 2126755, 2126755, 2446243, 2454435, 2126755, 2126755, 2126755, 2126755, 2126755,
  /* 20731 */ 2126755, 2126755, 2646947, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2720675, 2126755,
  /* 20742 */ 2613248, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824,
  /* 20753 */ 2125824, 2125824, 2613248, 2125824, 2125824, 0, 1943, 2125824, 2125824, 2125824, 2428928, 2125824,
  /* 20765 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2613248, 2125824,
  /* 20776 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2469888, 0, 2555904, 3055616, 0, 0, 0,
  /* 20790 */ 2883584, 0, 0, 2179072, 2469888, 2179072, 2179072, 0, 1384, 2125824, 2125824, 2125824, 2125824, 2445312,
  /* 20804 */ 2453504, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 303104, 2179072, 2125824, 2125824,
  /* 20816 */ 2125824, 2478080, 2179072, 2179072, 2179072, 2555904, 2179072, 2629632, 2179072, 2883584, 2179072,
  /* 20827 */ 2179072, 2179072, 3055616, 2125824, 2469888, 2125824, 2555904, 2125824, 2629632, 2125824, 2125824,
  /* 20838 */ 2125824, 2125824, 3051520, 2560000, 0, 2973696, 0, 2179072, 2678784, 2998272, 2179072, 2125824, 2678784,
  /* 20851 */ 2998272, 2883584, 2125824, 2125824, 2125824, 3055616, 2125824, 2469888, 2125824, 2555904, 2125824,
  /* 20862 */ 2629632, 2125824, 2883584, 2125824, 2125824, 2125824, 2125824, 0, 2523136, 0, 0, 3035136, 0, 0, 0, 0, 0,
  /* 20879 */ 0, 0, 0, 0, 69632, 73728, 274432, 0, 0, 0, 0, 3055616, 2125824, 2547712, 0, 0, 0, 0, 0, 2179072, 2547712,
  /* 20900 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2461696, 0, 0, 0, 0, 0,
  /* 20915 */ 0, 0, 0, 0, 2957312, 2547712, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2547712, 2125824,
  /* 20929 */ 2125824, 2125824, 2125824, 2125824, 3117056, 0, 0, 0, 0, 1615, 1616, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20952 */ 0, 0, 554, 575, 554, 575, 0, 0, 3051520, 2424832, 2179072, 2179072, 2179072, 2179072, 3051520, 2424832,
  /* 20968 */ 2125824, 2125824, 2125824, 2125824, 3051520, 2424832, 2125824, 2125824, 2678784, 2998272, 2125824,
  /* 20979 */ 2732032, 0, 2580480, 2179072, 2580480, 2125824, 2580480, 2125824, 0, 2179072, 2125824, 2125824, 0,
  /* 20992 */ 2179072, 2125824, 2125824, 3010560, 3010560, 3010560, 3010560, 0, 0, 0, 1, 12290, 3, 0, 0, 6, 0, 0, 0, 0,
  /* 21012 */ 0, 0, 0, 0, 0, 0, 0, 817, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115159, 115159, 115159, 115159,
  /* 21039 */ 115159, 115159, 115159, 115159, 115159, 115159, 115159, 115159, 115159, 115159, 115159, 115159, 471, 471,
  /* 21053 */ 115159, 471, 471, 471, 471, 471, 471, 471, 115159, 115159, 115159, 115159, 115159, 471, 115159, 115159,
  /* 21069 */ 115159, 115159, 471, 115159, 115159, 115159, 115159, 115159, 115159, 115159, 115159, 115159, 115159, 0, 0,
  /* 21084 */ 0, 0, 0, 0, 2137, 0, 0, 0, 0, 0, 0, 2144, 0, 2146, 0, 0, 115159, 0, 0, 0, 0, 0, 0, 0, 0, 115159, 115159,
  /* 21111 */ 0, 115159, 115159, 115159, 115159, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 0, 0, 0, 2153, 0, 0, 0, 0,
  /* 21135 */ 0, 0, 0, 0, 0, 0, 2523, 0, 0, 0, 0, 0, 1079, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 6, 0, 0,
  /* 21158 */ 0, 0, 0, 0, 0, 0, 0, 1159168, 0, 374, 0, 0, 0, 1159168, 1, 12290, 3, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21187 */ 122880, 0, 308, 0, 312, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2143, 0, 0, 0, 65536, 0, 0, 0, 0, 0,
  /* 21215 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 332, 312, 312, 0, 312, 312, 312, 312, 312, 312, 312, 312, 0, 0, 312, 0,
  /* 21242 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 312, 312, 0, 0, 0, 0, 0, 33420, 309, 0, 2134016, 49808, 313, 0, 0,
  /* 21270 */ 0, 0, 0, 0, 0, 0, 0, 1191936, 0, 0, 0, 0, 0, 0, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 6,
  /* 21293 */ 0, 0, 308, 0, 0, 0, 312, 312, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 0, 0, 0, 2167, 2168, 0, 0, 2170,
  /* 21320 */ 0, 0, 0, 2168, 0, 2105637, 12290, 3, 0, 0, 6, 301, 0, 0, 0, 0, 301, 0, 0, 0, 0, 0, 0, 2179, 0, 0, 0, 0, 0,
  /* 21349 */ 0, 0, 0, 0, 0, 2114, 0, 0, 0, 0, 2118, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126976, 0, 126976, 126976,
  /* 21375 */ 126976, 126976, 126976, 126976, 0, 126976, 126976, 126976, 126976, 126976, 126976, 126976, 126976, 126976,
  /* 21389 */ 0, 0, 126976, 0, 0, 0, 0, 0, 0, 0, 0, 126976, 126976, 0, 126976, 126976, 0, 0, 126976, 0, 0, 126976,
  /* 21411 */ 126976, 0, 0, 126976, 126976, 126976, 0, 0, 0, 0, 0, 0, 2457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 315, 0, 0, 0, 0,
  /* 21438 */ 0, 0, 0, 126976, 0, 0, 126976, 0, 0, 0, 126976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072,
  /* 21461 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 126976, 126976, 0, 0, 2105637, 12290, 3, 0,
  /* 21476 */ 0, 2183168, 6, 6, 0, 0, 0, 0, 0, 0, 2482, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3581, 554, 554, 554, 554, 554, 0,
  /* 21504 */ 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 6, 0, 0, 0, 1102, 1106, 0, 0, 0, 0, 1632, 0, 0, 0, 0,
  /* 21526 */ 0, 0, 0, 0, 0, 0, 0, 376, 0, 0, 0, 0, 1110, 1114, 0, 2445312, 2453504, 0, 0, 2478080, 0, 0, 0, 0, 0, 0, 0,
  /* 21553 */ 0, 0, 775, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 135168, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21583 */ 0, 0, 2464, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 135168, 0, 135168, 135168,
  /* 21608 */ 135168, 0, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 0, 0, 135168, 0, 0, 0, 0,
  /* 21625 */ 135168, 135168, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 0, 0, 135168, 135168, 1,
  /* 21649 */ 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 0, 0, 0, 2765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2157, 0, 0, 0, 0, 0,
  /* 21679 */ 0, 0, 0, 139264, 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2172, 0, 0, 0, 65536, 139264, 0, 0, 0, 0, 0,
  /* 21707 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 274432, 0, 139264, 139264, 0, 139264, 139264, 139264, 139264, 139264,
  /* 21727 */ 139264, 139264, 139264, 0, 0, 139264, 0, 0, 0, 0, 1645, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 374, 0, 0,
  /* 21752 */ 126976, 126976, 0, 0, 139264, 139264, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 0, 0, 0, 2778, 2779, 0,
  /* 21775 */ 0, 0, 0, 0, 0, 0, 0, 0, 2767, 0, 2768, 0, 0, 0, 0, 424, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 348,
  /* 21807 */ 3141632, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0,
  /* 21820 */ 1476, 2125824, 2125824, 2125824, 2125824, 2125824, 2637824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 21832 */ 2125824, 2682880, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 1, 12290, 3, 0, 0, 6, 0,
  /* 21848 */ 0, 0, 0, 0, 0, 0, 0, 0, 143360, 313, 313, 0, 313, 313, 313, 313, 313, 313, 313, 313, 0, 0, 313, 0, 0, 0,
  /* 21874 */ 313, 0, 0, 0, 2482176, 0, 0, 0, 0, 0, 0, 0, 806, 0, 818, 0, 835, 0, 0, 0, 0, 0, 0, 313, 313, 1, 12290, 3,
  /* 21902 */ 0, 0, 2183168, 6, 6, 0, 0, 0, 0, 0, 0, 2807, 2808, 0, 0, 0, 0, 2813, 0, 0, 0, 0, 2125824, 2125824,
  /* 21926 */ 2125824, 2125824, 2125824, 0, 0, 6, 0, 0, 0, 0, 0, 309, 0, 313, 143360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21952 */ 0, 2183, 0, 0, 2186, 0, 0, 313, 2445312, 2453504, 0, 0, 2478080, 0, 0, 0, 0, 0, 0, 0, 0, 0, 781, 0, 0,
  /* 21977 */ 784, 0, 0, 788, 0, 310, 310, 310, 0, 0, 310, 310, 147766, 310, 310, 310, 310, 310, 310, 310, 310, 310,
  /* 21999 */ 310, 310, 310, 147836, 310, 310, 310, 310, 310, 310, 310, 147766, 380, 310, 310, 310, 310, 310, 310, 310,
  /* 22019 */ 310, 310, 310, 310, 310, 310, 310, 310, 310, 147766, 310, 310, 310, 310, 310, 310, 147836, 310, 310, 310,
  /* 22039 */ 147836, 69632, 73728, 310, 310, 147766, 310, 310, 310, 310, 310, 310, 310, 147766, 147766, 147766, 147766,
  /* 22056 */ 147766, 310, 147766, 147766, 147766, 147836, 147836, 147836, 147836, 147836, 147836, 147836, 147836,
  /* 22069 */ 147766, 147766, 147836, 147766, 147766, 65536, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 147766,
  /* 22086 */ 310, 147766, 147766, 147766, 310, 147766, 147766, 147766, 147766, 147766, 147766, 147766, 147766, 147766,
  /* 22100 */ 147766, 310, 310, 147766, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 375, 310, 0, 147766, 310,
  /* 22120 */ 310, 147766, 310, 147766, 310, 147766, 310, 147766, 147766, 147766, 147766, 147766, 310, 0, 310, 0, 0, 0,
  /* 22138 */ 378, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 381, 0, 0, 382, 310, 310, 310, 147766, 147766, 310, 310, 310,
  /* 22163 */ 310, 147766, 310, 147766, 147766, 147766, 147766, 147766, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 0, 0,
  /* 22184 */ 0, 2820, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3006, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 0,
  /* 22214 */ 0, 0, 0, 0, 0, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 159744, 0, 0, 159744, 0, 0, 0, 0, 0, 0, 159744,
  /* 22241 */ 159744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2487, 0, 159744, 159744, 0, 159744, 0, 12290, 3, 0, 0,
  /* 22267 */ 2183168, 6, 6, 131072, 0, 0, 0, 0, 0, 237568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1212, 0, 0, 0, 0, 65536, 0,
  /* 22295 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840,
  /* 22314 */ 163840, 167936, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840,
  /* 22327 */ 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 0, 0, 163840, 0, 0, 0, 0, 0, 0, 0, 0, 357,
  /* 22347 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1609, 0, 163840, 167936, 163840, 163840, 163840, 163840, 163840,
  /* 22370 */ 163840, 163840, 163840, 163840, 163840, 0, 0, 0, 0, 0, 0, 3003, 0, 0, 3005, 0, 0, 0, 0, 0, 0, 0, 1632, 0,
  /* 22394 */ 0, 0, 0, 0, 0, 0, 1640, 0, 0, 0, 163840, 0, 25174, 163840, 0, 0, 0, 163840, 163840, 0, 0, 0, 0, 0, 0,
  /* 22419 */ 3028, 3029, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 139264, 139264, 0, 0, 25174, 25174, 163840, 25174,
  /* 22441 */ 25174, 25174, 25174, 25174, 25174, 25174, 25174, 25174, 163840, 25174, 163840, 163840, 25174, 25174, 1,
  /* 22456 */ 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 0, 0, 0, 3043, 0, 0, 3045, 0, 0, 554, 554, 3050, 554, 3141632,
  /* 22480 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 24576, 1006,
  /* 22493 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3149824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 22504 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2179072, 65536, 0, 0, 0, 0, 0, 0,
  /* 22520 */ 0, 0, 0, 0, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 22535 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 0, 0, 172032, 0,
  /* 22550 */ 0, 0, 0, 0, 0, 0, 0, 357, 358, 359, 0, 0, 0, 0, 0, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 22572 */ 172032, 172032, 172032, 172032, 172032, 0, 0, 0, 0, 0, 0, 3212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1621, 0, 0,
  /* 22597 */ 0, 0, 0, 172032, 172032, 172032, 172032, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 0, 0, 0, 3339, 0, 554,
  /* 22621 */ 554, 554, 3341, 554, 554, 554, 3344, 0, 176128, 0, 176128, 176128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176128,
  /* 22644 */ 0, 176128, 0, 0, 0, 0, 0, 0, 65536, 0, 176128, 176128, 0, 176128, 0, 0, 176128, 0, 176128, 0, 176128, 0,
  /* 22666 */ 0, 0, 0, 0, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1228, 0, 0, 0, 0, 0, 176128, 0, 176128, 176128,
  /* 22692 */ 176128, 176128, 0, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128,
  /* 22706 */ 176128, 176128, 176128, 176128, 176128, 0, 0, 0, 0, 0, 0, 176128, 0, 0, 0, 0, 0, 0, 0, 0, 176128, 176128,
  /* 22728 */ 0, 176128, 176128, 176128, 176128, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 0, 0, 0, 3412, 0, 0, 0, 0,
  /* 22752 */ 554, 554, 554, 554, 554, 3536, 554, 554, 554, 554, 554, 554, 554, 554, 0, 0, 2267, 0, 575, 575, 575, 575,
  /* 22774 */ 1, 294, 3, 0, 0, 6, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1178, 0, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0,
  /* 22806 */ 0, 0, 0, 180224, 180224, 180224, 180224, 180224, 180224, 180224, 180224, 180224, 180224, 180224, 180224,
  /* 22821 */ 180224, 180224, 180224, 180224, 180224, 180224, 180224, 180224, 180224, 180224, 0, 0, 180224, 0, 0, 0, 0,
  /* 22838 */ 0, 0, 0, 0, 554, 554, 554, 554, 554, 3342, 554, 554, 180224, 180224, 180224, 180224, 180224, 180224,
  /* 22856 */ 180224, 180224, 180224, 180224, 180224, 180224, 0, 0, 0, 0, 0, 0, 3475, 554, 554, 554, 554, 554, 554, 554,
  /* 22876 */ 554, 554, 1309, 1316, 554, 554, 554, 554, 554, 180224, 180224, 180224, 180224, 1, 0, 3, 78120, 78120, 298,
  /* 22895 */ 6, 6, 0, 650, 0, 0, 0, 0, 1701, 0, 0, 0, 0, 0, 0, 0, 0, 1707, 0, 1709, 0, 599, 599, 599, 599, 599, 78120,
  /* 22922 */ 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 392, 0, 0, 0, 1186, 0, 0, 0, 0,
  /* 22955 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290816, 0, 1711, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2134016,
  /* 22985 */ 575, 575, 26051, 0, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1077, 575, 0, 0, 0, 0,
  /* 23007 */ 2072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2512, 0, 2147, 0, 0, 0, 0, 0, 0, 0, 0, 2156, 0, 0, 0, 0,
  /* 23038 */ 0, 0, 0, 765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2127, 0, 0, 0, 0, 1695, 0, 554, 554, 2204, 554, 554, 554, 554,
  /* 23065 */ 554, 554, 554, 554, 554, 554, 554, 554, 554, 930, 575, 575, 575, 575, 2275, 575, 575, 575, 575, 575, 575,
  /* 23086 */ 575, 575, 575, 575, 575, 2287, 575, 554, 599, 599, 575, 554, 554, 575, 575, 599, 599, 0, 0, 2984, 0, 0, 0,
  /* 23109 */ 308, 309, 0, 0, 312, 313, 0, 0, 0, 660, 0, 0, 0, 0, 746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 407, 0, 0,
  /* 23139 */ 0, 2360, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2372, 599, 599, 599, 575, 0, 0, 0, 3523,
  /* 23161 */ 0, 0, 0, 3526, 0, 0, 0, 0, 0, 378, 433, 512, 516, 512, 512, 521, 512, 512, 512, 521, 554, 554, 554, 554,
  /* 23185 */ 2570, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1318, 554, 554, 554, 554, 0, 0, 0, 2790, 0,
  /* 23207 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3195, 0, 0, 554, 554, 554, 2867, 554, 554, 554, 554, 554, 554, 554,
  /* 23233 */ 554, 554, 554, 554, 554, 928, 554, 575, 575, 575, 575, 575, 2915, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 23254 */ 575, 575, 575, 575, 980, 575, 575, 575, 599, 599, 599, 2963, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 23275 */ 599, 599, 599, 1500, 599, 599, 599, 3023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 395, 3252, 575,
  /* 23301 */ 575, 575, 3255, 575, 575, 575, 575, 575, 575, 575, 575, 575, 3263, 575, 554, 599, 599, 575, 554, 554, 575,
  /* 23322 */ 575, 599, 599, 0, 2983, 0, 0, 0, 0, 1206, 1206, 0, 0, 0, 1210, 1695, 0, 0, 0, 0, 0, 0, 0, 2154, 0, 0, 0,
  /* 23349 */ 0, 2159, 0, 0, 0, 3368, 575, 575, 575, 575, 3369, 3370, 575, 575, 575, 575, 575, 575, 575, 575, 599, 599,
  /* 23371 */ 599, 3282, 599, 599, 599, 599, 599, 3387, 3388, 599, 599, 599, 599, 599, 599, 599, 599, 575, 554, 554,
  /* 23391 */ 575, 575, 599, 599, 0, 0, 0, 3182, 0, 0, 0, 0, 0, 0, 0, 0, 3235840, 0, 0, 0, 2179072, 2179072, 2179072,
  /* 23414 */ 2179072, 554, 3420, 554, 554, 554, 554, 554, 554, 3426, 554, 554, 554, 554, 575, 575, 575, 3359, 575, 575,
  /* 23434 */ 575, 3362, 575, 575, 575, 575, 575, 575, 575, 575, 3435, 575, 575, 575, 575, 575, 575, 3441, 575, 575,
  /* 23454 */ 575, 575, 599, 599, 599, 599, 3509, 599, 599, 599, 599, 599, 599, 599, 1487, 599, 599, 599, 599, 599, 599,
  /* 23475 */ 1502, 599, 599, 599, 599, 599, 599, 3450, 599, 599, 599, 599, 599, 599, 3456, 599, 599, 599, 575, 3521, 0,
  /* 23496 */ 3522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2101, 0, 0, 0, 0, 0, 599, 3460, 554, 575, 599, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23526 */ 3201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3334, 0, 0, 575, 575, 575, 575, 3505, 599, 599, 599, 599, 599,
  /* 23552 */ 599, 599, 599, 599, 599, 599, 575, 554, 599, 575, 554, 575, 599, 599, 599, 599, 0, 0, 554, 554, 575, 575,
  /* 23574 */ 599, 599, 0, 554, 575, 599, 0, 554, 575, 599, 0, 554, 575, 599, 0, 0, 0, 0, 2752, 0, 0, 0, 2756, 0, 0, 0,
  /* 23600 */ 0, 0, 0, 0, 833, 0, 0, 0, 0, 0, 0, 838, 0, 189042, 189042, 0, 189042, 189042, 189042, 189042, 189042,
  /* 23621 */ 189042, 189042, 189042, 0, 0, 189042, 0, 0, 0, 0, 1715, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264,
  /* 23645 */ 139264, 139264, 139264, 0, 0, 189042, 189042, 1, 12290, 3, 78120, 78120, 298, 6, 6, 0, 0, 0, 0, 0, 0,
  /* 23666 */ 57344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1227, 0, 0, 0, 0, 0, 0, 192512, 554, 599, 599, 575, 554, 554, 554,
  /* 23692 */ 554, 554, 575, 575, 575, 575, 575, 575, 3496, 575, 575, 575, 575, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23716 */ 197080, 197080, 197080, 197080, 197080, 0, 197080, 197080, 197080, 197080, 197080, 197080, 197080, 197080,
  /* 23730 */ 197080, 0, 0, 197080, 0, 0, 0, 0, 0, 0, 0, 0, 704, 705, 0, 0, 0, 0, 0, 0, 197080, 0, 197080, 197080,
  /* 23754 */ 197080, 197080, 197080, 197080, 197080, 197080, 197080, 197080, 0, 0, 0, 0, 0, 0, 118784, 0, 245760, 0,
  /* 23772 */ 266240, 0, 0, 0, 0, 0, 0, 0, 2990, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 0, 197080,
  /* 23799 */ 197080, 197080, 197080, 197080, 197080, 197080, 197080, 197080, 197080, 197080, 197080, 197080, 197080,
  /* 23812 */ 197080, 197080, 197080, 197080, 0, 0, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 0, 0, 0, 126976, 0, 0, 0,
  /* 23836 */ 0, 0, 0, 0, 0, 0, 0, 1242, 0, 0, 1245, 0, 0, 0, 0, 311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2527, 0,
  /* 23868 */ 416, 416, 0, 416, 416, 416, 416, 416, 416, 416, 416, 0, 0, 416, 0, 0, 0, 0, 1731, 0, 1733, 0, 0, 0, 0, 0,
  /* 23894 */ 0, 0, 0, 0, 0, 2498, 0, 0, 0, 2502, 0, 0, 757, 554, 599, 599, 575, 554, 554, 554, 554, 554, 575, 575, 575,
  /* 23919 */ 575, 575, 3495, 575, 575, 575, 3499, 575, 0, 1590, 0, 0, 0, 1596, 0, 0, 0, 1602, 0, 0, 0, 0, 0, 0, 0, 766,
  /* 23945 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 383, 0, 2054, 0, 0, 0, 0, 1590, 2056, 0, 0, 0, 0, 1596,
  /* 23973 */ 2058, 0, 0, 0, 0, 0, 274432, 0, 0, 0, 0, 0, 0, 274432, 0, 0, 0, 0, 0, 0, 0, 0, 1602, 2060, 0, 0, 0, 0, 0,
  /* 24002 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2770, 0, 575, 599, 599, 599, 599, 2054, 0, 2056, 0, 2058, 0, 2060, 0, 0, 0, 0,
  /* 24029 */ 0, 0, 208896, 208896, 0, 208896, 208896, 208896, 208896, 208896, 208896, 208896, 208896, 208896, 208896,
  /* 24044 */ 208896, 208896, 209212, 208896, 208896, 208896, 2609, 0, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 24062 */ 575, 575, 575, 575, 1890, 575, 2673, 0, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 24083 */ 599, 2684, 65536, 0, 0, 0, 0, 0, 0, 0, 316, 0, 208896, 0, 0, 0, 0, 0, 0, 0, 2507, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24112 */ 0, 2077, 0, 0, 0, 0, 0, 0, 208896, 209212, 208896, 208896, 209211, 208896, 208896, 209211, 208896, 209211,
  /* 24130 */ 208896, 208896, 0, 0, 0, 0, 0, 0, 294912, 294912, 0, 294912, 294912, 294912, 294912, 294912, 294912,
  /* 24147 */ 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 0, 0, 0, 0, 208896,
  /* 24162 */ 209211, 0, 208896, 1, 12290, 3, 0, 0, 2183816, 6, 6, 0, 0, 0, 0, 0, 0, 2134016, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24189 */ 387, 0, 390, 0, 0, 0, 390, 0, 0, 2179072, 2126829, 2126829, 2126755, 2179072, 2179072, 2179072, 2179072,
  /* 24206 */ 2179072, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755,
  /* 24217 */ 2126755, 2954147, 2126755, 2126755, 2126755, 3023779, 2126755, 0, 2126829, 2126829, 2126829, 2126829,
  /* 24229 */ 2126829, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 750, 0, 0, 0, 0, 0, 0, 0, 0, 779, 0, 0, 0, 0, 785, 0, 0,
  /* 24258 */ 2737059, 2126755, 2745251, 2126755, 2753443, 2794403, 2126755, 2126755, 2126755, 2827171, 2126755,
  /* 24269 */ 2851747, 2126755, 2126755, 2126755, 2888611, 3142563, 2126755, 2126755, 2126755, 2126755, 2126755,
  /* 24280 */ 2126755, 2126755, 2126755, 2126755, 2126755, 0, 0, 1006, 2126829, 2126829, 2126829, 2573293, 2126829,
  /* 24293 */ 2126829, 2126829, 2126829, 2126829, 2659309, 2126829, 2126829, 2126829, 2126829, 2749421, 2773997,
  /* 24304 */ 2126829, 2647021, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2720749, 2126829, 2737133,
  /* 24315 */ 2126829, 2745325, 2126829, 2753517, 2794477, 2179072, 2479011, 2126755, 2126755, 2126755, 2126755,
  /* 24326 */ 2479085, 2126829, 2126829, 2126829, 2126829, 2183168, 0, 0, 0, 0, 0, 0, 2895872, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24347 */ 0, 0, 1122, 0, 0, 0, 0, 0, 2126829, 2638829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829,
  /* 24363 */ 2683885, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2622445, 2126829, 2126829,
  /* 24374 */ 2126829, 2126829, 2663405, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 3150829, 2126829,
  /* 24385 */ 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829,
  /* 24396 */ 2126755, 2179072, 2126829, 2126829, 2126755, 2179072, 2179072, 3137536, 3244032, 2126755, 2126755,
  /* 24407 */ 3138467, 3244963, 2126829, 2126829, 3138541, 2126755, 2126755, 2126755, 2741155, 2126755, 2126755,
  /* 24418 */ 2126755, 2126755, 2126755, 2790307, 2798499, 2126755, 2818979, 2843555, 2126755, 2126755, 0, 0, 2126829,
  /* 24431 */ 2126829, 2126829, 2429933, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829,
  /* 24442 */ 2126755, 0, 0, 2179072, 2126829, 2126829, 2126755, 2478080, 2179072, 2179072, 2179072, 2126755, 2909091,
  /* 24455 */ 2126755, 2937763, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755,
  /* 24466 */ 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2605987, 3064739, 2126755, 3089315,
  /* 24477 */ 2126755, 2126755, 2126755, 2126755, 3126179, 2126755, 2126755, 3158947, 2126755, 2126755, 2126755,
  /* 24488 */ 2126755, 2126755, 1004, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829,
  /* 24500 */ 2126829, 2954221, 2126829, 2126829, 2126829, 3023853, 2126829, 2126829, 2741229, 2126829, 2126829,
  /* 24511 */ 2126829, 2126829, 2126829, 2790381, 2798573, 2126829, 2819053, 2843629, 2126829, 2126829, 2126829,
  /* 24522 */ 2909165, 2126829, 2937837, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829,
  /* 24533 */ 2126829, 2126829, 2126829, 2126829, 3064813, 2126829, 2126829, 2126829, 3085293, 2126829, 2126829,
  /* 24544 */ 2126829, 2126829, 2126829, 2126829, 3204077, 2126755, 2179072, 2126829, 2126755, 2179072, 2438125,
  /* 24555 */ 2126829, 2126755, 2179072, 2179072, 2126755, 2126755, 2126829, 2126829, 0, 0, 0, 0, 0, 0, 0, 2793, 0,
  /* 24572 */ 2795, 0, 0, 0, 2798, 0, 0, 3089389, 2126829, 2126829, 2126829, 2126829, 3126253, 2126829, 2126829,
  /* 24587 */ 3159021, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2823149, 2835437, 2126829,
  /* 24598 */ 2855917, 2864109, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2483181, 2487277,
  /* 24609 */ 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2544621, 2126829, 2126829, 2126829, 2126755,
  /* 24620 */ 2126829, 2126829, 2126829, 2126829, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2494464, 3194880, 2179072, 2179072,
  /* 24638 */ 3215360, 3219456, 2179072, 0, 0, 0, 0, 0, 0, 2409379, 2126755, 2126755, 2442147, 2728867, 2126755,
  /* 24653 */ 2757539, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2913187, 2126755,
  /* 24664 */ 2126755, 2950051, 2126755, 2126755, 2126755, 2126755, 2126829, 2126829, 2126829, 2126829, 2126829,
  /* 24675 */ 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2606061, 2126829, 2126829, 2126829,
  /* 24686 */ 2126829, 2126755, 3167139, 2126755, 2126755, 2126755, 3195811, 2126755, 2126755, 3216291, 3220387,
  /* 24697 */ 2126755, 0, 0, 0, 0, 0, 0, 0, 2547, 0, 0, 554, 554, 554, 554, 554, 554, 3537, 554, 554, 554, 554, 554,
  /* 24720 */ 554, 554, 0, 2409453, 2126829, 2126829, 2442221, 2126829, 2126829, 2126829, 2126829, 2126829, 2474989,
  /* 24733 */ 2126829, 2495469, 2503661, 2126829, 2126829, 2126829, 2827245, 2126829, 2851821, 2126829, 2126829,
  /* 24744 */ 2126829, 2888685, 2126829, 2126829, 2126829, 2126829, 2946029, 2126829, 2126829, 2671597, 2126829,
  /* 24755 */ 2126829, 2126829, 2728941, 2126829, 2757613, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829,
  /* 24766 */ 2126829, 2126829, 2868205, 2872301, 2126829, 2921453, 2941933, 2126829, 2126829, 2970605, 2126829,
  /* 24777 */ 2126829, 3019757, 2126829, 2913261, 2126829, 2126829, 2950125, 2126829, 2126829, 2126829, 2126829,
  /* 24788 */ 2126829, 2126829, 2126829, 2126829, 2126829, 3060717, 2126829, 2126829, 2126829, 2958317, 2126829,
  /* 24799 */ 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 3154925, 2126829, 2126829, 3179501, 3191789,
  /* 24810 */ 3097581, 2126829, 2126829, 3146733, 2126829, 2126829, 3167213, 2126829, 2126829, 2126829, 3195885,
  /* 24821 */ 2126829, 2126829, 3216365, 3220461, 2126829, 2126829, 2446317, 2454509, 2126829, 2126829, 2126829,
  /* 24832 */ 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829,
  /* 24843 */ 2126829, 2126829, 2126755, 0, 0, 3245037, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2838528, 2871296,
  /* 24864 */ 2126755, 2126755, 2126755, 2573219, 2126755, 2126755, 2126755, 2126755, 2126755, 2659235, 2126755,
  /* 24875 */ 2126755, 2126755, 2126755, 2749347, 2773923, 3027875, 2126755, 2126755, 3048355, 2126755, 3093411,
  /* 24886 */ 3109795, 3122083, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 3249059, 0, 0, 2126829,
  /* 24899 */ 2126829, 2126829, 2126829, 2126829, 2466797, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829,
  /* 24910 */ 2126829, 2126829, 3052525, 2560000, 0, 2973696, 0, 2179072, 2678784, 2998272, 2179072, 2126755, 2679715,
  /* 24923 */ 2999203, 3027949, 2126829, 2126829, 3048429, 2126829, 3093485, 3109869, 3122157, 2126829, 2126829,
  /* 24934 */ 2126829, 2126829, 2126829, 2126829, 2126829, 3249133, 2179072, 2179072, 2179072, 3084288, 2179072,
  /* 24945 */ 2179072, 2179072, 2179072, 2179072, 2179072, 3203072, 2126755, 2126755, 2126755, 2126755, 2126755,
  /* 24956 */ 2126755, 2483107, 2487203, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2544547, 2126755,
  /* 24967 */ 2126755, 2126755, 2126755, 3085219, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 3204003,
  /* 24978 */ 2126829, 2126829, 2126829, 2126829, 2126829, 2126755, 0, 2523136, 0, 0, 3035136, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24997 */ 799, 0, 0, 0, 0, 0, 0, 0, 0, 828, 554, 554, 871, 554, 554, 554, 554, 2179072, 2957312, 2179072, 2179072,
  /* 25018 */ 2179072, 2179072, 2179072, 2179072, 2179072, 3153920, 2179072, 2179072, 3178496, 3190784, 3198976,
  /* 25029 */ 2417571, 2421667, 2126755, 2126755, 2462627, 2126755, 2491299, 2126755, 2126755, 2126755, 2540451,
  /* 25040 */ 2126755, 2126755, 2126755, 2126755, 2610083, 2126755, 2126755, 2126755, 2126755, 3232675, 2126755, 0, 0,
  /* 25053 */ 0, 0, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2552813, 2126829, 2126829, 2126829, 2126829,
  /* 25066 */ 2126829, 2126829, 2126829, 2626541, 2126829, 2651117, 2126829, 2634659, 2667427, 2126755, 2126755,
  /* 25077 */ 2716579, 2778019, 2126755, 2126755, 2126755, 2126755, 2958243, 2126755, 2126755, 2126755, 2126755,
  /* 25088 */ 2126755, 2126829, 2126829, 2126829, 2126829, 2126829, 2614253, 2126829, 2126829, 2126829, 2126829,
  /* 25099 */ 2126829, 2126755, 2126755, 3154851, 2126755, 2126755, 3179427, 3191715, 3199907, 2417645, 2421741,
  /* 25110 */ 2126829, 2126829, 2462701, 2126829, 2491373, 2126829, 2126829, 2524141, 2126829, 2126829, 2126829,
  /* 25121 */ 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 3036141, 2126829, 2126829, 2126755, 2469888, 0,
  /* 25133 */ 2555904, 3055616, 0, 0, 0, 2883584, 0, 0, 2179072, 2469888, 2179072, 3199981, 2126755, 2527232, 2528237,
  /* 25148 */ 2528163, 2179072, 2179072, 2126755, 2126755, 2126829, 2126829, 0, 2506752, 0, 0, 0, 0, 0, 1187840, 0, 0,
  /* 25165 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1636, 0, 0, 1639, 0, 2179072, 2179072, 3174400, 2126755, 2450339, 2458531,
  /* 25185 */ 2126755, 2507683, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2626467,
  /* 25196 */ 2126755, 2651043, 2126755, 2126755, 2671523, 2126755, 2126755, 2126755, 2675619, 2700195, 2782115,
  /* 25207 */ 2786211, 2806691, 2880419, 2995107, 2126755, 3031971, 2126755, 3044259, 2126755, 2126755, 2126755,
  /* 25218 */ 3175331, 2126829, 2126829, 2540525, 2126829, 2126829, 2126829, 2126829, 2610157, 2126829, 2634733,
  /* 25229 */ 2667501, 2126829, 2126829, 2716653, 2778093, 2126829, 2126829, 3232749, 2126829, 2126755, 2179072,
  /* 25240 */ 2126829, 2126829, 2126755, 2179072, 2179072, 2179072, 2179072, 2126755, 2126755, 2126755, 2126755,
  /* 25251 */ 2126829, 2126829, 2126829, 2126829, 0, 2450413, 2458605, 2126829, 2507757, 2126829, 2126829, 2126829,
  /* 25263 */ 2126829, 2126829, 2126829, 2126829, 2126829, 2675693, 2700269, 2782189, 2786285, 2806765, 2880493,
  /* 25274 */ 2995181, 2126829, 3032045, 2126829, 3044333, 2126829, 2126829, 2126829, 3175405, 2126755, 2179072,
  /* 25285 */ 3076096, 2126755, 3077027, 2126829, 3077101, 0, 2510848, 2519040, 0, 0, 0, 0, 2899968, 0, 0, 0, 3201, 0,
  /* 25303 */ 0, 0, 0, 2977792, 0, 0, 2846720, 3182592, 2457600, 0, 2805760, 0, 0, 0, 0, 0, 139264, 0, 0, 139264, 0, 0,
  /* 25325 */ 0, 0, 0, 0, 0, 0, 0, 2428928, 0, 0, 2605056, 0, 0, 0, 2179072, 2576384, 2584576, 2179072, 2179072,
  /* 25344 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3162112, 2126755, 2126755, 2519971,
  /* 25355 */ 2126755, 2126755, 2126755, 2577315, 2585507, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755,
  /* 25366 */ 2126755, 2126755, 2126755, 3163043, 2126829, 2520045, 2126829, 2126829, 2126829, 2577389, 2585581,
  /* 25377 */ 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 2126829, 3142637,
  /* 25388 */ 2126829, 2126829, 2126829, 2126829, 2126829, 3163117, 2126755, 2965504, 2966435, 2966509, 0, 0, 0, 0, 0,
  /* 25403 */ 2768896, 2904064, 0, 3201, 0, 0, 3329, 0, 0, 0, 0, 0, 0, 0, 3333, 0, 0, 0, 0, 0, 1716, 1717, 0, 0, 0, 0,
  /* 25429 */ 0, 1723, 1724, 0, 1726, 2613248, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2126755,
  /* 25443 */ 2126755, 2126755, 2126755, 2126755, 2614179, 2126755, 2126755, 2126755, 2126755, 2126755, 3150755,
  /* 25454 */ 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 3060643,
  /* 25465 */ 2126755, 2126755, 3097507, 2126755, 2126755, 3146659, 2126755, 2555904, 2179072, 2629632, 2179072,
  /* 25476 */ 2883584, 2179072, 2179072, 2179072, 3055616, 2126755, 2470819, 2126755, 2556835, 2126755, 2630563,
  /* 25487 */ 2126755, 2126755, 2126755, 2515875, 2126755, 2126755, 2536355, 2126755, 2126755, 2126755, 2565027,
  /* 25498 */ 2569123, 2126755, 2126755, 2618275, 2126755, 2126755, 2126755, 2126755, 2868131, 2872227, 2126755,
  /* 25509 */ 2921379, 2941859, 2126755, 2126755, 2970531, 2126755, 2126755, 3019683, 2126755, 2126755, 2126755,
  /* 25520 */ 2126755, 2945955, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755, 2126755,
  /* 25531 */ 2126755, 2126755, 2823075, 2835363, 2126755, 2855843, 2864035, 2126755, 2126755, 2126755, 2884515,
  /* 25542 */ 2126755, 2126755, 2126755, 3056547, 2126829, 2470893, 2126829, 2556909, 2126829, 2630637, 2126829,
  /* 25553 */ 2884589, 2126829, 2126829, 2126829, 2515949, 2126829, 2126829, 2536429, 2126829, 2126829, 2126829,
  /* 25564 */ 2565101, 2569197, 2126829, 2126829, 2618349, 2126829, 3056621, 2126755, 2547712, 0, 0, 0, 0, 0, 2179072,
  /* 25579 */ 2547712, 2179072, 2179072, 2179072, 2179072, 2179072, 2126755, 2126755, 2126829, 2126829, 2461696, 0, 0,
  /* 25592 */ 0, 0, 0, 0, 0, 0, 0, 2957312, 2548643, 2126755, 2126755, 2126755, 2126755, 2126755, 2126829, 2548717,
  /* 25608 */ 2126829, 2126829, 2126829, 2126829, 2126829, 3117987, 0, 0, 0, 0, 2074, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25630 */ 389, 0, 0, 0, 0, 0, 0, 3051520, 2424832, 2179072, 2179072, 2179072, 2179072, 3051520, 2425763, 2126755,
  /* 25646 */ 2126755, 2126755, 2126755, 3052451, 2425837, 2126755, 2126829, 2679789, 2999277, 2126829, 2732032, 0,
  /* 25658 */ 2580480, 2179072, 2581411, 2126755, 2581485, 2126829, 0, 2179072, 2126755, 2126829, 0, 2179072, 2126755,
  /* 25671 */ 2126829, 3010560, 3010560, 3011491, 3011565, 0, 0, 0, 0, 0, 0, 225280, 225280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25693 */ 225280, 225280, 0, 0, 225280, 225280, 225280, 65536, 0, 0, 0, 0, 0, 225280, 0, 0, 0, 225280, 225280,
  /* 25712 */ 225280, 225280, 225280, 225280, 225280, 225280, 225280, 225280, 225280, 225280, 225280, 225280, 225280,
  /* 25725 */ 225280, 0, 0, 0, 0, 0, 0, 225280, 0, 0, 0, 0, 0, 0, 0, 0, 225280, 225280, 0, 225280, 225280, 225280,
  /* 25747 */ 225280, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 0, 0, 0, 3112960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1151,
  /* 25774 */ 0, 0, 0, 0, 0, 2822144, 0, 0, 0, 0, 2142208, 0, 0, 0, 102400, 0, 0, 0, 53248, 0, 0, 0, 0, 2083, 2084, 0,
  /* 25800 */ 2086, 2087, 0, 0, 0, 0, 0, 0, 0, 356, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 434, 2125824,
  /* 25827 */ 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 25838 */ 2125824, 2125824, 2125824, 308, 0, 309, 0, 312, 0, 313, 0, 0, 0, 2494464, 3194880, 2179072, 2179072,
  /* 25855 */ 3215360, 3219456, 2179072, 932, 0, 0, 0, 932, 0, 2408448, 2125824, 2125824, 2441216, 2125824, 3166208,
  /* 25870 */ 2125824, 2125824, 2125824, 3194880, 2125824, 2125824, 3215360, 3219456, 2125824, 1006, 0, 0, 0, 1006, 0,
  /* 25885 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2465792, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 25896 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3141632, 2125824, 2125824, 2125824, 2125824, 2125824, 932, 0,
  /* 25909 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2465792, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 25920 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2953216, 2125824, 2125824, 2125824, 3022848, 2125824, 229814,
  /* 25932 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 229849, 229849, 229849, 229849, 229849, 229849, 229849, 229849, 229849,
  /* 25951 */ 229849, 229849, 229849, 229849, 229849, 229849, 229849, 0, 0, 0, 0, 229999, 229999, 229849, 229999,
  /* 25966 */ 229999, 229999, 229999, 229999, 229999, 229999, 229999, 229849, 229849, 229999, 229849, 229849, 230017,
  /* 25979 */ 230017, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 0, 0, 314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1196, 0, 0,
  /* 26008 */ 0, 0, 241664, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 1124, 0, 0, 0,
  /* 26031 */ 0, 1285, 1286, 0, 1, 12290, 3, 0, 0, 6, 0, 0, 253952, 0, 0, 0, 253952, 0, 0, 0, 0, 0, 2142208, 0, 0, 0, 0,
  /* 26058 */ 0, 0, 0, 0, 0, 0, 0, 1180, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254426, 254426, 254426,
  /* 26084 */ 254426, 254426, 254426, 254426, 254426, 254426, 254426, 254426, 254426, 254426, 254426, 254426, 254426,
  /* 26097 */ 253952, 253952, 254426, 253952, 253952, 253952, 253952, 253952, 253952, 253952, 254426, 254426, 254426,
  /* 26110 */ 254426, 254426, 254426, 253952, 254426, 254426, 254426, 254426, 253952, 254426, 254426, 254426, 254426,
  /* 26123 */ 254426, 254426, 254426, 254426, 254426, 254426, 0, 0, 0, 0, 0, 318, 0, 0, 0, 0, 0, 317, 0, 317, 318, 0, 0,
  /* 26146 */ 0, 254426, 0, 0, 0, 0, 0, 0, 0, 0, 254426, 254426, 0, 254426, 254426, 254426, 254426, 1, 12290, 3, 0, 0,
  /* 26168 */ 2183168, 6, 6, 0, 0, 0, 0, 0, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 0, 245760, 2125824,
  /* 26189 */ 2125824, 2125824, 2125824, 2125824, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 1124, 1123, 0, 0, 0, 0, 0, 0, 1,
  /* 26213 */ 12290, 3, 0, 0, 6, 0, 0, 0, 262144, 0, 0, 0, 262144, 0, 0, 0, 0, 2095, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26243 */ 2995, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262619, 262619, 262619, 262619, 262619, 262619,
  /* 26264 */ 262619, 262619, 262619, 262619, 262619, 262619, 262619, 262619, 262619, 262619, 0, 0, 0, 0, 0, 0, 262619,
  /* 26281 */ 0, 0, 0, 0, 0, 0, 0, 0, 262619, 262619, 0, 262619, 262619, 262619, 262619, 1, 12290, 0, 0, 0, 2183168, 6,
  /* 26303 */ 6, 0, 0, 278528, 0, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 6, 184320, 0, 0, 0, 0, 0, 0, 0,
  /* 26325 */ 816, 0, 816, 0, 0, 0, 0, 0, 0, 0, 554, 554, 554, 554, 554, 881, 554, 3162112, 2125824, 2965504, 2965504,
  /* 26346 */ 2965504, 0, 0, 0, 0, 0, 2768896, 2904064, 0, 20480, 0, 0, 0, 0, 2110, 2111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26372 */ 0, 2499, 0, 0, 0, 0, 1, 12290, 2113831, 0, 0, 6, 0, 0, 0, 0, 303, 0, 0, 0, 303, 0, 0, 0, 554, 554, 3675,
  /* 26399 */ 3676, 554, 554, 575, 575, 3679, 3680, 575, 575, 599, 599, 1, 12290, 3, 78120, 78120, 298, 6, 6, 0, 0, 0,
  /* 26421 */ 0, 0, 374, 374, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 406, 0, 0, 0, 0, 0, 406, 274432, 274432, 0, 274432,
  /* 26446 */ 274432, 274432, 274432, 274432, 274432, 274432, 274432, 0, 0, 274432, 0, 0, 0, 0, 2123, 0, 0, 0, 0, 0, 0,
  /* 26467 */ 0, 0, 0, 0, 0, 374, 0, 314, 0, 0, 0, 0, 274432, 274432, 1, 12290, 2113831, 0, 0, 2183168, 6, 6, 0, 0, 0,
  /* 26492 */ 0, 0, 338, 339, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2484, 0, 0, 0, 0, 0, 249856, 2125824, 2125824, 2125824,
  /* 26516 */ 2125824, 2125824, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 1129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26545 */ 2465, 282624, 282624, 0, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 0, 0, 282624, 0,
  /* 26561 */ 0, 0, 0, 2135, 0, 0, 0, 0, 0, 2141, 0, 0, 0, 0, 0, 0, 1119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1179648, 0, 0,
  /* 26591 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 767, 0, 0, 0, 0, 0, 0, 282624, 282624, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0,
  /* 26619 */ 0, 0, 0, 370, 371, 372, 373, 0, 0, 374, 0, 298, 0, 0, 1, 12290, 3, 78120, 298, 6, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26647 */ 0, 0, 0, 1262, 0, 0, 554, 554, 0, 599, 599, 599, 599, 599, 78120, 1100, 6, 0, 0, 0, 0, 0, 0, 0, 0, 1157,
  /* 26673 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 374, 374, 1168, 0, 554, 554, 1383, 932, 575, 575, 575, 575, 575, 575,
  /* 26698 */ 575, 575, 575, 575, 575, 575, 1422, 575, 575, 575, 2054, 0, 0, 0, 0, 0, 2056, 0, 0, 0, 0, 0, 2058, 0, 0,
  /* 26723 */ 0, 0, 0, 2204365, 2204365, 2204365, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1121, 0, 0, 0, 0, 0, 0, 0, 0, 2060, 0, 0,
  /* 26750 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2786, 0, 0, 599, 599, 599, 599, 599, 296, 1100, 6, 0, 0, 0, 0, 0, 0,
  /* 26779 */ 0, 0, 1266, 0, 0, 0, 0, 1269, 0, 1216, 65536, 0, 0, 0, 0, 0, 441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1683, 0,
  /* 26808 */ 0, 0, 0, 0, 554, 554, 576, 554, 554, 600, 576, 576, 576, 576, 576, 554, 576, 576, 576, 576, 600, 600, 1,
  /* 26831 */ 12290, 3, 78120, 78120, 298, 6, 6, 0, 0, 0, 0, 0, 374, 374, 374, 0, 0, 0, 0, 0, 723, 0, 0, 600, 600, 554,
  /* 26857 */ 600, 600, 600, 600, 600, 600, 600, 600, 600, 576, 600, 576, 554, 554, 554, 554, 554, 2598, 554, 554, 554,
  /* 26878 */ 554, 554, 554, 554, 2603, 554, 554, 554, 554, 554, 1332, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 26899 */ 1372, 554, 554, 554, 554, 554, 1, 12290, 3, 78121, 298, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1267, 0, 0, 0,
  /* 26926 */ 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290816, 290816, 290816, 290816, 290816, 0, 290816, 290816, 290816,
  /* 26947 */ 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816,
  /* 26960 */ 290816, 290816, 290816, 0, 0, 290816, 0, 0, 0, 0, 0, 0, 0, 0, 1619, 0, 0, 0, 0, 0, 0, 0, 0, 1627, 0, 0, 0,
  /* 26987 */ 0, 0, 0, 554, 290816, 0, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816,
  /* 27003 */ 0, 0, 0, 0, 0, 374, 374, 374, 0, 0, 0, 0, 722, 0, 0, 0, 290816, 290816, 290816, 290816, 1, 12290, 3, 0, 0,
  /* 27028 */ 2183168, 6, 6, 0, 0, 0, 0, 0, 374, 374, 374, 0, 0, 0, 151552, 0, 0, 0, 0, 0, 0, 2534, 0, 0, 0, 0, 0, 0, 0,
  /* 27057 */ 0, 0, 0, 1735, 1736, 0, 0, 0, 1739, 0, 0, 3072000, 3153920, 0, 3006464, 2416640, 0, 3178496, 3201, 0, 0,
  /* 27078 */ 2760704, 0, 0, 0, 0, 0, 2204366, 155648, 2204366, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 2621440, 0, 2695168,
  /* 27100 */ 0, 2789376, 2797568, 2801664, 0, 2842624, 0, 1, 12290, 3, 0, 0, 299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27124 */ 1283, 0, 0, 0, 0, 305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 624, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27156 */ 294912, 0, 0, 0, 0, 0, 0, 0, 294912, 294912, 294912, 0, 294912, 1, 12290, 3, 0, 0, 2183168, 299, 299, 0,
  /* 27178 */ 0, 0, 0, 0, 374, 374, 374, 0, 720, 0, 0, 0, 0, 0, 0, 0, 1648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0,
  /* 27207 */ 379, 379, 0, 0, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 299, 0, 0, 0, 0, 0, 0, 0, 0, 1649,
  /* 27229 */ 0, 0, 0, 0, 0, 0, 0, 0, 1681, 0, 0, 0, 0, 0, 0, 0, 0, 1719, 0, 0, 0, 0, 0, 0, 0, 0, 1734, 0, 0, 0, 0, 0,
  /* 27261 */ 0, 0, 0, 1740, 0, 0, 0, 1760, 1610, 1610, 1762, 3326, 0, 0, 0, 0, 2977792, 0, 0, 2846720, 3182592,
  /* 27282 */ 2457600, 0, 2805760, 0, 0, 0, 0, 0, 2412544, 2433024, 0, 0, 2863104, 0, 0, 0, 0, 0, 2179072, 2125824,
  /* 27302 */ 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824,
  /* 27313 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 1079, 0,
  /* 27325 */ 2125824, 3076096, 0, 2510848, 2519040, 0, 0, 0, 0, 2899968, 0, 0, 0, 3406, 0, 0, 0, 0, 2166, 0, 0, 0, 0,
  /* 27348 */ 0, 0, 0, 0, 0, 0, 0, 374, 308, 0, 0, 0, 3162112, 2125824, 2965504, 2965504, 2965504, 0, 0, 0, 0, 0,
  /* 27370 */ 2768896, 2904064, 0, 3406, 0, 0, 0, 0, 2480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 370, 0, 0, 0, 0, 1, 12290,
  /* 27397 */ 3, 0, 0, 300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1622, 0, 0, 0, 1625, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27429 */ 0, 0, 0, 0, 678, 624, 624, 0, 624, 624, 624, 624, 624, 624, 624, 624, 0, 0, 624, 0, 0, 0, 0, 2518, 0, 0,
  /* 27455 */ 0, 0, 0, 0, 0, 0, 0, 0, 2528, 0, 0, 624, 624, 1, 12290, 3, 0, 0, 2183168, 4285065, 300, 0, 0, 0, 0, 0,
  /* 27481 */ 374, 374, 374, 719, 0, 0, 0, 0, 0, 0, 0, 0, 2169, 0, 0, 0, 0, 0, 0, 0, 0, 2180, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27511 */ 2459, 0, 0, 0, 0, 0, 0, 0, 0, 2139, 0, 0, 0, 0, 0, 2145, 0, 651, 0, 0, 308, 309, 0, 2134016, 312, 313, 0,
  /* 27538 */ 0, 0, 0, 0, 0, 0, 0, 2099, 0, 0, 0, 0, 2104, 2105, 0, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 0,
  /* 27560 */ 0, 1101, 0, 299008, 0, 0, 0, 0, 0, 0, 0, 3014, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 429, 429, 0, 0,
  /* 27588 */ 318, 317, 0, 0, 0, 317, 317, 318, 318, 0, 0, 0, 0, 0, 0, 317, 317, 318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27617 */ 0, 0, 0, 417, 318, 0, 0, 0, 318, 422, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 0, 0, 3200, 0, 0, 0, 0, 0, 0, 0,
  /* 27646 */ 0, 0, 69632, 73728, 176128, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 317, 452, 460, 476, 476, 476, 476,
  /* 27670 */ 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 502, 502, 476, 502, 502, 502, 502, 502, 502,
  /* 27691 */ 502, 527, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 545, 502, 502, 502, 502, 502, 502, 502,
  /* 27712 */ 502, 502, 502, 555, 577, 555, 577, 601, 601, 555, 601, 628, 628, 628, 628, 628, 628, 628, 601, 577, 628,
  /* 27733 */ 577, 555, 555, 577, 555, 555, 601, 577, 577, 577, 577, 577, 555, 577, 577, 577, 577, 601, 601, 1, 12290,
  /* 27754 */ 3, 78120, 78120, 298, 6, 6, 0, 0, 0, 0, 0, 374, 374, 212992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1137, 0, 0, 0, 0,
  /* 27782 */ 0, 0, 0, 665, 666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2799, 0, 712, 0, 0, 0, 0, 374, 374, 374, 0,
  /* 27812 */ 0, 721, 0, 0, 0, 0, 0, 0, 0, 3213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3016, 0, 0, 0, 0, 0, 0, 0, 0, 728, 0, 0, 0,
  /* 27844 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2814, 0, 0, 743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 753, 0, 0, 0, 0, 0, 378, 0,
  /* 27876 */ 0, 0, 386, 388, 0, 0, 0, 0, 0, 0, 0, 2441216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 689, 690, 0, 692, 693, 0, 0, 789,
  /* 27905 */ 0, 0, 0, 0, 0, 0, 798, 0, 0, 0, 0, 0, 805, 0, 0, 0, 0, 2532, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 691, 0, 0,
  /* 27937 */ 0, 0, 0, 753, 0, 0, 809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 813, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27969 */ 2134773, 0, 813, 0, 0, 0, 0, 665, 0, 0, 0, 0, 0, 0, 837, 0, 0, 0, 0, 2544, 0, 0, 0, 0, 0, 554, 554, 554,
  /* 27997 */ 554, 554, 554, 554, 554, 2195, 554, 554, 554, 554, 554, 554, 665, 0, 0, 0, 0, 0, 854, 809, 0, 0, 0, 0, 0,
  /* 28022 */ 858, 859, 809, 554, 554, 897, 901, 903, 554, 909, 554, 912, 554, 554, 926, 554, 554, 575, 575, 599, 599,
  /* 28043 */ 0, 0, 3181, 0, 3183, 0, 0, 0, 3187, 0, 0, 575, 939, 943, 575, 575, 575, 575, 575, 575, 969, 973, 975, 575,
  /* 28067 */ 982, 575, 985, 575, 575, 999, 575, 575, 0, 599, 599, 599, 1013, 1017, 599, 599, 599, 599, 599, 0, 0, 0, 0,
  /* 28090 */ 554, 554, 554, 554, 575, 575, 575, 599, 1043, 1047, 1049, 599, 1056, 599, 1059, 599, 599, 1073, 599, 599,
  /* 28110 */ 985, 0, 0, 0, 0, 2776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 374, 348, 298, 0, 0, 0, 0, 872, 599, 1017, 943,
  /* 28138 */ 868, 1086, 912, 554, 554, 939, 1091, 985, 575, 575, 575, 575, 575, 2319, 575, 575, 575, 575, 575, 2325,
  /* 28158 */ 575, 575, 575, 575, 575, 575, 3267, 575, 575, 575, 575, 575, 575, 575, 575, 575, 1883, 575, 575, 575, 575,
  /* 28179 */ 575, 575, 575, 575, 575, 3100, 575, 575, 575, 575, 575, 575, 0, 1013, 1096, 1059, 599, 599, 78120, 1100,
  /* 28199 */ 6, 0, 0, 0, 1103, 1107, 0, 0, 0, 0, 2791, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 707, 708, 0, 0, 0, 1111, 1115,
  /* 28228 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 315, 208896, 0, 0, 0, 1236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28260 */ 0, 3219, 0, 0, 0, 1642, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 347, 0, 0, 1699, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28292 */ 0, 0, 0, 0, 0, 0, 363, 364, 0, 0, 1741, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2997, 0, 554, 554, 1783,
  /* 28322 */ 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1337, 554, 554, 575, 575, 1862, 575, 575,
  /* 28343 */ 575, 575, 575, 575, 575, 575, 575, 1875, 575, 575, 575, 575, 575, 575, 3664, 599, 599, 599, 599, 599, 599,
  /* 28364 */ 575, 0, 0, 1312, 1569, 1494, 1402, 554, 554, 554, 554, 575, 575, 26051, 1944, 599, 599, 599, 599, 1950,
  /* 28384 */ 599, 599, 599, 599, 599, 1956, 599, 575, 0, 0, 0, 0, 0, 0, 554, 554, 554, 554, 554, 554, 554, 575, 3491,
  /* 28407 */ 575, 3493, 575, 575, 575, 575, 575, 575, 575, 962, 575, 575, 575, 575, 575, 575, 575, 575, 1932, 575, 575,
  /* 28428 */ 575, 575, 575, 575, 575, 599, 599, 2008, 599, 599, 2011, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 28449 */ 1492, 599, 599, 599, 599, 599, 2023, 599, 599, 599, 599, 599, 2028, 599, 599, 599, 599, 599, 599, 599,
  /* 28469 */ 575, 554, 599, 599, 575, 554, 554, 554, 554, 575, 575, 575, 575, 599, 599, 599, 599, 0, 0, 0, 2060, 0, 0,
  /* 28492 */ 0, 0, 0, 0, 0, 0, 0, 2066, 0, 0, 0, 0, 0, 2928640, 2932736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 801, 0, 0, 0, 0,
  /* 28522 */ 0, 0, 0, 0, 2122, 0, 2124, 0, 0, 0, 0, 0, 0, 0, 0, 1695, 0, 0, 0, 554, 3674, 554, 554, 554, 554, 575,
  /* 28548 */ 3678, 575, 575, 575, 575, 599, 3506, 599, 3508, 599, 599, 599, 599, 599, 599, 599, 599, 1069, 599, 599,
  /* 28568 */ 599, 599, 575, 0, 0, 0, 2175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 409, 0, 2167, 554, 554, 554, 554,
  /* 28596 */ 554, 554, 554, 554, 554, 554, 2196, 554, 554, 2199, 554, 554, 554, 554, 554, 2608, 0, 0, 0, 0, 0, 0, 575,
  /* 28619 */ 575, 575, 575, 575, 575, 3437, 575, 575, 575, 575, 575, 575, 575, 575, 599, 599, 3281, 599, 599, 599, 599,
  /* 28640 */ 599, 554, 554, 2258, 554, 554, 554, 554, 554, 0, 0, 0, 0, 575, 575, 575, 575, 2880, 575, 2881, 575, 575,
  /* 28662 */ 575, 575, 575, 575, 575, 2644, 575, 575, 575, 575, 575, 575, 2651, 575, 575, 2290, 575, 575, 575, 575,
  /* 28682 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 1922, 575, 2343, 575, 575, 575, 575, 575, 0, 0, 0, 0,
  /* 28704 */ 599, 599, 599, 599, 599, 599, 599, 2930, 599, 599, 599, 599, 599, 599, 575, 599, 599, 599, 599, 2054, 0,
  /* 28725 */ 2056, 0, 2058, 0, 2060, 0, 0, 2451, 0, 0, 0, 653, 654, 0, 2134016, 657, 658, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28751 */ 2482176, 0, 0, 0, 0, 0, 0, 554, 2555, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2563, 554,
  /* 28773 */ 554, 0, 932, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 978, 575, 575, 575, 554, 554,
  /* 28794 */ 2596, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2605, 2625, 575, 575, 575, 575, 575,
  /* 28814 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 986, 2761, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28840 */ 2771, 0, 0, 2827, 0, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2838, 554, 554, 554, 554, 554,
  /* 28861 */ 3083, 554, 554, 554, 554, 554, 575, 575, 575, 3091, 575, 554, 599, 599, 575, 554, 554, 575, 575, 599, 599,
  /* 28882 */ 2982, 0, 0, 2985, 2986, 554, 2842, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2851, 554, 554, 554,
  /* 28903 */ 554, 554, 554, 2247, 554, 554, 554, 2250, 554, 554, 554, 554, 2255, 2609, 0, 575, 575, 575, 575, 575, 575,
  /* 28924 */ 575, 575, 575, 575, 2885, 575, 575, 2889, 2673, 0, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2933,
  /* 28945 */ 599, 599, 2937, 3078, 554, 3080, 554, 554, 554, 554, 554, 554, 554, 554, 575, 575, 575, 575, 575, 575,
  /* 28965 */ 575, 575, 575, 575, 575, 575, 3367, 3119, 575, 3121, 575, 575, 575, 575, 575, 575, 575, 575, 599, 599,
  /* 28985 */ 599, 599, 599, 599, 599, 3284, 3160, 599, 3162, 599, 599, 599, 599, 599, 599, 599, 599, 575, 554, 599,
  /* 29005 */ 575, 554, 554, 575, 575, 599, 599, 0, 0, 0, 0, 0, 0, 0, 3186, 0, 0, 0, 599, 575, 554, 575, 599, 3461, 0,
  /* 29030 */ 3463, 0, 0, 0, 0, 0, 3201, 3467, 0, 0, 0, 667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 554, 585, 554, 585,
  /* 29058 */ 3469, 0, 0, 0, 0, 0, 554, 3476, 554, 3478, 554, 554, 554, 554, 554, 554, 0, 0, 0, 0, 0, 0, 575, 575, 575,
  /* 29083 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 1438, 575, 0, 0, 554, 554, 554, 554, 3535, 554,
  /* 29104 */ 554, 554, 554, 554, 554, 554, 554, 554, 1310, 554, 554, 554, 554, 554, 554, 599, 599, 599, 599, 3561, 599,
  /* 29125 */ 599, 599, 599, 599, 599, 599, 599, 599, 599, 575, 1225, 0, 554, 599, 599, 575, 554, 554, 554, 554, 0, 0,
  /* 29147 */ 319, 320, 321, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2784, 0, 0, 0, 65536, 0, 0, 0, 430, 0, 0, 0, 0, 0, 461,
  /* 29177 */ 0, 0, 0, 0, 0, 0, 0, 126976, 126976, 126976, 126976, 126976, 0, 126976, 126976, 126976, 550, 461, 550,
  /* 29196 */ 550, 550, 550, 550, 550, 550, 550, 550, 461, 556, 578, 556, 578, 556, 556, 578, 556, 556, 602, 578, 578,
  /* 29217 */ 578, 578, 578, 556, 578, 578, 578, 578, 602, 602, 556, 602, 602, 602, 602, 602, 602, 602, 602, 602, 578,
  /* 29238 */ 602, 578, 631, 636, 636, 602, 642, 1, 12290, 3, 78120, 78120, 298, 6, 6, 0, 0, 0, 0, 0, 400, 0, 0, 0, 0,
  /* 29263 */ 0, 0, 0, 0, 0, 0, 0, 2783, 0, 0, 0, 0, 599, 599, 599, 599, 1052, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 29288 */ 575, 0, 0, 1310, 599, 1492, 1400, 554, 554, 554, 1574, 554, 554, 554, 554, 1830, 554, 554, 554, 554, 554,
  /* 29309 */ 1836, 554, 554, 554, 554, 554, 554, 554, 2234, 554, 554, 554, 554, 554, 2240, 554, 554, 1924, 575, 575,
  /* 29329 */ 575, 575, 575, 1930, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2919, 575, 575, 575, 575, 575, 599,
  /* 29350 */ 599, 2024, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 575, 554, 554, 575, 575, 0, 0, 0, 2479,
  /* 29372 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126976, 0, 0, 554, 554, 554, 2556, 554, 554, 554, 554, 554, 554,
  /* 29398 */ 554, 554, 554, 554, 554, 554, 929, 554, 575, 575, 554, 2606, 554, 554, 554, 554, 0, 2609, 0, 0, 0, 0, 575,
  /* 29421 */ 575, 575, 575, 575, 0, 599, 599, 1012, 599, 599, 599, 599, 1031, 1035, 1041, 575, 2614, 575, 575, 575,
  /* 29441 */ 575, 2618, 575, 575, 575, 575, 575, 575, 575, 575, 575, 1417, 575, 575, 575, 575, 575, 575, 0, 599, 599,
  /* 29462 */ 599, 599, 599, 2678, 599, 599, 599, 599, 2682, 599, 599, 599, 599, 575, 2434, 599, 2436, 2437, 554, 554,
  /* 29482 */ 554, 554, 575, 575, 575, 575, 575, 599, 599, 599, 599, 599, 1100, 0, 0, 0, 1588, 3531, 0, 554, 554, 554,
  /* 29504 */ 554, 554, 554, 554, 554, 3539, 554, 3541, 554, 554, 3543, 65536, 439, 432, 440, 431, 440, 0, 322, 440,
  /* 29524 */ 453, 462, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 498, 503, 503,
  /* 29545 */ 514, 503, 503, 503, 503, 503, 503, 503, 503, 529, 529, 529, 542, 542, 543, 543, 543, 543, 543, 543, 529,
  /* 29566 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 557, 579, 557, 579, 557, 557, 579, 557, 557, 603, 579,
  /* 29587 */ 579, 579, 579, 579, 557, 579, 579, 579, 579, 603, 603, 627, 603, 603, 603, 603, 603, 603, 603, 603, 629,
  /* 29608 */ 630, 603, 630, 627, 630, 630, 629, 629, 1, 12290, 3, 78120, 78120, 298, 6, 6, 0, 0, 0, 0, 0, 401, 0, 0, 0,
  /* 29633 */ 0, 0, 0, 0, 0, 0, 0, 412, 0, 0, 0, 0, 0, 0, 0, 554, 599, 599, 575, 554, 554, 913, 554, 554, 575, 575, 986,
  /* 29660 */ 575, 575, 575, 575, 575, 2333, 2334, 575, 575, 575, 575, 575, 575, 575, 575, 575, 1418, 575, 575, 575,
  /* 29680 */ 575, 575, 575, 0, 599, 599, 1060, 599, 599, 78120, 1100, 6, 0, 0, 0, 0, 0, 0, 0, 0, 2472, 0, 0, 0, 0, 0,
  /* 29706 */ 2476, 0, 0, 0, 1130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3021, 0, 0, 0, 1172, 1130, 0, 0, 0, 0, 0,
  /* 29736 */ 0, 0, 0, 0, 0, 0, 0, 315, 316, 0, 0, 0, 0, 1250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3035, 0, 1262,
  /* 29767 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 679, 1298, 1300, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 29793 */ 1314, 554, 1319, 554, 554, 1323, 554, 554, 1326, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 29813 */ 554, 554, 1338, 554, 554, 554, 554, 1383, 932, 575, 575, 1387, 575, 1390, 575, 575, 575, 575, 575, 575,
  /* 29833 */ 575, 1431, 575, 575, 1435, 575, 575, 575, 575, 575, 575, 1404, 575, 1409, 575, 575, 1413, 575, 575, 1416,
  /* 29853 */ 575, 575, 575, 575, 575, 575, 0, 0, 0, 0, 599, 599, 599, 2357, 599, 599, 1479, 599, 1482, 599, 599, 599,
  /* 29875 */ 599, 599, 599, 599, 599, 1496, 599, 1501, 599, 599, 554, 599, 599, 599, 599, 599, 599, 599, 599, 599, 575,
  /* 29896 */ 599, 575, 554, 575, 599, 0, 0, 0, 0, 0, 0, 0, 0, 3201, 0, 0, 0, 0, 0, 3331, 0, 0, 0, 0, 0, 0, 0, 0, 3336,
  /* 29925 */ 1505, 599, 599, 1508, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1533, 599, 599, 599,
  /* 29945 */ 1611, 1612, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 694, 0, 1657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29977 */ 0, 0, 680, 0, 1712, 0, 1714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1725, 0, 0, 0, 682, 0, 0, 0, 0, 839, 0, 0, 0,
  /* 30007 */ 0, 0, 661, 0, 0, 0, 819, 0, 824, 0, 810, 0, 839, 0, 0, 0, 1730, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 345,
  /* 30037 */ 346, 0, 0, 1959, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1971, 599, 599, 599, 599, 599, 0, 0, 0, 0,
  /* 30060 */ 3688, 554, 554, 554, 3690, 575, 575, 2006, 2007, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 30080 */ 599, 599, 599, 1520, 599, 575, 575, 2317, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 30101 */ 1457, 575, 575, 2402, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1536,
  /* 30121 */ 599, 599, 599, 2418, 2419, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 575, 554, 599, 575,
  /* 30141 */ 3174, 599, 599, 599, 599, 2433, 554, 599, 599, 575, 554, 554, 554, 554, 575, 575, 575, 575, 575, 599, 599,
  /* 30162 */ 599, 599, 599, 1100, 0, 0, 1587, 0, 0, 0, 2453, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3196, 0, 575,
  /* 30190 */ 575, 575, 2656, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 1456, 575, 575, 575, 0, 0, 0,
  /* 30212 */ 2828, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1336, 554, 554, 554, 554, 554, 2855,
  /* 30232 */ 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1353, 554, 554, 2902, 575, 575, 575, 575,
  /* 30253 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 991, 2950, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 30274 */ 599, 599, 599, 599, 599, 599, 599, 1559, 2987, 0, 0, 0, 0, 0, 0, 0, 2991, 0, 0, 0, 0, 0, 0, 0, 0, 2496, 0,
  /* 30301 */ 0, 0, 0, 0, 0, 0, 0, 2521, 0, 0, 0, 0, 0, 0, 0, 0, 2155, 0, 0, 0, 0, 2160, 0, 0, 0, 3208, 0, 0, 0, 0, 0,
  /* 30332 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 710, 0, 575, 575, 575, 3278, 575, 575, 575, 575, 599, 599, 599, 599, 599, 599,
  /* 30357 */ 599, 599, 1070, 599, 599, 599, 599, 575, 0, 0, 0, 0, 554, 3533, 554, 3534, 554, 554, 554, 3538, 554, 554,
  /* 30379 */ 554, 554, 554, 554, 0, 0, 0, 0, 0, 0, 575, 2611, 575, 575, 599, 3559, 599, 3560, 599, 599, 599, 3564, 599,
  /* 30402 */ 599, 599, 599, 599, 599, 599, 575, 554, 599, 599, 575, 2438, 554, 554, 554, 2442, 575, 575, 3691, 599,
  /* 30422 */ 599, 599, 3693, 0, 0, 554, 554, 575, 575, 599, 599, 0, 554, 575, 599, 3706, 3707, 3708, 3709, 0, 554, 575,
  /* 30444 */ 599, 0, 0, 0, 2751, 0, 0, 2754, 2755, 0, 0, 2758, 2759, 0, 0, 0, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30473 */ 0, 0, 0, 711, 0, 0, 333, 333, 383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3019, 0, 0, 0, 65536, 0, 0, 0, 383,
  /* 30503 */ 0, 442, 448, 0, 454, 463, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478,
  /* 30525 */ 504, 504, 515, 504, 504, 504, 504, 504, 504, 504, 504, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530,
  /* 30546 */ 530, 530, 530, 530, 530, 558, 580, 558, 580, 604, 604, 558, 604, 604, 604, 604, 604, 604, 604, 604, 604,
  /* 30567 */ 580, 604, 580, 558, 558, 580, 558, 558, 604, 580, 580, 580, 580, 580, 558, 580, 580, 580, 580, 604, 604,
  /* 30588 */ 1, 12290, 3, 78120, 78120, 298, 6, 6, 0, 0, 0, 0, 0, 660, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3217, 0, 0, 0,
  /* 30617 */ 0, 0, 0, 820, 0, 0, 0, 0, 0, 0, 554, 554, 554, 554, 554, 554, 554, 554, 554, 3540, 554, 554, 554, 554,
  /* 30641 */ 554, 891, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 575, 575, 575, 575, 575, 575, 575,
  /* 30662 */ 575, 0, 1144, 0, 1146, 1147, 0, 0, 0, 1149, 1150, 0, 0, 0, 0, 0, 0, 0, 1135, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30690 */ 1720, 0, 0, 0, 0, 0, 0, 0, 1135, 0, 1275, 0, 0, 0, 0, 0, 1150, 0, 0, 0, 0, 0, 1258, 0, 0, 0, 1290, 1149,
  /* 30718 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 554, 554, 554, 554, 554, 882, 554, 1299, 554, 554, 554, 554, 554, 554, 554,
  /* 30742 */ 554, 554, 554, 554, 554, 554, 554, 1324, 554, 554, 1383, 932, 575, 575, 1388, 575, 575, 575, 575, 575,
  /* 30762 */ 575, 575, 575, 575, 1452, 575, 575, 575, 575, 575, 575, 1439, 575, 575, 575, 1443, 575, 575, 575, 575,
  /* 30782 */ 575, 575, 575, 575, 575, 575, 575, 0, 0, 1006, 599, 599, 1480, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 30803 */ 599, 599, 599, 599, 599, 599, 599, 2415, 1506, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 30824 */ 599, 1519, 599, 575, 0, 0, 0, 0, 0, 0, 554, 554, 554, 3654, 3655, 554, 554, 575, 554, 599, 599, 575, 554,
  /* 30847 */ 2743, 554, 554, 575, 2745, 575, 575, 599, 2747, 599, 575, 0, 0, 0, 0, 0, 0, 3652, 554, 554, 554, 554, 554,
  /* 30870 */ 554, 3658, 0, 0, 0, 1755, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 554, 554, 554, 873, 554, 554, 554, 554, 554,
  /* 30896 */ 1828, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1776, 554, 554, 0, 0, 2060, 0, 0,
  /* 30918 */ 0, 0, 0, 2063, 0, 0, 0, 0, 0, 0, 0, 0, 2536, 0, 0, 0, 0, 0, 0, 0, 0, 2548, 0, 554, 554, 554, 554, 554,
  /* 30946 */ 554, 554, 554, 554, 554, 554, 2197, 554, 554, 554, 2256, 554, 554, 554, 554, 554, 554, 554, 0, 0, 0, 0,
  /* 30968 */ 575, 575, 575, 575, 575, 575, 1900, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2646, 575, 575, 575, 575,
  /* 30989 */ 2650, 575, 599, 599, 2362, 599, 599, 599, 599, 2366, 599, 599, 599, 599, 599, 599, 599, 599, 1530, 599,
  /* 31009 */ 599, 599, 599, 599, 599, 599, 0, 0, 2516, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3325, 0, 0, 2529, 0,
  /* 31037 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 757, 416, 2613, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 31063 */ 575, 575, 575, 575, 575, 1424, 2653, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 31084 */ 575, 1460, 0, 599, 599, 599, 599, 2677, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2016, 599, 599,
  /* 31105 */ 599, 599, 599, 0, 0, 2817, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 135168, 554, 2865, 554, 554,
  /* 31131 */ 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1355, 554, 575, 575, 575, 575, 2893, 575, 575,
  /* 31152 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 0, 0, 2352, 0, 0, 575, 2913, 575, 575, 575, 575, 575, 575,
  /* 31174 */ 575, 575, 575, 575, 575, 575, 575, 575, 2313, 575, 599, 599, 599, 599, 2941, 599, 599, 599, 599, 599, 599,
  /* 31195 */ 599, 599, 599, 599, 599, 575, 3171, 3172, 3173, 554, 599, 2961, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 31215 */ 599, 599, 599, 599, 599, 599, 2021, 2022, 3197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 758, 575,
  /* 31241 */ 575, 575, 575, 3279, 575, 575, 575, 599, 599, 599, 599, 599, 599, 599, 599, 1997, 599, 599, 599, 599,
  /* 31261 */ 2003, 599, 599, 0, 3470, 0, 0, 0, 0, 554, 554, 554, 554, 554, 554, 3481, 554, 554, 554, 554, 554, 554,
  /* 31283 */ 2263, 2609, 0, 0, 0, 0, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2884, 575, 2887, 575, 575, 0, 334,
  /* 31305 */ 335, 336, 337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3048, 554, 554, 554, 0, 0, 334, 0, 0, 381, 381, 411, 0,
  /* 31333 */ 337, 0, 0, 0, 0, 0, 0, 0, 1148, 0, 0, 0, 1152, 1153, 0, 0, 0, 65536, 0, 0, 0, 0, 336, 0, 0, 0, 334, 464,
  /* 31361 */ 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 492, 479, 479, 479, 479, 479, 479, 505, 505, 479, 505,
  /* 31382 */ 505, 520, 522, 505, 505, 520, 505, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 546, 531, 531,
  /* 31403 */ 531, 531, 531, 531, 531, 531, 531, 531, 559, 581, 559, 581, 605, 605, 559, 605, 605, 605, 605, 605, 605,
  /* 31424 */ 605, 605, 605, 581, 605, 581, 559, 559, 581, 559, 559, 605, 581, 581, 581, 581, 581, 559, 581, 581, 581,
  /* 31445 */ 581, 605, 605, 1, 12290, 3, 78120, 78120, 298, 6, 6, 0, 0, 0, 0, 0, 664, 0, 0, 760, 554, 554, 554, 554,
  /* 31469 */ 554, 554, 554, 554, 2869, 554, 554, 2872, 554, 554, 2875, 554, 0, 0, 744, 0, 0, 0, 748, 0, 0, 0, 0, 0, 0,
  /* 31494 */ 0, 0, 758, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2525, 0, 0, 0, 0, 0, 773, 0, 0, 0, 0, 0, 0, 780, 0, 0, 0,
  /* 31526 */ 786, 787, 0, 0, 0, 696, 768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 374, 0, 0, 0, 0, 0, 823, 0, 826, 0, 0, 0, 0,
  /* 31557 */ 823, 826, 0, 0, 0, 826, 826, 823, 826, 0, 724, 0, 0, 843, 0, 0, 0, 0, 0, 843, 843, 846, 0, 0, 0, 0, 2829,
  /* 31584 */ 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 3251, 554, 554, 554, 575, 0, 806, 0, 0, 0, 0, 0,
  /* 31607 */ 855, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1731, 0, 0, 0, 0, 0, 554, 888, 554, 898, 554, 904, 554, 554, 911, 914,
  /* 31633 */ 919, 554, 927, 554, 554, 575, 575, 599, 599, 0, 3180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1282, 0, 0, 0, 0, 0,
  /* 31660 */ 575, 940, 575, 946, 575, 575, 959, 575, 575, 970, 575, 976, 575, 575, 984, 987, 599, 1044, 599, 1050, 599,
  /* 31681 */ 599, 1058, 1061, 1066, 599, 1074, 599, 599, 987, 0, 0, 0, 0, 2989, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31707 */ 2500, 0, 0, 0, 0, 0, 554, 599, 599, 575, 869, 554, 1087, 919, 554, 940, 575, 1092, 992, 575, 1000, 575,
  /* 31729 */ 575, 0, 599, 599, 599, 1014, 599, 1020, 599, 599, 1033, 599, 0, 1014, 599, 1097, 1066, 599, 78120, 1100,
  /* 31749 */ 6, 0, 0, 0, 0, 0, 0, 0, 0, 3322, 0, 0, 0, 0, 0, 0, 0, 0, 3340, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 31776 */ 1835, 554, 554, 554, 554, 554, 1840, 554, 0, 0, 1159, 1160, 0, 0, 0, 0, 1164, 0, 0, 0, 374, 374, 0, 0, 0,
  /* 31801 */ 0, 3026, 0, 0, 0, 0, 0, 0, 0, 0, 3034, 0, 0, 0, 0, 3191, 3192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 316, 316,
  /* 31830 */ 316, 0, 0, 0, 0, 0, 1187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 0, 0, 0, 1204, 758, 0, 0,
  /* 31860 */ 0, 1156, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 135168, 0, 0, 135168, 0, 0, 554, 1325, 554, 554, 554, 554,
  /* 31884 */ 554, 554, 554, 554, 554, 554, 554, 554, 554, 1340, 554, 554, 1383, 932, 575, 575, 575, 575, 575, 575, 575,
  /* 31905 */ 575, 575, 1395, 575, 575, 575, 575, 575, 2642, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2647,
  /* 31925 */ 575, 575, 575, 575, 575, 575, 1461, 575, 575, 575, 575, 575, 575, 1471, 575, 575, 26051, 1383, 1006, 599,
  /* 31945 */ 599, 575, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3625, 554, 554, 554, 554, 554, 907, 554, 554, 554, 554, 925, 554,
  /* 31970 */ 554, 554, 575, 575, 575, 575, 575, 2658, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2665, 599, 599,
  /* 31990 */ 1507, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 575, 0, 0, 1522, 599, 599, 599,
  /* 32011 */ 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2429, 1537, 599, 599, 599, 599, 599, 599, 599,
  /* 32032 */ 599, 599, 599, 1553, 599, 599, 599, 599, 599, 599, 1966, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 32052 */ 2032, 599, 599, 599, 599, 575, 1777, 599, 599, 1563, 599, 599, 575, 0, 0, 554, 599, 599, 575, 554, 554,
  /* 32073 */ 554, 554, 554, 554, 1333, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1789, 554, 554, 554, 554, 1793,
  /* 32093 */ 554, 0, 0, 1643, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 0, 0, 0, 1659, 0, 0, 0, 0, 0, 1665, 0,
  /* 32123 */ 0, 1668, 0, 1670, 0, 0, 0, 0, 3199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 343, 0, 0, 343, 343, 0, 0, 0, 1676,
  /* 32152 */ 1677, 0, 0, 0, 0, 0, 0, 0, 0, 1686, 1687, 0, 0, 0, 699, 0, 0, 0, 0, 0, 0, 0, 0, 0, 709, 0, 0, 0, 308, 0,
  /* 32182 */ 309, 0, 0, 0, 309, 0, 312, 0, 0, 0, 312, 1698, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 818, 1727,
  /* 32211 */ 1728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1737, 0, 0, 0, 0, 3222, 0, 3224, 554, 554, 554, 554, 554, 554, 554,
  /* 32238 */ 554, 554, 2587, 554, 554, 554, 554, 554, 554, 1740, 0, 0, 0, 0, 0, 1744, 0, 0, 0, 1748, 1749, 0, 0, 0, 0,
  /* 32263 */ 0, 731, 0, 0, 0, 735, 0, 737, 0, 0, 0, 0, 0, 775, 0, 0, 0, 0, 0, 775, 775, 0, 0, 849, 554, 1764, 554,
  /* 32290 */ 1765, 554, 1767, 554, 554, 554, 1771, 554, 554, 554, 554, 554, 554, 0, 0, 2267, 0, 0, 0, 575, 575, 575,
  /* 32312 */ 575, 554, 554, 554, 1784, 554, 554, 554, 554, 1788, 554, 554, 554, 554, 1792, 554, 1794, 554, 554, 1812,
  /* 32332 */ 1813, 554, 554, 1816, 1817, 554, 554, 554, 554, 554, 554, 554, 1825, 554, 554, 554, 1829, 554, 554, 554,
  /* 32352 */ 554, 554, 554, 554, 1837, 554, 554, 554, 554, 554, 554, 1347, 554, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 32373 */ 1772, 554, 554, 554, 554, 1778, 554, 575, 575, 575, 1863, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 32393 */ 1876, 575, 575, 575, 575, 575, 2894, 575, 575, 2897, 575, 575, 575, 575, 575, 575, 575, 2279, 575, 575,
  /* 32413 */ 2282, 575, 575, 575, 575, 575, 575, 575, 1880, 575, 575, 575, 575, 1884, 575, 1886, 575, 575, 575, 575,
  /* 32433 */ 575, 575, 0, 0, 0, 0, 599, 2355, 599, 599, 599, 599, 575, 575, 1894, 1895, 1897, 575, 575, 575, 575, 575,
  /* 32455 */ 575, 575, 575, 1905, 1906, 1907, 575, 575, 1910, 1911, 575, 575, 575, 575, 575, 575, 575, 1919, 575, 575,
  /* 32475 */ 575, 1923, 575, 1942, 26051, 0, 1947, 599, 1949, 599, 599, 1951, 599, 1953, 599, 599, 599, 1957, 599, 599,
  /* 32495 */ 599, 1978, 599, 1980, 599, 599, 599, 599, 599, 599, 599, 599, 1988, 1989, 1991, 599, 599, 599, 599, 599,
  /* 32515 */ 599, 599, 599, 1999, 2000, 2001, 599, 599, 2004, 2005, 599, 599, 599, 2025, 599, 599, 599, 599, 599, 599,
  /* 32535 */ 599, 599, 599, 2036, 575, 554, 599, 599, 575, 554, 554, 575, 575, 599, 599, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32560 */ 0, 0, 0, 0, 0, 369, 2039, 599, 575, 1817, 554, 2044, 554, 1911, 575, 2048, 575, 2005, 599, 2052, 599, 0,
  /* 32582 */ 0, 2750, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2760, 0, 0, 0, 0, 3410, 0, 0, 0, 0, 0, 0, 554, 554, 554, 3417, 554, 0,
  /* 32611 */ 0, 2060, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2067, 0, 0, 0, 0, 3576, 0, 3578, 0, 0, 0, 0, 554, 554, 554, 554,
  /* 32639 */ 554, 554, 554, 2194, 554, 554, 554, 554, 2198, 554, 554, 2070, 2071, 0, 0, 0, 2075, 0, 0, 0, 0, 0, 0, 0,
  /* 32663 */ 0, 0, 0, 0, 1705, 1706, 0, 1708, 0, 0, 0, 2094, 0, 0, 0, 0, 2098, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1747, 0, 0,
  /* 32692 */ 0, 0, 0, 0, 0, 2164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2071, 0, 0, 0, 719, 0, 0, 0, 0, 0, 554, 554, 554,
  /* 32723 */ 554, 554, 554, 554, 2835, 554, 554, 554, 554, 2174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2185, 0, 0, 0,
  /* 32750 */ 720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1653, 1654, 1655, 0, 554, 2202, 554, 554, 554, 554, 554, 554,
  /* 32775 */ 2210, 554, 2212, 554, 554, 554, 554, 554, 554, 554, 2248, 2249, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 32795 */ 1818, 1819, 554, 554, 554, 554, 554, 554, 554, 2244, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 32815 */ 554, 554, 554, 554, 1358, 554, 554, 2257, 554, 554, 2260, 2261, 554, 554, 0, 0, 0, 0, 575, 575, 575, 575,
  /* 32837 */ 575, 575, 1914, 575, 575, 1917, 575, 575, 575, 575, 575, 575, 0, 0, 0, 0, 599, 599, 599, 599, 2358, 599,
  /* 32859 */ 575, 575, 2345, 2346, 575, 575, 0, 0, 0, 0, 599, 599, 599, 599, 599, 599, 599, 599, 2681, 599, 599, 599,
  /* 32881 */ 599, 599, 599, 599, 599, 2378, 599, 2380, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 575,
  /* 32901 */ 3395, 554, 3396, 575, 2430, 2431, 599, 599, 575, 2202, 599, 2370, 2285, 554, 2439, 554, 554, 575, 2443,
  /* 32920 */ 575, 554, 599, 599, 575, 554, 2977, 575, 2979, 599, 2981, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 0, 0, 0,
  /* 32945 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 253952, 575, 599, 2447, 599, 599, 2054, 0, 2056, 0, 2058, 0, 2060, 0, 0, 0, 0,
  /* 32971 */ 0, 776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1138, 0, 0, 0, 0, 2489, 0, 2491, 2492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33002 */ 0, 0, 0, 374, 374, 0, 0, 0, 0, 2530, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2541, 2491, 0, 0, 0, 0, 0, 2546,
  /* 33032 */ 0, 0, 0, 554, 554, 554, 554, 554, 554, 575, 575, 575, 575, 575, 575, 599, 2554, 554, 554, 554, 554, 554,
  /* 33054 */ 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1779, 2566, 554, 2568, 554, 554, 554, 554, 554, 554,
  /* 33074 */ 554, 554, 554, 554, 554, 554, 554, 2214, 554, 554, 575, 575, 575, 2616, 575, 575, 575, 575, 575, 575, 575,
  /* 33095 */ 575, 575, 575, 575, 575, 1903, 575, 575, 575, 575, 575, 575, 2628, 575, 2630, 575, 575, 575, 575, 575,
  /* 33115 */ 575, 575, 575, 575, 575, 1474, 26051, 1383, 1006, 599, 599, 575, 575, 2655, 575, 575, 575, 575, 575, 575,
  /* 33135 */ 575, 2662, 575, 575, 575, 575, 575, 0, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1036, 575, 575, 2667,
  /* 33156 */ 575, 575, 575, 575, 575, 575, 575, 575, 0, 2673, 0, 0, 0, 0, 312, 0, 0, 0, 312, 123303, 73728, 0, 0, 0, 0,
  /* 33181 */ 0, 0, 0, 2076, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 172032, 0, 0, 0, 0, 599, 599, 599, 2714, 599, 599,
  /* 33207 */ 599, 2719, 599, 599, 599, 599, 599, 599, 599, 2726, 2788, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33233 */ 1142, 554, 554, 554, 2844, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1352, 554, 554,
  /* 33253 */ 554, 554, 554, 554, 554, 2857, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2863, 575, 2891, 575,
  /* 33273 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 1921, 575, 575, 575, 575, 2904, 575, 575,
  /* 33294 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2911, 599, 2939, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 33315 */ 599, 599, 599, 599, 599, 599, 2374, 599, 599, 599, 2952, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 33336 */ 599, 599, 2959, 0, 3000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3007, 3008, 0, 3009, 0, 0, 0, 729, 0, 0, 0, 733, 0, 0,
  /* 33364 */ 736, 0, 738, 0, 740, 0, 0, 0, 745, 0, 0, 0, 0, 0, 0, 0, 0, 755, 0, 0, 0, 0, 842, 0, 836, 0, 681, 0, 0, 0,
  /* 33394 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1695, 0, 3011, 0, 0, 0, 0, 3013, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2065,
  /* 33425 */ 0, 0, 0, 0, 0, 3038, 3039, 0, 3041, 0, 0, 3044, 0, 0, 0, 3047, 554, 554, 554, 554, 554, 554, 1368, 554,
  /* 33449 */ 554, 554, 554, 554, 554, 554, 554, 554, 1369, 554, 554, 554, 554, 554, 554, 1379, 554, 554, 3054, 554,
  /* 33469 */ 554, 554, 554, 554, 3058, 554, 554, 554, 554, 554, 554, 554, 554, 2235, 554, 554, 554, 554, 554, 554, 554,
  /* 33490 */ 554, 2263, 0, 0, 0, 575, 575, 575, 575, 3064, 554, 554, 554, 554, 554, 3070, 554, 554, 554, 554, 554, 554,
  /* 33512 */ 554, 554, 554, 1349, 554, 554, 554, 554, 554, 554, 554, 3079, 3081, 554, 554, 554, 3084, 554, 3086, 3087,
  /* 33532 */ 554, 575, 575, 575, 575, 575, 575, 3550, 575, 575, 575, 575, 575, 575, 575, 575, 2296, 575, 2298, 575,
  /* 33552 */ 575, 575, 575, 575, 575, 3094, 575, 575, 575, 575, 575, 3098, 575, 575, 575, 575, 575, 575, 575, 3104,
  /* 33572 */ 575, 3120, 3122, 575, 575, 575, 3125, 575, 3127, 3128, 575, 599, 599, 599, 599, 599, 0, 0, 0, 3687, 554,
  /* 33593 */ 554, 554, 3689, 575, 575, 575, 599, 3135, 599, 599, 599, 599, 599, 3139, 599, 599, 599, 599, 599, 599,
  /* 33613 */ 599, 3145, 599, 3161, 3163, 599, 599, 599, 3166, 599, 3168, 3169, 599, 575, 554, 599, 575, 554, 554, 575,
  /* 33633 */ 575, 599, 599, 0, 0, 0, 0, 3318, 3175, 575, 3177, 599, 3179, 0, 0, 0, 0, 0, 0, 3185, 0, 0, 3188, 0, 0, 0,
  /* 33659 */ 774, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1623, 0, 0, 0, 0, 0, 0, 3209, 3210, 3211, 0, 0, 3214, 0, 0, 0, 0,
  /* 33689 */ 0, 0, 0, 0, 233472, 0, 0, 0, 0, 0, 0, 0, 0, 679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 756, 0, 0, 554,
  /* 33720 */ 554, 3232, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2253, 554, 554, 3242, 554,
  /* 33740 */ 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 575, 3431, 575, 575, 575, 3254, 575, 575,
  /* 33761 */ 575, 575, 575, 575, 575, 3259, 575, 575, 575, 575, 575, 0, 599, 599, 599, 599, 599, 599, 1024, 599, 599,
  /* 33782 */ 1038, 599, 599, 599, 3287, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1972, 599, 599,
  /* 33802 */ 599, 599, 599, 3298, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1518, 599, 599, 599,
  /* 33823 */ 3308, 554, 599, 575, 554, 554, 575, 575, 599, 599, 0, 0, 0, 0, 0, 3184, 0, 0, 0, 0, 0, 3201, 3327, 0, 0,
  /* 33848 */ 3330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110592, 0, 0, 0, 3356, 554, 554, 575, 575, 575, 575, 575, 575,
  /* 33874 */ 575, 575, 575, 575, 575, 575, 575, 1938, 575, 575, 554, 554, 554, 554, 3422, 554, 554, 554, 554, 554, 554,
  /* 33895 */ 554, 554, 575, 575, 575, 575, 3598, 575, 575, 575, 554, 554, 554, 554, 3489, 575, 575, 575, 575, 575, 575,
  /* 33916 */ 575, 575, 575, 575, 575, 0, 2673, 0, 0, 0, 575, 575, 575, 3504, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 33938 */ 599, 599, 599, 599, 1986, 599, 599, 599, 599, 599, 3519, 575, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3528, 0, 0, 0, 0,
  /* 33964 */ 2138112, 1205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1167, 374, 374, 0, 0, 3572, 3573, 0, 0, 0, 0, 0, 0, 3579,
  /* 33991 */ 0, 0, 3582, 3583, 3584, 554, 554, 554, 554, 554, 1346, 554, 554, 1348, 554, 554, 1351, 554, 554, 554, 554,
  /* 34012 */ 554, 554, 1305, 554, 554, 554, 554, 554, 554, 1320, 554, 554, 554, 3587, 554, 3589, 554, 554, 554, 554,
  /* 34032 */ 3594, 3595, 3596, 575, 575, 575, 3599, 575, 554, 599, 599, 575, 2742, 554, 554, 554, 2744, 575, 575, 575,
  /* 34052 */ 2746, 599, 599, 599, 599, 599, 3151, 599, 599, 3154, 599, 599, 599, 599, 599, 599, 599, 1062, 599, 599,
  /* 34072 */ 599, 599, 599, 988, 0, 0, 3601, 575, 575, 575, 575, 3606, 3607, 3608, 599, 599, 599, 3611, 599, 3613, 599,
  /* 34093 */ 599, 575, 0, 3619, 0, 0, 0, 0, 0, 0, 0, 0, 554, 554, 3626, 599, 599, 3618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34121 */ 554, 554, 554, 2551, 554, 554, 575, 3659, 575, 575, 575, 3663, 599, 599, 3665, 599, 599, 599, 3669, 575,
  /* 34141 */ 0, 0, 0, 0, 2809856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2103, 0, 0, 0, 65536, 378, 433, 433, 339, 433, 0,
  /* 34169 */ 0, 433, 0, 433, 0, 0, 0, 0, 0, 0, 0, 2613248, 0, 0, 0, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 34189 */ 2179072, 2179072, 2179072, 2179072, 2482176, 2486272, 2179072, 2179072, 2179072, 2179072, 512, 433, 433,
  /* 34202 */ 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 560, 582, 560, 582, 606, 606, 560, 606,
  /* 34223 */ 606, 606, 606, 606, 606, 606, 606, 606, 582, 606, 582, 560, 560, 582, 560, 560, 606, 582, 582, 582, 582,
  /* 34244 */ 582, 560, 582, 582, 582, 582, 606, 606, 1, 12290, 3, 78120, 78120, 298, 6, 6, 0, 0, 0, 0, 0, 853, 0, 0, 0,
  /* 34269 */ 0, 0, 0, 828, 0, 0, 0, 802, 0, 0, 0, 0, 0, 0, 0, 0, 554, 863, 554, 554, 554, 554, 554, 554, 554, 2262, 0,
  /* 34296 */ 0, 0, 0, 2269, 575, 575, 575, 554, 892, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 575,
  /* 34318 */ 575, 575, 575, 3092, 933, 575, 575, 575, 575, 575, 575, 963, 575, 575, 575, 575, 575, 575, 575, 575, 2310,
  /* 34339 */ 575, 575, 575, 575, 575, 575, 575, 0, 0, 554, 1007, 599, 575, 554, 554, 554, 554, 554, 575, 575, 575, 575,
  /* 34361 */ 575, 575, 575, 575, 575, 575, 575, 3366, 575, 0, 0, 0, 1251, 0, 1131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34387 */ 2081, 0, 0, 0, 0, 1272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1156, 554, 554, 1383, 932, 575, 575,
  /* 34415 */ 575, 575, 575, 575, 575, 1393, 575, 575, 575, 575, 575, 575, 2320, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 34436 */ 575, 2907, 575, 575, 575, 575, 575, 575, 575, 1405, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 34457 */ 575, 575, 575, 2300, 575, 575, 554, 1827, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 34478 */ 554, 1777, 554, 0, 0, 2165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225280, 0, 554, 2229, 554, 554, 554,
  /* 34505 */ 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2254, 554, 554, 2595, 554, 554, 554, 554, 554, 554,
  /* 34526 */ 554, 554, 554, 554, 554, 554, 554, 554, 2592, 554, 554, 554, 554, 3233, 554, 554, 554, 554, 554, 554, 554,
  /* 34547 */ 554, 554, 554, 554, 554, 1375, 554, 554, 554, 599, 599, 599, 599, 3288, 599, 599, 599, 599, 599, 599, 599,
  /* 34568 */ 599, 599, 599, 599, 1075, 599, 575, 0, 0, 575, 3692, 599, 599, 599, 0, 0, 554, 554, 575, 575, 599, 599, 0,
  /* 34591 */ 554, 575, 3546, 575, 3547, 575, 575, 575, 3551, 575, 575, 575, 575, 575, 575, 575, 1447, 575, 575, 575,
  /* 34611 */ 575, 575, 575, 575, 575, 1448, 575, 575, 575, 575, 575, 575, 575, 575, 1450, 575, 575, 575, 575, 575, 575,
  /* 34632 */ 575, 575, 1868, 575, 575, 575, 575, 575, 575, 575, 575, 3439, 575, 575, 575, 575, 575, 575, 599, 65536, 0,
  /* 34653 */ 434, 434, 0, 434, 443, 0, 434, 0, 434, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480,
  /* 34675 */ 480, 480, 480, 506, 506, 480, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506,
  /* 34696 */ 506, 561, 583, 561, 583, 607, 607, 561, 607, 607, 607, 607, 607, 607, 607, 607, 607, 583, 607, 583, 561,
  /* 34717 */ 561, 583, 561, 561, 607, 583, 583, 583, 583, 583, 561, 583, 583, 583, 583, 607, 607, 1, 12290, 3, 78120,
  /* 34738 */ 78120, 298, 6, 6, 0, 0, 0, 0, 0, 1118, 0, 0, 1120, 0, 0, 0, 0, 0, 0, 0, 385, 0, 0, 0, 0, 377, 0, 394, 0,
  /* 34767 */ 0, 599, 599, 599, 599, 599, 78120, 1100, 6, 0, 0, 0, 1104, 1108, 0, 0, 0, 0, 3039232, 3231744, 0, 2711552,
  /* 34789 */ 0, 0, 3239936, 0, 0, 0, 0, 0, 0, 0, 1718, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1682, 0, 0, 0, 0, 0, 0, 1112, 1116,
  /* 34818 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 775, 0, 0, 1753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 554,
  /* 34850 */ 554, 554, 3051, 575, 575, 26051, 1945, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 34870 */ 599, 599, 2736, 0, 2093, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 802, 0, 0, 2132, 0, 0, 0, 0, 0, 0, 0,
  /* 34900 */ 0, 0, 0, 0, 0, 0, 0, 816, 0, 575, 2446, 599, 599, 599, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 308, 0, 0, 0, 0,
  /* 34930 */ 554, 554, 554, 554, 2868, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2226, 554, 554, 554, 554,
  /* 34951 */ 575, 575, 575, 575, 2916, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 599, 599, 599, 599, 3133,
  /* 34972 */ 599, 599, 599, 599, 2964, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1076, 599, 575, 0, 0, 0,
  /* 34994 */ 0, 0, 3002, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 0, 0, 0, 0, 0, 3012, 0, 0, 0, 0, 0, 3015, 0, 3017, 0,
  /* 35025 */ 0, 3020, 0, 0, 0, 0, 3141632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 783, 0, 0, 0, 0, 0, 0, 0, 3025, 0, 0, 0, 0,
  /* 35056 */ 0, 0, 0, 0, 0, 0, 0, 0, 416, 0, 0, 0, 554, 3065, 554, 554, 554, 554, 554, 554, 554, 554, 554, 3074, 554,
  /* 35081 */ 554, 554, 554, 554, 554, 1383, 0, 575, 575, 575, 575, 575, 575, 575, 575, 599, 3280, 599, 599, 599, 3283,
  /* 35102 */ 599, 599, 554, 554, 554, 554, 3082, 554, 554, 3085, 554, 554, 554, 3088, 575, 575, 575, 575, 575, 575,
  /* 35122 */ 2348, 0, 0, 0, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2932, 599, 2935, 599, 599, 3105, 575, 575,
  /* 35143 */ 575, 575, 575, 575, 575, 575, 575, 575, 3115, 575, 575, 575, 575, 575, 575, 2349, 0, 0, 0, 599, 599, 599,
  /* 35165 */ 599, 599, 599, 599, 3381, 599, 599, 599, 599, 599, 599, 599, 599, 3292, 599, 599, 599, 599, 599, 599, 599,
  /* 35186 */ 575, 575, 575, 575, 3123, 575, 575, 3126, 575, 575, 575, 3129, 599, 599, 599, 599, 599, 599, 1996, 599,
  /* 35206 */ 599, 599, 599, 599, 599, 599, 599, 599, 2384, 599, 599, 599, 599, 2388, 599, 3146, 599, 599, 599, 599,
  /* 35226 */ 599, 599, 599, 599, 599, 599, 3156, 599, 599, 599, 599, 599, 599, 2012, 599, 599, 599, 599, 599, 599,
  /* 35246 */ 2020, 599, 599, 599, 599, 599, 599, 3164, 599, 599, 3167, 599, 599, 599, 575, 554, 599, 575, 554, 554,
  /* 35266 */ 575, 575, 599, 599, 0, 0, 0, 3317, 0, 0, 3189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 817, 0, 554, 554,
  /* 35295 */ 3243, 554, 3245, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 575, 554, 554, 599, 575, 575, 575, 575,
  /* 35316 */ 575, 554, 575, 575, 575, 575, 575, 599, 599, 599, 599, 599, 1100, 0, 0, 0, 0, 575, 3253, 575, 575, 575,
  /* 35338 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2636, 575, 575, 575, 575, 3265, 575, 575, 575, 575,
  /* 35359 */ 575, 575, 575, 575, 3271, 575, 3273, 575, 575, 575, 575, 575, 3097, 575, 575, 575, 575, 575, 575, 575,
  /* 35379 */ 575, 575, 575, 1419, 1421, 575, 575, 575, 575, 599, 599, 599, 599, 3299, 599, 3301, 599, 599, 599, 599,
  /* 35399 */ 599, 599, 599, 599, 599, 1970, 599, 599, 599, 599, 1974, 599, 0, 3337, 0, 0, 0, 0, 0, 0, 554, 554, 554,
  /* 35422 */ 554, 554, 554, 554, 554, 554, 2837, 554, 2840, 554, 554, 3347, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 35442 */ 3353, 554, 554, 554, 554, 554, 554, 1383, 0, 575, 1854, 575, 575, 575, 575, 575, 575, 1414, 575, 575, 575,
  /* 35463 */ 575, 575, 575, 575, 575, 575, 1473, 575, 26051, 1383, 1006, 1477, 599, 599, 599, 599, 3389, 599, 599, 599,
  /* 35483 */ 599, 599, 599, 599, 575, 554, 554, 575, 575, 1454, 575, 575, 599, 599, 1546, 599, 599, 1100, 0, 0, 0, 0,
  /* 35505 */ 0, 1190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2796, 0, 0, 0, 0, 599, 3683, 3684, 599, 599, 0, 0, 0, 0, 554,
  /* 35533 */ 554, 554, 554, 575, 575, 575, 575, 575, 599, 599, 599, 599, 599, 1100, 0, 1584, 0, 0, 0, 713, 0, 0, 0,
  /* 35556 */ 374, 374, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2460, 0, 0, 0, 0, 0, 0, 575, 575, 944, 575, 575, 575, 575, 575,
  /* 35583 */ 575, 575, 575, 575, 575, 575, 575, 575, 2664, 575, 575, 0, 0, 873, 599, 1018, 944, 554, 554, 554, 554,
  /* 35604 */ 928, 575, 575, 575, 575, 1001, 575, 0, 599, 599, 599, 599, 1018, 599, 599, 599, 599, 599, 0, 3686, 0, 0,
  /* 35626 */ 554, 554, 554, 554, 575, 575, 575, 0, 599, 599, 599, 599, 1075, 78120, 1100, 6, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35650 */ 241664, 0, 0, 0, 0, 0, 0, 0, 0, 856, 554, 554, 554, 554, 876, 554, 884, 1248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35677 */ 0, 0, 0, 0, 0, 0, 1200, 1360, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 35700 */ 1809, 599, 599, 599, 1544, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2002, 599, 599,
  /* 35720 */ 599, 554, 554, 554, 554, 1847, 554, 1383, 0, 575, 575, 575, 575, 575, 575, 575, 575, 2645, 575, 575, 575,
  /* 35741 */ 575, 575, 575, 575, 1941, 575, 26051, 0, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2018,
  /* 35762 */ 599, 599, 599, 599, 599, 2728, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2387, 599,
  /* 35783 */ 599, 0, 0, 2789, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2637824, 0, 0, 3198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35814 */ 0, 0, 0, 0, 0, 1124, 0, 599, 575, 554, 599, 575, 3309, 554, 3311, 575, 3313, 599, 0, 0, 0, 0, 0, 2753, 0,
  /* 35839 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1183744, 374, 0, 0, 0, 0, 554, 3357, 554, 575, 575, 575, 575, 575, 575, 575,
  /* 35864 */ 575, 575, 575, 575, 575, 575, 2901, 575, 575, 340, 0, 0, 0, 0, 0, 340, 0, 0, 69632, 73728, 0, 428, 428, 0,
  /* 35888 */ 0, 0, 0, 3141632, 0, 0, 0, 0, 0, 0, 0, 0, 2204366, 0, 0, 0, 0, 1756, 0, 0, 1757, 0, 0, 1758, 0, 0, 0, 0,
  /* 35916 */ 554, 554, 554, 2832, 554, 554, 554, 554, 554, 554, 2839, 554, 65536, 428, 0, 0, 0, 0, 444, 0, 0, 0, 341,
  /* 35939 */ 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 499, 507, 507, 499, 507,
  /* 35960 */ 507, 507, 507, 507, 507, 507, 507, 532, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 547, 540, 540,
  /* 35981 */ 540, 540, 540, 540, 540, 540, 540, 540, 562, 584, 562, 584, 608, 608, 562, 608, 608, 608, 608, 608, 608,
  /* 36002 */ 608, 608, 608, 584, 608, 584, 562, 562, 584, 562, 562, 608, 584, 584, 584, 584, 584, 562, 584, 584, 584,
  /* 36023 */ 584, 608, 608, 1, 12290, 3, 78120, 78120, 298, 6, 6, 0, 0, 0, 0, 0, 1133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36051 */ 176128, 0, 0, 0, 0, 0, 0, 714, 715, 0, 374, 374, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2483, 0, 0, 0, 0, 0, 0,
  /* 36080 */ 0, 727, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1141, 0, 0, 815, 0, 0, 0, 0, 0, 0, 856, 811, 0, 0, 856,
  /* 36111 */ 0, 0, 0, 0, 313, 0, 0, 0, 313, 69632, 143787, 0, 0, 0, 0, 0, 0, 0, 2126, 0, 0, 0, 0, 0, 2130, 0, 0, 575,
  /* 36139 */ 575, 575, 947, 575, 955, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 1887, 575, 575, 575, 575, 575,
  /* 36160 */ 575, 575, 575, 1002, 575, 0, 599, 599, 599, 599, 599, 1021, 599, 1029, 599, 599, 575, 2042, 554, 554, 554,
  /* 36181 */ 2046, 575, 575, 575, 2050, 599, 599, 599, 0, 0, 0, 0, 0, 3401, 0, 0, 0, 0, 0, 3201, 0, 0, 0, 0, 554, 599,
  /* 36207 */ 599, 575, 554, 554, 554, 1088, 929, 575, 575, 575, 1093, 1002, 0, 599, 599, 599, 1098, 1076, 78120, 1100,
  /* 36227 */ 6, 0, 0, 0, 0, 0, 0, 0, 0, 274432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36260 */ 0, 0, 1155, 0, 0, 0, 0, 1263, 0, 0, 0, 0, 0, 0, 0, 0, 1268, 0, 0, 0, 0, 325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36292 */ 0, 0, 2797, 0, 0, 0, 554, 554, 1327, 554, 554, 554, 554, 554, 554, 554, 1335, 554, 554, 554, 554, 554,
  /* 36314 */ 554, 554, 2572, 554, 554, 554, 2575, 554, 554, 2577, 554, 554, 554, 1363, 554, 554, 1367, 554, 554, 554,
  /* 36334 */ 554, 554, 1373, 554, 554, 554, 1380, 554, 554, 1383, 932, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 36354 */ 575, 575, 1398, 575, 1425, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2910,
  /* 36374 */ 575, 575, 599, 599, 599, 1509, 599, 599, 599, 599, 599, 599, 599, 1517, 599, 599, 599, 599, 599, 599,
  /* 36394 */ 2365, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2015, 599, 599, 599, 599, 599, 599, 599, 599, 1564,
  /* 36414 */ 599, 599, 575, 0, 0, 554, 599, 599, 575, 554, 554, 554, 554, 554, 554, 1383, 1850, 575, 575, 575, 575,
  /* 36435 */ 1856, 575, 575, 575, 0, 1658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1669, 0, 0, 0, 0, 369, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36465 */ 0, 0, 0, 675, 676, 0, 0, 0, 0, 0, 1690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 358, 0, 0, 554, 1781, 554,
  /* 36495 */ 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 3063, 554, 554, 1810, 554, 554, 554,
  /* 36515 */ 1815, 554, 554, 554, 554, 554, 554, 554, 554, 1824, 554, 554, 554, 554, 554, 3246, 554, 3248, 554, 554,
  /* 36535 */ 554, 554, 554, 554, 554, 575, 554, 2739, 599, 575, 554, 554, 554, 554, 575, 575, 575, 575, 599, 599, 599,
  /* 36556 */ 599, 599, 599, 3511, 599, 599, 599, 599, 599, 1843, 554, 554, 554, 554, 554, 1383, 0, 575, 575, 575, 575,
  /* 36577 */ 575, 575, 575, 575, 2917, 575, 575, 2920, 575, 575, 2923, 575, 575, 1909, 575, 575, 575, 575, 575, 575,
  /* 36597 */ 575, 575, 1918, 575, 575, 575, 575, 575, 0, 599, 599, 599, 599, 599, 599, 1027, 599, 599, 599, 575, 1926,
  /* 36618 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 1935, 1937, 575, 575, 575, 575, 575, 599, 599, 599, 599,
  /* 36638 */ 3610, 599, 599, 599, 599, 599, 599, 599, 2029, 2031, 599, 599, 599, 599, 599, 1926, 554, 2106, 0, 0, 0, 0,
  /* 36660 */ 0, 2112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2509, 0, 0, 0, 0, 0, 0, 2120, 0, 0, 0, 0, 0, 0, 0, 0, 2128, 0, 0,
  /* 36691 */ 0, 0, 0, 0, 0, 2875392, 2891776, 0, 0, 2908160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3104768, 3125248, 3129344,
  /* 36714 */ 0, 0, 554, 554, 554, 554, 2191, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1790, 554, 554, 554,
  /* 36735 */ 554, 554, 554, 2203, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 3240, 554, 554,
  /* 36756 */ 554, 554, 2245, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1791, 554, 554, 554, 554, 554,
  /* 36777 */ 554, 2259, 554, 554, 554, 554, 0, 0, 0, 0, 575, 575, 575, 575, 575, 575, 2643, 575, 575, 575, 575, 575,
  /* 36799 */ 575, 575, 575, 575, 3372, 575, 575, 575, 575, 575, 599, 575, 2274, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 36820 */ 575, 575, 575, 2286, 575, 575, 575, 575, 575, 3110, 575, 575, 3113, 575, 575, 575, 575, 575, 575, 575,
  /* 36840 */ 1931, 575, 575, 575, 575, 575, 575, 575, 575, 2280, 575, 575, 575, 575, 575, 575, 575, 575, 2330, 575,
  /* 36860 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2922, 575, 575, 575, 2344, 575, 575, 575,
  /* 36881 */ 575, 0, 0, 0, 0, 599, 599, 599, 599, 599, 2359, 0, 0, 0, 2467, 2468, 0, 0, 2471, 0, 2473, 0, 0, 0, 0, 0,
  /* 36907 */ 0, 0, 1163, 0, 1165, 0, 0, 374, 374, 0, 0, 0, 0, 2478, 0, 0, 2481, 0, 0, 0, 0, 0, 0, 2485, 0, 0, 0, 0,
  /* 36935 */ 369, 0, 0, 0, 0, 0, 0, 374, 0, 298, 0, 0, 2504, 0, 0, 0, 2506, 0, 0, 0, 0, 0, 0, 0, 2510, 2511, 0, 0, 0,
  /* 36964 */ 0, 3141632, 0, 0, 0, 0, 0, 0, 0, 374, 0, 0, 0, 0, 0, 249856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1243, 0, 0,
  /* 36994 */ 0, 0, 2514, 0, 0, 2517, 0, 0, 0, 0, 0, 0, 0, 2524, 0, 0, 0, 0, 0, 1161, 1162, 0, 0, 0, 0, 0, 374, 374, 0,
  /* 37023 */ 0, 2594, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2601, 554, 554, 554, 2604, 554, 554, 554, 554, 554,
  /* 37044 */ 3350, 554, 554, 554, 3351, 3352, 554, 554, 554, 554, 554, 554, 554, 1787, 554, 554, 554, 554, 554, 554,
  /* 37064 */ 554, 554, 0, 0, 0, 0, 575, 575, 575, 2272, 575, 575, 575, 2668, 575, 575, 575, 575, 575, 575, 575, 0, 0,
  /* 37087 */ 0, 0, 0, 0, 357, 357, 359, 357, 357, 357, 357, 357, 357, 526, 0, 599, 2675, 599, 599, 599, 599, 599, 599,
  /* 37110 */ 599, 599, 599, 599, 599, 599, 599, 2399, 599, 599, 599, 599, 599, 599, 2702, 599, 599, 599, 599, 599, 599,
  /* 37131 */ 599, 2708, 599, 599, 599, 599, 599, 599, 2954, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1516, 599,
  /* 37151 */ 599, 599, 599, 599, 599, 599, 599, 599, 2715, 599, 599, 599, 599, 599, 599, 2722, 599, 599, 599, 599, 599,
  /* 37172 */ 599, 599, 3391, 599, 599, 599, 575, 554, 554, 575, 575, 599, 599, 599, 599, 2729, 599, 599, 599, 2732,
  /* 37192 */ 599, 599, 599, 599, 599, 599, 599, 1065, 599, 599, 599, 599, 599, 991, 0, 0, 575, 2738, 599, 2740, 2741,
  /* 37213 */ 554, 554, 554, 554, 575, 575, 575, 575, 599, 599, 599, 599, 599, 3510, 599, 599, 599, 3514, 599, 599, 0,
  /* 37234 */ 0, 0, 2804, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 554, 3049, 554, 554, 2816, 0, 0, 0, 2818, 0, 0, 0, 0, 0,
  /* 37263 */ 0, 0, 0, 0, 0, 0, 309, 0, 0, 0, 0, 554, 554, 554, 2856, 554, 554, 554, 554, 554, 554, 554, 554, 2861, 554,
  /* 37288 */ 554, 554, 554, 554, 554, 2846, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1312, 554, 554, 554, 554,
  /* 37308 */ 1322, 554, 2864, 554, 2866, 554, 554, 554, 554, 554, 554, 2870, 554, 554, 554, 554, 554, 554, 0, 2609, 0,
  /* 37329 */ 0, 0, 0, 575, 575, 575, 575, 575, 575, 575, 2882, 575, 575, 575, 575, 575, 575, 0, 0, 0, 0, 599, 599, 599,
  /* 37353 */ 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 575, 554, 0, 0, 575, 575, 2878, 575, 575,
  /* 37375 */ 575, 575, 575, 2883, 575, 575, 575, 575, 575, 0, 599, 599, 599, 599, 599, 599, 1028, 599, 599, 599, 575,
  /* 37396 */ 2903, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2909, 575, 575, 575, 575, 575, 599, 599, 3640,
  /* 37416 */ 599, 3641, 599, 599, 599, 599, 599, 599, 599, 3153, 599, 3155, 599, 599, 599, 599, 599, 599, 599, 2030,
  /* 37436 */ 599, 599, 599, 599, 599, 599, 2037, 554, 2912, 575, 2914, 575, 575, 575, 575, 575, 575, 2918, 575, 575,
  /* 37456 */ 575, 575, 575, 575, 0, 0, 0, 2353, 599, 599, 599, 599, 599, 599, 599, 2382, 599, 599, 599, 599, 599, 599,
  /* 37478 */ 599, 599, 1969, 599, 599, 599, 599, 599, 599, 599, 0, 0, 599, 599, 2926, 599, 599, 599, 599, 599, 2931,
  /* 37499 */ 599, 599, 599, 599, 599, 599, 1486, 599, 599, 599, 1495, 599, 599, 599, 599, 599, 599, 1514, 599, 599,
  /* 37519 */ 599, 599, 599, 599, 599, 599, 599, 1490, 599, 599, 599, 599, 599, 599, 599, 2951, 599, 599, 599, 599, 599,
  /* 37540 */ 599, 599, 599, 599, 599, 2957, 599, 599, 599, 599, 599, 599, 3152, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 37561 */ 599, 3393, 599, 575, 554, 554, 575, 575, 2960, 599, 2962, 599, 599, 599, 599, 599, 599, 2966, 599, 599,
  /* 37581 */ 599, 599, 599, 599, 599, 2408, 599, 599, 599, 599, 2413, 599, 599, 599, 3037, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37605 */ 0, 0, 554, 554, 554, 554, 3586, 3052, 554, 554, 554, 554, 3056, 554, 554, 554, 554, 554, 554, 554, 3062,
  /* 37626 */ 554, 554, 554, 554, 554, 1799, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 3238, 554, 554, 554, 554,
  /* 37647 */ 554, 575, 575, 575, 575, 3096, 575, 575, 575, 575, 575, 575, 575, 3102, 575, 575, 575, 575, 575, 958, 575,
  /* 37668 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 2672, 0, 0, 0, 0, 0, 599, 599, 599, 599, 3137, 599, 599, 599,
  /* 37691 */ 599, 599, 599, 599, 3143, 599, 599, 599, 599, 599, 599, 3563, 599, 599, 599, 599, 599, 599, 599, 599, 575,
  /* 37712 */ 554, 2435, 599, 575, 554, 554, 554, 554, 575, 575, 575, 3207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37739 */ 1214, 599, 599, 599, 599, 599, 3390, 599, 599, 599, 599, 599, 575, 554, 554, 575, 575, 1577, 575, 575,
  /* 37759 */ 599, 599, 1581, 599, 599, 1100, 0, 0, 0, 0, 0, 1678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3203, 0, 0, 0, 0, 0,
  /* 37788 */ 0, 0, 3472, 3473, 0, 554, 554, 554, 554, 554, 554, 554, 554, 3483, 554, 554, 554, 554, 554, 3423, 554,
  /* 37809 */ 3425, 554, 554, 554, 554, 554, 575, 575, 575, 1578, 575, 599, 599, 599, 1582, 599, 1100, 0, 0, 1586, 0,
  /* 37830 */ 3485, 3486, 554, 3488, 554, 575, 575, 575, 575, 575, 575, 575, 575, 3498, 575, 3500, 3501, 575, 3503, 575,
  /* 37850 */ 599, 599, 599, 599, 599, 599, 599, 599, 3513, 599, 3515, 3516, 599, 3518, 599, 3520, 0, 0, 0, 0, 0, 0, 0,
  /* 37873 */ 0, 0, 0, 0, 0, 572, 595, 572, 595, 554, 554, 554, 3628, 554, 3629, 554, 554, 554, 575, 575, 575, 575, 575,
  /* 37896 */ 575, 3635, 575, 3636, 575, 575, 575, 599, 599, 599, 599, 599, 599, 3642, 599, 3643, 599, 599, 599, 599,
  /* 37916 */ 599, 1965, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 3454, 599, 599, 599, 599, 599, 575, 599, 599,
  /* 37937 */ 599, 599, 0, 0, 554, 554, 575, 575, 599, 599, 3698, 3699, 3700, 3701, 0, 554, 575, 599, 0, 554, 575, 599,
  /* 37959 */ 0, 554, 575, 599, 0, 0, 0, 0, 379, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 396, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0,
  /* 37990 */ 0, 0, 0, 455, 0, 0, 0, 0, 0, 0, 0, 1176, 0, 0, 0, 0, 0, 1182, 0, 1184, 343, 0, 343, 343, 0, 0, 0, 0, 0, 0,
  /* 38020 */ 0, 0, 0, 0, 0, 0, 574, 597, 574, 597, 554, 554, 585, 554, 554, 609, 585, 585, 585, 585, 585, 554, 585,
  /* 38043 */ 585, 585, 585, 609, 609, 1, 12290, 3, 78120, 78120, 298, 6, 6, 0, 0, 0, 0, 0, 1166, 0, 0, 1281, 0, 0, 0,
  /* 38068 */ 0, 0, 0, 0, 0, 1183744, 426, 426, 0, 0, 0, 0, 0, 609, 609, 554, 609, 609, 609, 609, 609, 609, 609, 609,
  /* 38092 */ 609, 585, 609, 585, 554, 554, 554, 554, 554, 3490, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 38113 */ 3260, 575, 575, 575, 575, 575, 1440, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 38134 */ 3103, 575, 575, 599, 599, 599, 2363, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2035,
  /* 38154 */ 599, 575, 554, 0, 0, 412, 0, 0, 0, 0, 390, 0, 69632, 73728, 0, 0, 0, 0, 435, 65536, 0, 435, 435, 0, 435,
  /* 38179 */ 0, 449, 435, 0, 435, 482, 482, 482, 489, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 489, 482,
  /* 38201 */ 482, 482, 482, 496, 482, 508, 508, 482, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508,
  /* 38222 */ 508, 508, 508, 551, 563, 586, 563, 586, 610, 610, 563, 610, 610, 610, 610, 610, 610, 610, 610, 610, 586,
  /* 38243 */ 610, 586, 563, 563, 586, 563, 563, 610, 586, 586, 586, 586, 586, 563, 586, 586, 586, 586, 610, 610, 1,
  /* 38264 */ 12290, 3, 78120, 78120, 298, 6, 6, 0, 0, 0, 0, 0, 1174, 0, 0, 0, 0, 1179, 0, 0, 0, 0, 0, 0, 0, 3413, 0, 0,
  /* 38292 */ 0, 3415, 554, 554, 554, 554, 759, 0, 0, 0, 0, 759, 0, 765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2781, 0, 0, 0, 0, 0,
  /* 38321 */ 0, 759, 678, 0, 0, 746, 0, 0, 0, 0, 554, 864, 554, 554, 554, 878, 554, 554, 554, 554, 554, 3591, 554, 554,
  /* 38345 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 3553, 575, 575, 575, 575, 575, 934, 575, 575, 575, 949, 575,
  /* 38366 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 988, 0, 0, 554, 1008, 599, 575, 554, 554, 915, 554, 554, 575,
  /* 38388 */ 575, 988, 575, 575, 575, 575, 575, 3124, 575, 575, 575, 575, 575, 599, 599, 599, 3132, 599, 0, 599, 599,
  /* 38409 */ 1062, 599, 599, 296, 1100, 6, 0, 0, 0, 1104, 1108, 0, 0, 0, 0, 3141632, 0, 0, 0, 0, 0, 0, 0, 374, 374, 0,
  /* 38435 */ 0, 0, 0, 1264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1264, 1294, 1295, 0, 1264, 0, 554, 554, 1112, 1116, 0, 0, 0,
  /* 38462 */ 0, 0, 0, 0, 0, 0, 1123, 1124, 0, 0, 0, 0, 421, 0, 0, 0, 421, 69632, 73728, 0, 378, 378, 0, 433, 0, 1123,
  /* 38488 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 554, 1297, 554, 554, 1383, 932, 575, 1386, 575, 575, 575, 575, 575,
  /* 38513 */ 575, 575, 575, 575, 575, 2324, 575, 575, 575, 575, 575, 1399, 1406, 575, 575, 575, 575, 575, 575, 575,
  /* 38533 */ 575, 575, 1420, 575, 575, 575, 575, 575, 575, 2659, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2619,
  /* 38553 */ 575, 575, 575, 575, 575, 575, 575, 575, 1441, 575, 575, 575, 575, 575, 575, 575, 1454, 575, 575, 575, 575,
  /* 38574 */ 575, 0, 599, 599, 1007, 599, 599, 599, 599, 599, 599, 1037, 599, 599, 599, 599, 1546, 599, 599, 599, 599,
  /* 38595 */ 599, 599, 599, 599, 599, 599, 599, 1532, 599, 599, 599, 599, 1560, 599, 599, 599, 599, 575, 0, 0, 1309,
  /* 38616 */ 599, 1491, 1399, 554, 554, 1362, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1376, 554, 554, 0,
  /* 38637 */ 0, 1613, 1614, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 754, 0, 0, 0, 554, 1782, 554, 554, 554, 554, 554, 554,
  /* 38664 */ 554, 554, 554, 554, 554, 554, 554, 554, 2852, 2853, 554, 554, 1796, 554, 554, 554, 554, 554, 554, 554,
  /* 38684 */ 554, 554, 554, 554, 554, 554, 554, 2862, 554, 554, 554, 554, 554, 1846, 554, 554, 1383, 1851, 575, 575,
  /* 38704 */ 575, 575, 575, 575, 575, 575, 3099, 575, 575, 575, 575, 575, 575, 575, 599, 1960, 1961, 599, 599, 599,
  /* 38724 */ 599, 1968, 599, 599, 599, 599, 599, 599, 599, 599, 2409, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 38745 */ 2009, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2398, 599, 599, 599, 0, 0, 2121, 0, 0,
  /* 38767 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 663, 769, 770, 554, 554, 2230, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 38792 */ 554, 554, 554, 2241, 554, 554, 554, 554, 1303, 554, 554, 554, 554, 554, 1315, 554, 554, 554, 554, 554,
  /* 38812 */ 554, 554, 2558, 554, 554, 2561, 2562, 554, 554, 554, 554, 575, 575, 575, 2331, 575, 575, 575, 575, 575,
  /* 38832 */ 2336, 575, 575, 575, 575, 575, 575, 0, 0, 2352, 0, 599, 599, 599, 599, 599, 599, 599, 2691, 599, 599, 599,
  /* 38854 */ 599, 599, 599, 599, 599, 2720, 599, 599, 599, 599, 599, 599, 599, 599, 2416, 599, 599, 599, 599, 599,
  /* 38874 */ 2421, 599, 599, 599, 599, 599, 599, 599, 599, 2692, 599, 2694, 599, 599, 599, 599, 599, 575, 575, 2627,
  /* 38894 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 3117, 575, 575, 0, 2802, 0, 0, 0, 0, 0,
  /* 38917 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1183, 0, 554, 554, 2843, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 38942 */ 554, 554, 2874, 554, 554, 2890, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 38963 */ 1940, 2938, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2698, 0, 0, 3001,
  /* 38984 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 677, 678, 0, 0, 3024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39016 */ 1199, 0, 554, 554, 3066, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 3061, 554, 554,
  /* 39037 */ 575, 3106, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 3375, 575, 599, 599,
  /* 39057 */ 3147, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2400, 2401, 575, 3277, 575,
  /* 39077 */ 575, 575, 575, 575, 575, 599, 599, 599, 599, 599, 599, 599, 599, 2965, 599, 599, 2968, 599, 599, 2971,
  /* 39097 */ 599, 554, 554, 3588, 554, 3590, 554, 554, 554, 575, 575, 575, 575, 575, 575, 575, 3600, 575, 3602, 575,
  /* 39117 */ 575, 575, 599, 599, 599, 599, 599, 599, 599, 3612, 599, 3614, 599, 575, 0, 0, 0, 0, 0, 3651, 554, 554,
  /* 39139 */ 3653, 554, 554, 554, 3657, 575, 554, 599, 599, 575, 2976, 554, 2978, 575, 2980, 599, 0, 0, 0, 0, 0, 0, 0,
  /* 39162 */ 0, 0, 2757, 0, 0, 0, 0, 0, 3682, 599, 599, 599, 599, 0, 0, 0, 0, 554, 554, 554, 554, 575, 575, 575, 575,
  /* 39187 */ 575, 599, 599, 599, 599, 599, 1100, 0, 1585, 0, 0, 347, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1287,
  /* 39215 */ 65536, 0, 0, 0, 0, 0, 445, 0, 0, 0, 465, 483, 483, 483, 483, 483, 483, 465, 465, 483, 465, 465, 465, 465,
  /* 39239 */ 465, 465, 465, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 493, 483, 483, 483, 465, 533,
  /* 39260 */ 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 564, 587, 564, 587, 611, 611, 564,
  /* 39281 */ 611, 611, 611, 611, 611, 611, 611, 611, 611, 587, 611, 587, 564, 564, 587, 564, 564, 611, 587, 587, 587,
  /* 39302 */ 587, 587, 564, 587, 587, 587, 587, 611, 611, 1, 12290, 3, 78120, 78471, 298, 6, 6, 0, 0, 0, 0, 0, 1223, 0,
  /* 39326 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1684, 0, 0, 0, 0, 554, 893, 554, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 39352 */ 554, 554, 554, 575, 575, 3090, 575, 575, 0, 0, 1145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1125, 1126,
  /* 39378 */ 1127, 554, 554, 554, 1364, 554, 554, 554, 554, 554, 1371, 554, 554, 554, 554, 554, 554, 554, 554, 3072,
  /* 39398 */ 3073, 554, 554, 554, 554, 554, 554, 0, 0, 0, 0, 0, 0, 575, 575, 2612, 575, 1400, 575, 575, 575, 575, 575,
  /* 39421 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2302, 575, 575, 1463, 575, 575, 575, 575, 575, 575, 575,
  /* 39442 */ 575, 26051, 1383, 1006, 599, 599, 599, 599, 599, 2027, 599, 599, 599, 599, 2033, 599, 599, 599, 575, 554,
  /* 39462 */ 554, 554, 2045, 575, 575, 575, 2049, 599, 599, 599, 2053, 0, 0, 0, 1592, 0, 0, 0, 1598, 0, 0, 0, 1604, 0,
  /* 39486 */ 0, 0, 0, 0, 0, 461, 461, 430, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 461,
  /* 39509 */ 461, 0, 0, 1628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1154, 0, 0, 0, 0, 0, 1644, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39541 */ 0, 0, 0, 0, 768, 0, 0, 0, 575, 1879, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 39565 */ 3444, 575, 599, 599, 599, 599, 1962, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1973, 599, 599, 599,
  /* 39585 */ 599, 599, 2364, 599, 599, 2367, 599, 599, 599, 599, 599, 599, 2375, 599, 1993, 599, 599, 599, 599, 599,
  /* 39605 */ 599, 599, 599, 599, 599, 599, 599, 599, 599, 2428, 599, 0, 0, 0, 2073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39632 */ 804, 0, 806, 0, 554, 554, 554, 554, 2206, 554, 554, 554, 554, 2211, 554, 554, 554, 554, 554, 554, 554,
  /* 39653 */ 554, 3249, 554, 554, 554, 554, 554, 554, 575, 2243, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 39674 */ 554, 554, 554, 554, 1842, 2289, 575, 575, 575, 575, 2294, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 39694 */ 575, 2620, 575, 575, 2623, 2624, 575, 599, 599, 599, 2379, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 39714 */ 599, 599, 599, 2696, 599, 599, 599, 0, 0, 0, 2988, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1181, 0, 0, 0, 599,
  /* 39742 */ 3297, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2710, 599, 599, 3646, 0, 0, 0,
  /* 39764 */ 0, 0, 0, 554, 554, 554, 554, 554, 554, 554, 575, 575, 575, 575, 1929, 575, 575, 575, 575, 575, 1934, 575,
  /* 39786 */ 575, 575, 575, 575, 0, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1491, 1498, 599, 599, 599, 599,
  /* 39807 */ 349, 350, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1216, 1218, 0, 396, 397, 399, 349, 0, 0, 0, 0, 0, 0,
  /* 39836 */ 348, 0, 0, 349, 0, 0, 0, 793, 0, 0, 0, 0, 0, 800, 0, 0, 0, 0, 0, 0, 0, 1225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39867 */ 1194, 0, 0, 0, 0, 0, 0, 0, 396, 0, 0, 0, 396, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 0, 511, 511, 0, 518,
  /* 39895 */ 518, 518, 518, 524, 525, 518, 65536, 0, 0, 0, 348, 0, 0, 450, 0, 456, 0, 484, 484, 484, 484, 484, 490,
  /* 39918 */ 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 565, 588, 565, 588, 494, 484, 495, 494, 484,
  /* 39939 */ 484, 484, 513, 490, 513, 513, 513, 513, 513, 513, 513, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
  /* 39960 */ 494, 484, 484, 495, 494, 612, 612, 565, 612, 612, 612, 612, 612, 612, 612, 612, 612, 588, 612, 588, 565,
  /* 39981 */ 565, 588, 565, 565, 612, 588, 588, 588, 588, 588, 565, 588, 588, 588, 588, 612, 612, 1, 12290, 3, 78120,
  /* 40002 */ 78120, 298, 6, 6, 0, 0, 0, 0, 0, 1238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 711, 0, 0, 0, 803, 0, 680, 0, 0, 683,
  /* 40032 */ 684, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 695, 742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1656, 821, 0, 0,
  /* 40064 */ 0, 0, 0, 829, 0, 0, 0, 0, 723, 0, 0, 0, 0, 0, 1630, 0, 0, 1633, 1634, 1635, 0, 1637, 1638, 0, 0, 0, 0,
  /* 40091 */ 832, 0, 829, 812, 0, 0, 834, 0, 684, 0, 808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 812, 0, 0, 0, 0, 0, 0, 680, 851,
  /* 40120 */ 0, 808, 0, 0, 0, 0, 0, 857, 0, 0, 0, 0, 0, 1646, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384, 0, 0, 0, 0, 0, 0, 0,
  /* 40152 */ 0, 0, 812, 680, 861, 0, 0, 0, 0, 0, 0, 554, 865, 554, 554, 554, 880, 554, 554, 554, 554, 1330, 554, 554,
  /* 40176 */ 554, 554, 554, 554, 554, 554, 554, 554, 554, 2238, 554, 554, 554, 554, 554, 894, 554, 554, 554, 906, 554,
  /* 40197 */ 554, 554, 554, 924, 554, 554, 554, 575, 575, 575, 575, 575, 3639, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 40218 */ 599, 599, 2706, 599, 599, 599, 599, 599, 935, 575, 575, 575, 951, 575, 575, 965, 575, 575, 575, 575, 979,
  /* 40239 */ 575, 575, 575, 575, 575, 1444, 575, 575, 575, 575, 575, 575, 575, 1458, 575, 575, 575, 997, 575, 575, 575,
  /* 40260 */ 0, 599, 599, 1009, 599, 599, 599, 1025, 599, 599, 1039, 599, 599, 599, 599, 1053, 599, 599, 599, 599,
  /* 40280 */ 1071, 599, 599, 599, 575, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3204, 0, 0, 0, 0, 554, 1009, 599, 575,
  /* 40307 */ 554, 554, 554, 554, 554, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 3365, 575, 575, 1128, 0, 0, 0,
  /* 40329 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1688, 1126, 0, 0, 0, 0, 0, 0, 0, 1128, 0, 0, 0, 0, 0, 0, 1232, 0,
  /* 40359 */ 1260, 0, 0, 0, 0, 1292, 0, 0, 0, 0, 0, 0, 0, 554, 554, 554, 554, 554, 554, 554, 3229, 3230, 1401, 575,
  /* 40383 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 1423, 575, 575, 575, 575, 950, 575, 575, 964, 575,
  /* 40404 */ 575, 575, 575, 575, 575, 575, 575, 3269, 575, 575, 575, 575, 575, 575, 575, 599, 1539, 599, 599, 599, 599,
  /* 40425 */ 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2427, 599, 599, 0, 0, 0, 1629, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40450 */ 0, 0, 0, 0, 1197, 0, 0, 0, 0, 0, 1700, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1215, 0, 0, 1780, 554, 554,
  /* 40480 */ 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2216, 575, 1861, 575, 575, 575, 575, 575,
  /* 40501 */ 575, 575, 575, 1872, 575, 575, 575, 575, 575, 0, 599, 599, 1008, 599, 599, 599, 1023, 599, 599, 599, 575,
  /* 40522 */ 575, 26051, 0, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1955, 599, 599, 599, 599, 599, 2394, 599, 599,
  /* 40543 */ 599, 599, 599, 599, 599, 599, 599, 599, 1493, 599, 599, 599, 599, 599, 599, 599, 1994, 599, 599, 599, 599,
  /* 40564 */ 599, 599, 599, 599, 599, 599, 599, 599, 599, 2697, 599, 599, 0, 554, 554, 554, 2190, 554, 554, 554, 554,
  /* 40585 */ 554, 554, 554, 554, 554, 554, 554, 2589, 554, 554, 554, 554, 2273, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 40606 */ 575, 575, 575, 575, 575, 575, 575, 2314, 599, 599, 599, 599, 2405, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 40627 */ 599, 599, 599, 1554, 599, 599, 599, 599, 0, 2466, 0, 0, 0, 2469, 2470, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2993,
  /* 40653 */ 2994, 0, 0, 0, 0, 0, 2515, 0, 0, 0, 0, 0, 0, 0, 2522, 0, 0, 0, 0, 0, 0, 0, 1192, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40684 */ 0, 3215, 0, 0, 3218, 0, 0, 0, 0, 0, 0, 2531, 0, 0, 0, 0, 0, 2537, 0, 0, 0, 0, 2540, 0, 0, 0, 794, 0, 0, 0,
  /* 40714 */ 0, 0, 0, 0, 661, 0, 0, 0, 0, 0, 2519, 2520, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2089, 2090, 0, 0, 0, 0, 554,
  /* 40743 */ 2567, 554, 2569, 554, 554, 554, 554, 2573, 554, 554, 554, 554, 554, 554, 554, 554, 2559, 554, 554, 554,
  /* 40763 */ 554, 554, 2564, 554, 554, 2579, 554, 554, 554, 554, 554, 554, 2585, 554, 554, 554, 554, 554, 554, 2593,
  /* 40783 */ 554, 554, 554, 554, 2597, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2602, 554, 554, 554, 554,
  /* 40804 */ 599, 599, 2687, 2688, 599, 599, 599, 599, 599, 2693, 599, 2695, 599, 599, 599, 599, 599, 599, 2381, 599,
  /* 40824 */ 2383, 599, 599, 599, 599, 599, 599, 599, 2013, 599, 599, 599, 2017, 599, 599, 599, 599, 2699, 599, 599,
  /* 40844 */ 599, 599, 599, 599, 599, 599, 2705, 599, 599, 599, 599, 599, 599, 599, 2731, 599, 599, 599, 599, 599, 599,
  /* 40865 */ 599, 599, 1998, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2713, 599, 599, 599, 599, 599, 599, 2721,
  /* 40885 */ 599, 599, 599, 599, 2725, 599, 575, 0, 0, 0, 0, 3650, 0, 554, 554, 554, 554, 554, 3656, 554, 575, 575,
  /* 40907 */ 575, 575, 2277, 575, 575, 575, 575, 2281, 575, 575, 575, 575, 575, 575, 0, 0, 0, 0, 599, 599, 2356, 599,
  /* 40929 */ 599, 599, 0, 0, 2762, 0, 0, 0, 0, 0, 2766, 0, 0, 0, 0, 0, 0, 0, 0, 3080192, 0, 0, 0, 3158016, 0, 0, 0,
  /* 40956 */ 2772, 2773, 2774, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2787, 2801, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2811, 0, 0,
  /* 40985 */ 0, 0, 0, 0, 732, 0, 734, 0, 0, 0, 0, 0, 0, 0, 0, 1163264, 0, 0, 0, 0, 0, 0, 0, 0, 1171456, 0, 1171456, 0,
  /* 41013 */ 0, 0, 0, 0, 0, 0, 2876, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 1904, 575, 575,
  /* 41036 */ 575, 0, 0, 2924, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2709, 599, 599, 575,
  /* 41057 */ 2973, 599, 2974, 2975, 554, 554, 575, 575, 599, 599, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3405, 3201, 0, 0, 2999,
  /* 41082 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2091, 554, 554, 554, 3067, 554, 3069, 554, 554, 554, 554,
  /* 41108 */ 554, 554, 3075, 554, 554, 3077, 575, 575, 3107, 575, 3109, 575, 575, 575, 575, 575, 575, 575, 3116, 575,
  /* 41128 */ 575, 3118, 599, 599, 3148, 599, 3150, 599, 599, 599, 599, 599, 599, 599, 3157, 599, 599, 3159, 554, 554,
  /* 41148 */ 554, 554, 3234, 3235, 554, 554, 554, 554, 554, 3239, 554, 554, 554, 554, 554, 554, 1786, 554, 554, 554,
  /* 41168 */ 554, 554, 554, 554, 554, 554, 2859, 554, 554, 554, 554, 554, 554, 554, 554, 554, 3244, 554, 554, 554, 554,
  /* 41189 */ 554, 554, 554, 554, 554, 554, 554, 575, 3089, 575, 575, 575, 575, 575, 575, 3266, 575, 575, 575, 575, 575,
  /* 41210 */ 575, 575, 575, 3272, 575, 575, 575, 575, 575, 1467, 575, 575, 575, 575, 575, 26051, 1383, 1006, 599, 599,
  /* 41230 */ 3285, 599, 599, 599, 599, 3289, 3290, 599, 599, 599, 599, 599, 3294, 599, 599, 599, 599, 599, 1457, 0, 0,
  /* 41251 */ 554, 599, 599, 575, 554, 554, 554, 554, 554, 554, 554, 3593, 575, 575, 575, 3597, 575, 575, 575, 575, 575,
  /* 41272 */ 0, 599, 599, 1011, 599, 599, 599, 599, 599, 599, 1040, 554, 554, 554, 3348, 554, 554, 554, 554, 554, 554,
  /* 41293 */ 554, 554, 554, 554, 554, 554, 1838, 554, 554, 554, 554, 554, 3487, 554, 554, 575, 575, 3492, 575, 575,
  /* 41313 */ 575, 575, 3497, 575, 575, 575, 575, 575, 1866, 1867, 575, 575, 575, 575, 1874, 575, 575, 575, 575, 575,
  /* 41333 */ 575, 2670, 575, 575, 575, 575, 0, 2673, 0, 0, 0, 575, 3502, 575, 575, 599, 599, 3507, 599, 599, 599, 599,
  /* 41355 */ 3512, 599, 599, 599, 599, 599, 599, 2395, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1552, 599, 599,
  /* 41375 */ 599, 599, 599, 599, 3517, 599, 599, 575, 0, 0, 0, 0, 0, 3524, 0, 0, 0, 0, 0, 3530, 3544, 575, 575, 575,
  /* 41399 */ 575, 575, 575, 575, 575, 575, 575, 575, 3555, 575, 575, 3557, 575, 575, 3660, 3661, 575, 575, 599, 599,
  /* 41419 */ 599, 3666, 3667, 599, 599, 575, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 554, 554, 554, 554, 2552, 554, 0, 0, 351,
  /* 41444 */ 352, 353, 354, 355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3046, 0, 554, 554, 554, 554, 65536, 353, 354, 354, 355,
  /* 41469 */ 354, 0, 353, 354, 457, 466, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
  /* 41490 */ 485, 500, 509, 509, 517, 509, 519, 509, 509, 519, 519, 509, 519, 534, 534, 534, 534, 534, 534, 534, 534,
  /* 41511 */ 534, 534, 534, 534, 534, 534, 534, 566, 589, 566, 589, 613, 613, 566, 613, 613, 613, 613, 613, 613, 613,
  /* 41532 */ 613, 613, 589, 613, 589, 566, 566, 589, 566, 566, 613, 589, 589, 589, 589, 589, 566, 589, 589, 589, 589,
  /* 41553 */ 613, 613, 1, 12290, 3, 78120, 78120, 298, 6, 6, 0, 0, 0, 0, 0, 1732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 747, 0,
  /* 41581 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 790, 791, 0, 0, 795, 796, 0, 692, 0, 0, 0, 0, 0, 778, 0, 0, 0, 308, 309, 0, 0,
  /* 41611 */ 312, 313, 0, 0, 0, 0, 0, 0, 0, 0, 1136, 0, 0, 0, 0, 1140, 0, 0, 807, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 814,
  /* 41642 */ 0, 0, 0, 0, 554, 554, 2831, 554, 554, 554, 554, 554, 2836, 554, 554, 554, 554, 554, 554, 2584, 554, 554,
  /* 41664 */ 554, 554, 554, 554, 554, 554, 554, 2560, 554, 554, 554, 554, 554, 554, 0, 0, 825, 0, 0, 709, 0, 0, 689, 0,
  /* 41688 */ 709, 0, 830, 692, 740, 0, 0, 0, 809, 809, 0, 753, 809, 0, 554, 554, 868, 872, 554, 554, 554, 554, 554,
  /* 41711 */ 554, 2233, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2224, 554, 554, 554, 554, 554, 554, 709, 831, 0,
  /* 41732 */ 0, 0, 0, 778, 0, 0, 0, 0, 0, 0, 0, 0, 771, 0, 0, 0, 0, 0, 777, 778, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3580, 0,
  /* 41763 */ 554, 554, 554, 554, 554, 840, 841, 0, 0, 0, 0, 0, 0, 771, 0, 0, 845, 716, 0, 0, 0, 0, 668, 669, 670, 671,
  /* 41789 */ 672, 673, 674, 0, 0, 0, 0, 0, 0, 797, 0, 0, 0, 0, 803, 0, 0, 0, 0, 850, 0, 0, 0, 852, 0, 0, 0, 709, 716,
  /* 41818 */ 0, 0, 709, 850, 850, 0, 0, 0, 811, 0, 0, 0, 0, 0, 0, 0, 0, 0, 815, 0, 0, 838, 0, 0, 0, 0, 0, 838, 838, 0,
  /* 41848 */ 0, 0, 554, 554, 899, 902, 905, 554, 554, 554, 916, 920, 554, 554, 554, 554, 575, 575, 575, 575, 953, 575,
  /* 41870 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2338, 575, 575, 575, 575, 575, 941, 945, 948, 575, 956,
  /* 41891 */ 575, 575, 575, 971, 974, 977, 575, 575, 575, 989, 993, 575, 575, 575, 575, 0, 599, 599, 599, 1015, 1019,
  /* 41912 */ 1022, 599, 1030, 599, 599, 599, 599, 599, 2406, 2407, 599, 599, 599, 599, 599, 599, 2414, 599, 599, 575,
  /* 41932 */ 0, 0, 0, 0, 0, 3621, 0, 0, 0, 0, 554, 554, 554, 554, 2833, 554, 2834, 554, 554, 554, 554, 554, 599, 1045,
  /* 41956 */ 1048, 1051, 599, 599, 599, 1063, 1067, 599, 599, 599, 599, 989, 0, 0, 0, 308, 309, 0, 0, 312, 313, 0, 0,
  /* 41979 */ 0, 0, 0, 0, 663, 0, 0, 1081, 599, 1083, 1084, 870, 554, 916, 920, 1089, 941, 575, 989, 993, 1094, 0, 1015,
  /* 42002 */ 599, 1063, 1067, 1099, 78120, 1100, 6, 0, 0, 0, 0, 0, 0, 0, 0, 3080192, 0, 0, 0, 3158016, 0, 102400, 0,
  /* 42025 */ 1143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2132, 0, 0, 0, 1221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1230,
  /* 42056 */ 0, 0, 0, 308, 309, 0, 0, 312, 313, 0, 0, 0, 0, 0, 662, 0, 554, 554, 1344, 554, 554, 554, 554, 554, 554,
  /* 42081 */ 554, 554, 554, 554, 1354, 554, 554, 554, 554, 554, 1832, 554, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 42101 */ 1841, 1361, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1374, 554, 554, 554, 554, 554, 554, 1800,
  /* 42121 */ 554, 554, 554, 554, 554, 554, 554, 554, 554, 3632, 575, 575, 575, 575, 575, 575, 599, 1523, 599, 599,
  /* 42141 */ 1527, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1985, 599, 599, 599, 599, 1538, 599, 599,
  /* 42161 */ 1545, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1558, 599, 575, 0, 0, 3648, 0, 0, 0, 554, 554,
  /* 42183 */ 554, 554, 554, 554, 554, 575, 575, 575, 575, 2293, 575, 2295, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 42204 */ 2323, 575, 575, 575, 575, 2328, 575, 1626, 1627, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1231, 0, 0, 0,
  /* 42231 */ 0, 1660, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1214, 0, 1217, 0, 0, 0, 1713, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42262 */ 0, 0, 0, 1256, 554, 554, 0, 0, 1729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1260, 0, 0, 0, 0, 0, 1742, 0,
  /* 42292 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1229, 0, 0, 0, 1763, 554, 554, 554, 554, 554, 1768, 554, 554, 554, 554,
  /* 42318 */ 554, 554, 554, 554, 554, 1804, 554, 554, 1808, 554, 554, 554, 554, 554, 554, 1797, 554, 554, 554, 1801,
  /* 42338 */ 554, 554, 1806, 554, 554, 554, 554, 554, 554, 554, 2847, 554, 554, 2850, 554, 554, 554, 554, 554, 554,
  /* 42358 */ 554, 2599, 554, 554, 554, 554, 554, 554, 554, 554, 915, 554, 554, 554, 554, 554, 575, 575, 1860, 575, 575,
  /* 42379 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2342, 575, 1893, 575, 575, 1898, 575,
  /* 42399 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 599, 599, 3131, 599, 599, 575, 575, 26051, 0, 599, 1948,
  /* 42420 */ 599, 599, 599, 599, 599, 599, 1954, 599, 599, 599, 599, 599, 1485, 599, 599, 599, 599, 599, 1497, 599,
  /* 42440 */ 599, 599, 599, 599, 599, 1981, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2733, 599, 599, 599, 599, 599,
  /* 42461 */ 599, 1976, 599, 599, 599, 599, 599, 599, 599, 599, 1983, 599, 599, 599, 1987, 599, 599, 599, 599, 599,
  /* 42481 */ 2717, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2369, 599, 599, 2373, 599, 599, 1992, 599, 599,
  /* 42501 */ 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2711, 599, 599, 599, 599, 2026, 599, 599,
  /* 42522 */ 599, 599, 599, 599, 599, 599, 599, 575, 554, 599, 599, 575, 554, 554, 2440, 2441, 575, 575, 2444, 0, 0,
  /* 42543 */ 2055, 0, 1104, 0, 0, 0, 2057, 0, 1108, 0, 0, 0, 2059, 0, 0, 0, 820, 0, 0, 0, 0, 0, 0, 0, 820, 0, 0, 0, 0,
  /* 42572 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 719, 1112, 0, 0, 0, 2061, 0, 1116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3216, 0,
  /* 42603 */ 0, 0, 0, 0, 0, 0, 0, 2082, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1244, 0, 0, 1247, 554, 554, 554, 2219, 554,
  /* 42632 */ 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2213, 554, 2215, 554, 599, 599, 2403, 599, 599,
  /* 42652 */ 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2949, 599, 599, 554, 554, 2607, 554, 554, 554, 0,
  /* 42673 */ 0, 0, 2610, 0, 1851, 575, 575, 575, 575, 575, 575, 3111, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 42694 */ 1468, 575, 575, 575, 575, 26051, 1383, 1006, 599, 1478, 0, 0, 0, 2763, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2769, 0,
  /* 42719 */ 0, 0, 308, 309, 0, 0, 312, 313, 0, 0, 0, 0, 661, 0, 0, 810, 810, 0, 824, 862, 0, 554, 867, 554, 554, 554,
  /* 42745 */ 554, 886, 2826, 0, 0, 0, 554, 2830, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1820, 554, 554,
  /* 42766 */ 1823, 554, 554, 0, 0, 575, 2877, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 1920, 575,
  /* 42787 */ 575, 575, 0, 0, 599, 2925, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2724, 599, 599,
  /* 42808 */ 599, 554, 554, 554, 3055, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2227, 554, 554, 554,
  /* 42829 */ 554, 554, 554, 554, 3068, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 3429, 554, 575, 575, 575,
  /* 42850 */ 575, 575, 3095, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2284, 575, 575, 2288,
  /* 42870 */ 575, 575, 575, 3108, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2326, 575, 575, 575, 599,
  /* 42891 */ 599, 3136, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2958, 599, 599, 599, 599, 599,
  /* 42912 */ 3149, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2735, 599, 599, 599, 0, 3320, 0, 0, 0,
  /* 42934 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1246, 0, 3345, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 42959 */ 554, 554, 554, 554, 2565, 554, 554, 554, 3358, 575, 575, 575, 575, 575, 575, 575, 3363, 575, 575, 575,
  /* 42979 */ 575, 575, 575, 3256, 3257, 575, 575, 575, 575, 3261, 3262, 575, 575, 554, 554, 554, 3421, 554, 554, 554,
  /* 42999 */ 554, 554, 3427, 554, 554, 554, 575, 575, 575, 575, 575, 3549, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 43020 */ 3270, 575, 575, 575, 575, 575, 575, 3432, 575, 575, 575, 575, 3436, 575, 575, 575, 575, 575, 3442, 575,
  /* 43040 */ 575, 575, 599, 599, 1, 12290, 3, 78120, 78471, 298, 6, 6, 0, 0, 0, 0, 0, 374, 374, 374, 0, 0, 0, 0, 0, 0,
  /* 43066 */ 724, 725, 599, 599, 3447, 599, 599, 599, 599, 3451, 599, 599, 599, 599, 599, 3457, 599, 599, 599, 599,
  /* 43086 */ 599, 2730, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 3305, 599, 599, 599, 599, 599, 0, 0, 3471, 0,
  /* 43108 */ 0, 0, 554, 554, 554, 554, 554, 3480, 554, 554, 554, 3484, 599, 3702, 3703, 3704, 3705, 0, 554, 575, 599,
  /* 43129 */ 0, 554, 575, 599, 0, 0, 0, 0, 696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2162, 0, 0, 398, 0, 0, 0,
  /* 43160 */ 402, 398, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 355, 354, 0, 414, 0, 0, 0, 414, 0, 356, 0,
  /* 43187 */ 69632, 73728, 0, 0, 0, 0, 0, 0, 808, 834, 0, 834, 829, 0, 0, 0, 848, 0, 65536, 0, 0, 0, 0, 0, 446, 0, 0,
  /* 43214 */ 458, 0, 0, 0, 0, 0, 0, 0, 1208, 0, 0, 0, 1213, 0, 0, 0, 0, 528, 535, 535, 535, 535, 535, 535, 0, 0, 0, 0,
  /* 43242 */ 0, 535, 0, 0, 0, 0, 700, 701, 702, 0, 0, 0, 706, 0, 0, 0, 0, 0, 0, 0, 200704, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43272 */ 1256, 0, 0, 0, 0, 0, 0, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 567, 590, 567, 590,
  /* 43295 */ 567, 567, 590, 567, 567, 614, 590, 590, 590, 590, 590, 567, 590, 590, 590, 590, 614, 614, 567, 614, 614,
  /* 43316 */ 614, 614, 614, 614, 614, 614, 614, 590, 614, 590, 632, 637, 637, 614, 643, 1, 12290, 3, 78120, 78120, 298,
  /* 43337 */ 6, 6, 0, 0, 0, 0, 0, 1743, 0, 0, 1746, 0, 0, 0, 0, 0, 0, 0, 554, 3225, 554, 554, 554, 3228, 554, 554, 554,
  /* 43364 */ 0, 0, 792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1608, 0, 1610, 575, 998, 575, 575, 575, 0, 599, 599,
  /* 43391 */ 599, 599, 599, 599, 599, 599, 599, 599, 2956, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1054, 599, 599,
  /* 43412 */ 599, 599, 1072, 599, 599, 599, 575, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3529, 0, 0, 0, 554, 1082, 599, 575, 554,
  /* 43438 */ 554, 554, 554, 554, 575, 575, 575, 575, 575, 575, 3361, 575, 575, 575, 575, 575, 575, 0, 1129, 0, 0, 0, 0,
  /* 43461 */ 1134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61440, 0, 0, 0, 0, 0, 1402, 575, 575, 575, 575, 1412, 575, 575, 575,
  /* 43487 */ 575, 575, 575, 575, 575, 575, 575, 2634, 575, 575, 575, 2637, 575, 575, 575, 575, 1426, 575, 575, 575,
  /* 43507 */ 575, 575, 575, 575, 575, 1436, 575, 575, 575, 575, 575, 1899, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 43528 */ 575, 2337, 575, 575, 575, 575, 575, 575, 575, 575, 1464, 575, 575, 575, 575, 575, 575, 575, 26051, 1383,
  /* 43548 */ 1006, 599, 599, 599, 599, 599, 2942, 599, 599, 2945, 599, 599, 599, 599, 599, 599, 599, 1515, 599, 599,
  /* 43568 */ 599, 599, 599, 599, 599, 599, 3140, 599, 599, 599, 599, 599, 599, 599, 599, 1540, 599, 599, 599, 599, 599,
  /* 43589 */ 599, 599, 599, 599, 599, 599, 1556, 599, 599, 599, 599, 599, 3138, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 43610 */ 599, 599, 1984, 599, 599, 599, 599, 599, 0, 0, 1593, 0, 0, 0, 1599, 0, 0, 0, 1605, 0, 0, 0, 0, 0, 0, 844,
  /* 43636 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2064, 0, 0, 0, 0, 0, 0, 1674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43668 */ 1261, 0, 0, 1689, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1214, 0, 0, 0, 0, 0, 2096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43699 */ 3018, 0, 0, 0, 0, 0, 1588, 0, 0, 0, 0, 0, 1594, 0, 0, 0, 0, 0, 1600, 0, 0, 0, 308, 309, 0, 311, 312, 313,
  /* 43727 */ 0, 0, 0, 0, 0, 0, 0, 0, 709, 554, 554, 870, 874, 877, 554, 885, 2119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43756 */ 0, 0, 0, 2477, 554, 554, 554, 554, 2220, 554, 2222, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2236,
  /* 43777 */ 2237, 554, 554, 554, 554, 554, 2303, 575, 2305, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 43797 */ 575, 575, 2339, 575, 2341, 575, 2390, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 43817 */ 599, 599, 3295, 554, 3176, 575, 3178, 599, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 374, 0, 298, 0, 0, 599, 599,
  /* 43843 */ 3398, 0, 0, 0, 3400, 0, 0, 0, 0, 0, 0, 3201, 3407, 0, 0, 0, 855, 0, 804, 835, 855, 0, 554, 554, 869, 554,
  /* 43869 */ 875, 554, 554, 554, 554, 554, 554, 3630, 3631, 554, 575, 575, 575, 575, 575, 575, 575, 1469, 1470, 575,
  /* 43889 */ 575, 575, 26051, 1383, 1006, 599, 599, 0, 3409, 0, 0, 0, 0, 0, 0, 0, 0, 0, 554, 3416, 554, 554, 3418, 575,
  /* 43913 */ 3433, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 599, 599, 599, 599, 599, 599, 599,
  /* 43934 */ 599, 599, 599, 599, 599, 3446, 599, 599, 3448, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 43955 */ 2969, 599, 599, 599, 0, 0, 816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1751, 0, 0, 0, 599, 599, 599, 599,
  /* 43983 */ 599, 78120, 1100, 6, 0, 0, 0, 1105, 1109, 0, 0, 0, 308, 309, 0, 2134016, 312, 313, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44009 */ 0, 258048, 270336, 0, 0, 0, 0, 0, 1113, 1117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1270, 0, 575, 575,
  /* 44037 */ 26051, 1946, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 3142, 599, 599, 599, 65536, 0,
  /* 44057 */ 357, 357, 359, 357, 0, 0, 357, 0, 357, 0, 0, 0, 0, 358, 357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
  /* 44081 */ 357, 357, 357, 357, 357, 357, 568, 591, 568, 591, 615, 615, 568, 615, 615, 615, 615, 615, 615, 615, 615,
  /* 44102 */ 615, 591, 615, 591, 568, 568, 591, 568, 568, 615, 591, 591, 591, 591, 591, 568, 591, 591, 591, 591, 615,
  /* 44123 */ 615, 1, 12290, 3, 78120, 78120, 298, 6, 6, 0, 0, 0, 0, 0, 2136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2182, 0,
  /* 44151 */ 0, 0, 0, 0, 697, 698, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2078, 0, 2079, 0, 772, 0, 0, 0, 0, 0, 0, 0,
  /* 44182 */ 0, 782, 0, 0, 0, 0, 0, 0, 1191, 0, 1193, 0, 0, 0, 0, 1198, 0, 0, 0, 697, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44213 */ 0, 0, 0, 1738, 0, 828, 0, 0, 827, 0, 0, 0, 0, 0, 772, 0, 0, 836, 0, 0, 0, 0, 716, 374, 374, 374, 0, 0, 0,
  /* 44242 */ 0, 0, 0, 0, 0, 0, 3414, 0, 554, 554, 554, 554, 554, 889, 554, 554, 554, 554, 908, 910, 554, 554, 921, 554,
  /* 44266 */ 554, 554, 554, 575, 575, 575, 575, 1003, 0, 599, 599, 599, 599, 599, 599, 1026, 599, 599, 599, 599, 599,
  /* 44287 */ 1512, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2424, 599, 2426, 599, 599, 599, 936, 942, 575,
  /* 44307 */ 575, 575, 575, 960, 575, 575, 575, 575, 575, 981, 983, 575, 575, 575, 575, 1410, 575, 575, 575, 1415, 575,
  /* 44328 */ 575, 575, 575, 575, 575, 575, 1915, 575, 575, 575, 575, 575, 575, 575, 575, 3258, 575, 575, 575, 575, 575,
  /* 44349 */ 575, 575, 599, 599, 599, 599, 1055, 1057, 599, 599, 1068, 599, 599, 599, 599, 575, 0, 0, 0, 0, 0, 0, 3525,
  /* 44372 */ 0, 3527, 0, 0, 0, 0, 0, 554, 1010, 599, 575, 871, 910, 554, 921, 554, 942, 983, 575, 994, 575, 575, 575,
  /* 44395 */ 575, 0, 599, 599, 1010, 1016, 599, 599, 599, 599, 1034, 599, 0, 1016, 1057, 599, 1068, 599, 78120, 1100,
  /* 44415 */ 6, 0, 0, 0, 0, 0, 0, 0, 337, 0, 69632, 73728, 0, 0, 0, 0, 0, 1170, 0, 0, 0, 1173, 0, 1175, 0, 1177, 0, 0,
  /* 44443 */ 0, 0, 0, 0, 0, 338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2088, 0, 0, 0, 0, 0, 0, 0, 0, 1203, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44476 */ 0, 0, 0, 0, 0, 2116, 0, 0, 0, 0, 1220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2173, 0, 0, 0, 1234, 1235,
  /* 44506 */ 0, 0, 0, 0, 0, 1240, 0, 0, 0, 0, 0, 0, 0, 340, 341, 342, 0, 0, 0, 0, 0, 0, 1288, 0, 0, 0, 0, 1291, 0, 0,
  /* 44536 */ 0, 0, 0, 0, 0, 1203, 554, 554, 554, 554, 554, 1848, 1383, 0, 1853, 575, 1855, 575, 575, 1857, 575, 1859,
  /* 44558 */ 554, 554, 554, 1329, 1331, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2860, 554, 554, 554,
  /* 44578 */ 554, 554, 554, 554, 1383, 932, 575, 575, 575, 1389, 575, 575, 575, 575, 575, 575, 575, 575, 2321, 2322,
  /* 44598 */ 575, 575, 575, 575, 575, 575, 2329, 599, 1481, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 44619 */ 599, 599, 2970, 599, 599, 599, 599, 599, 599, 1511, 1513, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 44639 */ 599, 2967, 599, 599, 599, 599, 599, 1561, 1562, 599, 599, 599, 1567, 0, 0, 554, 599, 599, 575, 554, 1572,
  /* 44660 */ 554, 554, 554, 554, 554, 2207, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1773, 554, 554, 554, 554,
  /* 44681 */ 554, 1575, 575, 1576, 575, 575, 1579, 599, 1580, 599, 599, 1583, 1100, 0, 0, 0, 0, 0, 2152, 0, 0, 0, 0, 0,
  /* 44705 */ 0, 0, 0, 0, 0, 752, 0, 0, 0, 0, 0, 1826, 554, 554, 554, 1831, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 44729 */ 1839, 554, 554, 554, 554, 554, 2246, 554, 554, 554, 554, 554, 2251, 554, 554, 554, 554, 554, 554, 1383,
  /* 44749 */ 1852, 575, 575, 575, 575, 575, 575, 575, 575, 2309, 575, 575, 575, 575, 575, 575, 575, 575, 1869, 575,
  /* 44769 */ 575, 575, 575, 575, 575, 575, 554, 554, 1845, 554, 554, 554, 1383, 0, 575, 575, 575, 575, 575, 575, 1858,
  /* 44790 */ 575, 575, 575, 575, 2318, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 599, 3130, 599, 599, 599,
  /* 44811 */ 1925, 575, 575, 575, 575, 575, 575, 575, 575, 1933, 575, 575, 575, 575, 1939, 575, 575, 575, 575, 2332,
  /* 44831 */ 575, 575, 575, 2335, 575, 575, 575, 575, 2340, 575, 575, 575, 575, 1882, 575, 575, 575, 575, 575, 575,
  /* 44851 */ 575, 575, 1889, 575, 575, 575, 575, 954, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2621, 575,
  /* 44872 */ 575, 575, 575, 575, 575, 26051, 0, 599, 599, 599, 599, 599, 599, 1952, 599, 599, 599, 599, 599, 599, 1528,
  /* 44893 */ 599, 599, 599, 599, 599, 599, 599, 599, 599, 2368, 599, 2370, 599, 599, 599, 599, 599, 599, 1977, 599,
  /* 44913 */ 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 3144, 599, 599, 0, 0, 0, 2109, 0, 0, 0, 0, 0,
  /* 44937 */ 2113, 0, 0, 2115, 0, 0, 0, 0, 730, 0, 0, 0, 0, 0, 0, 0, 0, 739, 0, 741, 0, 2148, 0, 2150, 2151, 0, 0, 0,
  /* 44965 */ 0, 0, 0, 0, 0, 0, 2161, 0, 0, 0, 1131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 408, 0, 0, 0, 2163, 0, 0, 0, 0,
  /* 44997 */ 0, 0, 0, 0, 0, 0, 2171, 0, 0, 0, 2171, 0, 0, 2176, 2177, 0, 0, 0, 0, 0, 2181, 0, 0, 0, 0, 0, 0, 0, 1226,
  /* 45026 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1666, 0, 0, 0, 0, 0, 0, 0, 2187, 554, 554, 554, 554, 554, 2193, 554, 554, 554,
  /* 45053 */ 554, 554, 554, 554, 554, 0, 0, 0, 2268, 575, 575, 575, 575, 554, 2217, 554, 554, 554, 554, 554, 554, 2223,
  /* 45075 */ 554, 2225, 554, 2228, 554, 554, 554, 554, 554, 554, 3057, 554, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 45095 */ 1311, 554, 554, 554, 554, 554, 554, 575, 575, 575, 2276, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 45116 */ 575, 575, 2622, 575, 575, 575, 599, 2361, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 45137 */ 599, 3158, 599, 599, 599, 599, 2391, 599, 2393, 599, 2396, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 45157 */ 2397, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2404, 599, 599, 599, 599, 599, 2410, 599, 599, 599,
  /* 45177 */ 599, 599, 599, 599, 2944, 599, 599, 599, 599, 599, 599, 599, 599, 3392, 599, 599, 575, 554, 554, 575, 575,
  /* 45198 */ 599, 599, 599, 2432, 575, 554, 599, 599, 575, 554, 554, 554, 554, 575, 575, 575, 575, 3548, 575, 575, 575,
  /* 45219 */ 575, 575, 575, 575, 575, 575, 575, 575, 3373, 575, 575, 575, 599, 0, 0, 0, 2454, 2455, 0, 0, 0, 0, 0, 0,
  /* 45243 */ 0, 0, 0, 0, 0, 374, 0, 262144, 0, 0, 0, 2490, 0, 0, 2493, 0, 0, 0, 0, 2497, 0, 0, 0, 0, 0, 0, 0, 1239, 0,
  /* 45272 */ 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 359, 357, 0, 0, 0, 2505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45302 */ 2513, 554, 554, 2580, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 3076, 554, 554,
  /* 45322 */ 575, 2626, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2663, 575, 575, 575,
  /* 45342 */ 2685, 599, 599, 599, 599, 599, 2690, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2423, 599, 599, 599,
  /* 45362 */ 599, 599, 599, 599, 2748, 2749, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2184, 0, 0, 0, 0, 599, 599, 599,
  /* 45389 */ 599, 2928, 599, 2929, 599, 599, 599, 599, 599, 599, 599, 1529, 599, 599, 1531, 599, 599, 599, 1535, 599,
  /* 45409 */ 3419, 554, 554, 554, 554, 554, 554, 554, 554, 554, 3428, 554, 554, 3430, 575, 575, 575, 575, 1427, 575,
  /* 45429 */ 575, 575, 575, 575, 575, 575, 575, 1437, 575, 575, 575, 575, 575, 2347, 0, 0, 0, 0, 2354, 599, 599, 599,
  /* 45451 */ 599, 599, 599, 1548, 599, 599, 599, 599, 599, 1555, 599, 599, 599, 575, 575, 3434, 575, 575, 575, 575,
  /* 45471 */ 575, 575, 575, 575, 575, 3443, 575, 575, 3445, 599, 599, 599, 599, 3449, 599, 599, 599, 599, 599, 599,
  /* 45491 */ 599, 599, 599, 3458, 599, 575, 0, 3647, 0, 3649, 0, 0, 554, 554, 554, 554, 554, 554, 554, 575, 575, 575,
  /* 45513 */ 575, 2306, 575, 2308, 575, 2311, 575, 575, 575, 575, 575, 575, 575, 2632, 575, 575, 575, 575, 575, 575,
  /* 45533 */ 575, 575, 1433, 575, 575, 575, 575, 575, 575, 575, 599, 599, 599, 599, 599, 3562, 599, 599, 599, 599, 599,
  /* 45554 */ 599, 599, 599, 599, 575, 2203, 599, 2371, 2286, 554, 554, 554, 554, 575, 575, 575, 575, 575, 575, 575,
  /* 45574 */ 3662, 575, 599, 599, 599, 599, 599, 3668, 599, 575, 3670, 0, 0, 0, 1188, 1189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45599 */ 0, 0, 0, 3033, 0, 0, 0, 3672, 0, 0, 554, 554, 554, 554, 554, 554, 575, 575, 575, 575, 575, 575, 599, 599,
  /* 45623 */ 599, 599, 599, 599, 599, 575, 0, 3671, 360, 0, 0, 0, 0, 0, 403, 404, 0, 405, 0, 0, 0, 0, 0, 405, 0, 0,
  /* 45649 */ 418, 0, 510, 510, 0, 510, 510, 510, 510, 510, 510, 510, 0, 0, 410, 0, 0, 0, 0, 0, 377, 385, 413, 0, 0, 0,
  /* 45675 */ 0, 0, 0, 1224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2474, 0, 0, 0, 0, 0, 377, 0, 418, 420, 0, 0, 377, 385, 0,
  /* 45704 */ 69632, 73728, 0, 0, 0, 0, 436, 65536, 0, 436, 436, 0, 436, 0, 420, 436, 459, 467, 0, 0, 0, 0, 0, 0, 1253,
  /* 45729 */ 0, 0, 0, 0, 1258, 0, 0, 0, 0, 0, 0, 377, 0, 0, 0, 0, 405, 0, 0, 0, 0, 360, 0, 0, 377, 0, 0, 0, 0, 0, 0, 0,
  /* 45761 */ 0, 0, 0, 0, 0, 0, 2463, 0, 0, 510, 536, 536, 536, 536, 536, 536, 467, 467, 467, 544, 467, 548, 549, 467,
  /* 45785 */ 467, 536, 548, 536, 536, 536, 536, 536, 536, 536, 536, 536, 552, 569, 592, 569, 592, 569, 569, 592, 569,
  /* 45806 */ 569, 616, 592, 592, 592, 592, 592, 569, 622, 622, 622, 592, 616, 616, 569, 616, 616, 616, 616, 616, 616,
  /* 45827 */ 616, 616, 616, 592, 616, 592, 633, 638, 638, 616, 644, 1, 12290, 3, 78120, 78120, 298, 6, 6, 0, 0, 0, 0,
  /* 45850 */ 0, 2178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3193, 3194, 0, 0, 0, 822, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45882 */ 0, 0, 2488, 0, 0, 822, 0, 0, 803, 0, 0, 0, 0, 822, 0, 0, 0, 0, 0, 0, 0, 822, 0, 0, 0, 0, 803, 0, 822, 0,
  /* 45912 */ 0, 0, 0, 0, 0, 554, 866, 554, 554, 554, 554, 554, 554, 554, 3071, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 45935 */ 918, 554, 554, 554, 554, 554, 575, 575, 554, 895, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 45956 */ 554, 575, 575, 575, 575, 1428, 575, 575, 575, 1432, 575, 575, 575, 575, 575, 575, 575, 2671, 575, 575,
  /* 45976 */ 575, 0, 0, 0, 2674, 0, 937, 575, 575, 575, 575, 575, 575, 966, 968, 575, 575, 575, 575, 575, 575, 575,
  /* 45998 */ 2660, 575, 575, 575, 575, 575, 575, 575, 575, 1916, 575, 575, 575, 575, 575, 575, 575, 1042, 599, 599,
  /* 46018 */ 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 575, 0, 0, 1568, 599, 1570, 1571, 554, 554, 1573, 554,
  /* 46039 */ 0, 0, 554, 1011, 599, 575, 554, 554, 554, 554, 554, 575, 575, 575, 575, 575, 3360, 575, 575, 575, 3364,
  /* 46060 */ 575, 575, 575, 1273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2503, 554, 554, 554, 1302, 554, 554,
  /* 46086 */ 554, 1306, 554, 554, 1317, 554, 554, 1321, 554, 554, 554, 554, 554, 2571, 554, 554, 554, 554, 554, 554,
  /* 46106 */ 2576, 554, 554, 554, 554, 554, 554, 2557, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2849, 554, 554,
  /* 46126 */ 554, 554, 554, 554, 1341, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2854,
  /* 46147 */ 554, 554, 1383, 932, 575, 575, 575, 575, 575, 575, 1392, 575, 575, 575, 1396, 575, 575, 575, 575, 2617,
  /* 46167 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 0, 0, 0, 0, 0, 575, 1407, 575, 575, 1411, 575, 575,
  /* 46190 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 1873, 575, 575, 575, 575, 599, 599, 599, 599, 1484, 599, 599,
  /* 46211 */ 599, 1488, 599, 599, 1499, 599, 599, 1503, 599, 575, 554, 575, 599, 0, 0, 0, 0, 0, 0, 0, 0, 3201, 0, 3468,
  /* 46235 */ 599, 599, 1524, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 3307, 599, 599, 0, 0,
  /* 46256 */ 1675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2486, 0, 0, 1795, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 46282 */ 554, 554, 554, 554, 554, 554, 554, 3354, 554, 554, 554, 1844, 554, 554, 554, 554, 1383, 0, 575, 575, 575,
  /* 46303 */ 575, 575, 575, 575, 575, 2896, 575, 575, 575, 575, 575, 575, 575, 575, 3112, 575, 3114, 575, 575, 575,
  /* 46323 */ 575, 575, 575, 599, 599, 599, 599, 1963, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2034, 599,
  /* 46344 */ 599, 575, 554, 599, 1963, 1869, 554, 554, 554, 554, 575, 575, 575, 575, 599, 599, 599, 599, 0, 0, 0, 0, 0,
  /* 46367 */ 0, 0, 0, 0, 0, 0, 3201, 0, 0, 2080, 0, 2081, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2501, 0, 0, 0, 554,
  /* 46397 */ 554, 2189, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2239, 554, 554, 554, 554, 554, 554,
  /* 46418 */ 2231, 2232, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2242, 2315, 2316, 575, 575, 575, 575, 575,
  /* 46438 */ 575, 575, 575, 575, 575, 575, 2327, 575, 575, 575, 575, 1429, 575, 575, 575, 575, 1434, 575, 575, 575,
  /* 46458 */ 575, 575, 575, 1430, 575, 575, 575, 575, 575, 575, 575, 575, 575, 1871, 575, 575, 575, 575, 575, 575,
  /* 46478 */ 2445, 599, 599, 2448, 2449, 0, 1588, 0, 1594, 0, 1600, 0, 1606, 0, 0, 0, 0, 827, 828, 0, 0, 0, 0, 828, 0,
  /* 46503 */ 0, 0, 0, 0, 0, 1207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2538, 0, 0, 0, 0, 0, 554, 554, 554, 2581, 554, 554,
  /* 46531 */ 554, 554, 554, 554, 554, 554, 2590, 554, 554, 554, 554, 554, 554, 3236, 554, 554, 554, 554, 554, 554, 554,
  /* 46552 */ 554, 554, 923, 554, 554, 554, 554, 575, 575, 575, 2654, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 46573 */ 575, 575, 575, 575, 2921, 575, 575, 575, 0, 0, 0, 2775, 0, 0, 0, 0, 2780, 0, 0, 0, 0, 0, 0, 0, 395, 0,
  /* 46599 */ 69632, 73728, 0, 0, 0, 0, 0, 0, 2267, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 46621 */ 575, 3101, 575, 575, 575, 0, 2352, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 46642 */ 3306, 599, 599, 599, 0, 0, 0, 3040, 0, 0, 0, 0, 0, 0, 0, 0, 554, 554, 554, 554, 554, 554, 3343, 554, 599,
  /* 46667 */ 575, 554, 599, 575, 554, 3310, 575, 3312, 599, 3314, 3315, 0, 0, 0, 0, 0, 2456, 0, 2458, 0, 0, 2461, 0, 0,
  /* 46691 */ 0, 0, 0, 0, 686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 0, 0, 0, 0, 0, 3319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46723 */ 0, 0, 0, 0, 0, 2800, 3201, 0, 3328, 0, 0, 0, 0, 3332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 325, 326,
  /* 46750 */ 326, 431, 432, 599, 599, 3377, 599, 599, 599, 3380, 599, 599, 599, 599, 599, 599, 599, 599, 599, 3141,
  /* 46770 */ 599, 599, 599, 599, 599, 599, 3397, 599, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3201, 0, 0, 0, 308, 309, 0,
  /* 46796 */ 2134016, 312, 313, 0, 0, 221184, 0, 0, 0, 0, 0, 334, 382, 337, 381, 0, 0, 0, 0, 0, 0, 0, 0, 2794, 0, 0, 0,
  /* 46823 */ 0, 0, 0, 0, 0, 2809, 0, 0, 0, 0, 0, 0, 0, 0, 2821, 0, 0, 2824, 0, 0, 0, 0, 0, 0, 3532, 554, 554, 554, 554,
  /* 46852 */ 554, 554, 554, 554, 554, 554, 554, 554, 554, 2252, 554, 554, 554, 554, 3545, 575, 575, 575, 575, 575, 575,
  /* 46873 */ 575, 575, 575, 575, 575, 575, 575, 575, 3374, 575, 575, 599, 3558, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 46894 */ 599, 599, 599, 599, 599, 599, 575, 2038, 575, 575, 3603, 575, 575, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 46915 */ 599, 599, 3615, 554, 3627, 554, 554, 554, 554, 554, 554, 554, 575, 575, 3633, 575, 3634, 575, 575, 575,
  /* 46935 */ 575, 1465, 575, 575, 575, 1472, 575, 575, 26051, 1383, 1006, 599, 599, 599, 599, 599, 1547, 599, 599,
  /* 46954 */ 1551, 599, 599, 599, 599, 599, 1557, 599, 365, 366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 374, 0, 298, 0, 0, 0, 308,
  /* 46980 */ 309, 0, 2134016, 312, 313, 204800, 0, 0, 0, 0, 0, 0, 0, 810, 0, 0, 0, 0, 0, 0, 0, 810, 0, 0, 419, 365, 0,
  /* 47007 */ 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 0, 1278, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1695, 0, 0, 0, 0, 0,
  /* 47036 */ 65536, 0, 0, 0, 0, 0, 0, 365, 0, 363, 0, 486, 486, 486, 486, 486, 486, 486, 491, 486, 486, 486, 486, 486,
  /* 47060 */ 486, 486, 486, 0, 537, 537, 541, 541, 541, 541, 486, 486, 486, 486, 486, 537, 491, 486, 486, 491, 486,
  /* 47081 */ 486, 497, 486, 0, 0, 486, 0, 0, 0, 0, 0, 0, 0, 554, 554, 554, 3227, 554, 554, 554, 554, 554, 541, 537,
  /* 47105 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 553, 570, 593, 570, 593, 570, 570, 593, 570, 570, 617, 593,
  /* 47126 */ 593, 593, 593, 593, 570, 593, 593, 593, 593, 617, 617, 570, 617, 617, 617, 617, 617, 617, 617, 617, 617,
  /* 47147 */ 593, 617, 593, 634, 639, 639, 617, 645, 1, 12290, 3, 78120, 78120, 298, 6, 6, 0, 0, 0, 0, 0, 2494, 0,
  /* 47170 */ 2495, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3323, 0, 3324, 0, 0, 0, 0, 0, 0, 682, 0, 0, 685, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 47201 */ 0, 0, 343, 0, 0, 0, 0, 0, 726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2815, 661, 755, 0, 761, 762,
  /* 47231 */ 661, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 0, 0, 0, 0, 0, 0, 0, 810, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 819,
  /* 47264 */ 0, 824, 0, 0, 0, 0, 0, 0, 824, 0, 0, 0, 0, 0, 0, 824, 890, 896, 900, 554, 554, 554, 554, 554, 917, 554,
  /* 47290 */ 554, 554, 554, 554, 575, 575, 575, 575, 1466, 575, 575, 575, 575, 575, 575, 26051, 1383, 1006, 599, 599,
  /* 47310 */ 599, 599, 599, 2689, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1494, 599, 599, 599, 599, 1504,
  /* 47330 */ 938, 575, 575, 575, 575, 957, 961, 967, 575, 972, 575, 575, 575, 575, 575, 990, 599, 1046, 599, 599, 599,
  /* 47351 */ 599, 599, 1064, 599, 599, 599, 599, 599, 1078, 0, 0, 0, 308, 309, 155648, 2134016, 312, 313, 0, 217088, 0,
  /* 47372 */ 0, 0, 0, 0, 0, 0, 2535, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2508, 0, 0, 0, 0, 0, 0, 0, 0, 554, 1012, 599, 575, 554,
  /* 47402 */ 554, 917, 554, 554, 575, 575, 990, 575, 575, 575, 575, 1865, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 47423 */ 1877, 575, 0, 599, 599, 1064, 599, 599, 78120, 1100, 6, 0, 0, 0, 0, 0, 0, 0, 554, 554, 3226, 554, 554,
  /* 47446 */ 554, 554, 554, 554, 0, 1171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1752, 0, 1233, 0, 0, 0, 0, 0, 0, 0,
  /* 47476 */ 0, 1241, 0, 0, 0, 0, 0, 0, 0, 1254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2822, 2823, 0, 0, 0, 0, 0, 0, 1249, 0, 0,
  /* 47506 */ 1121, 0, 0, 0, 1255, 0, 1257, 0, 0, 0, 0, 0, 0, 1279, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3202, 0, 0, 0, 3205,
  /* 47535 */ 0, 0, 1274, 1222, 0, 1255, 1277, 0, 1280, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 308, 33423, 0, 2134016, 312,
  /* 47558 */ 49811, 0, 0, 0, 0, 0, 0, 0, 0, 340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 340, 391, 393, 0, 0, 0, 1289, 0, 0,
  /* 47588 */ 0, 0, 0, 1289, 0, 0, 1171, 1289, 0, 1296, 554, 554, 554, 554, 1366, 554, 554, 554, 554, 554, 554, 554,
  /* 47610 */ 554, 1377, 1378, 554, 554, 554, 554, 1345, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1356, 554, 554,
  /* 47630 */ 554, 554, 1365, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1774, 1775, 554, 554, 554, 554,
  /* 47650 */ 554, 1301, 554, 554, 554, 554, 1307, 554, 554, 554, 554, 554, 554, 554, 554, 0, 2265, 0, 0, 575, 575, 575,
  /* 47672 */ 575, 554, 554, 1328, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1339, 554, 554, 554, 554, 554,
  /* 47692 */ 2583, 554, 554, 554, 2586, 554, 554, 554, 2591, 554, 554, 554, 554, 554, 1304, 554, 554, 554, 1313, 554,
  /* 47712 */ 554, 554, 554, 554, 554, 554, 1769, 554, 554, 554, 554, 554, 554, 554, 554, 0, 0, 0, 0, 575, 575, 2271,
  /* 47734 */ 575, 554, 1343, 554, 554, 554, 554, 554, 554, 554, 554, 1350, 554, 554, 554, 1357, 1359, 1381, 554, 1383,
  /* 47754 */ 932, 1385, 575, 575, 575, 575, 1391, 575, 575, 575, 575, 1397, 575, 575, 575, 575, 2629, 575, 2631, 575,
  /* 47774 */ 575, 575, 575, 2635, 575, 575, 575, 575, 575, 575, 2906, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 47795 */ 2908, 575, 575, 575, 575, 575, 575, 575, 575, 1442, 575, 575, 575, 1449, 1451, 575, 575, 575, 575, 575,
  /* 47815 */ 575, 575, 3268, 575, 575, 575, 575, 575, 575, 3274, 575, 599, 599, 599, 1483, 599, 599, 599, 599, 1489,
  /* 47835 */ 599, 599, 599, 599, 599, 599, 599, 1549, 599, 599, 599, 599, 599, 599, 599, 599, 599, 3566, 599, 599, 599,
  /* 47856 */ 599, 599, 575, 599, 599, 599, 1510, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1521, 599, 575, 554,
  /* 47877 */ 575, 599, 0, 0, 0, 0, 0, 0, 0, 3466, 3201, 0, 0, 0, 0, 2138112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1750,
  /* 47906 */ 0, 0, 0, 599, 599, 599, 1526, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1534, 599, 599, 599, 599, 599,
  /* 47928 */ 3165, 599, 599, 599, 599, 599, 575, 554, 599, 575, 554, 554, 575, 575, 599, 599, 0, 0, 3316, 0, 0, 599,
  /* 47950 */ 1541, 1543, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 3386, 599, 599, 599, 599,
  /* 47970 */ 599, 599, 1565, 599, 575, 0, 0, 554, 599, 599, 575, 554, 554, 554, 554, 554, 554, 1833, 1834, 554, 554,
  /* 47991 */ 554, 554, 554, 554, 554, 554, 0, 2266, 0, 0, 575, 575, 575, 575, 0, 0, 0, 1594, 0, 0, 0, 1600, 0, 0, 0,
  /* 48016 */ 1606, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1284, 0, 0, 0, 1673, 0, 0, 0, 0, 0, 0, 1680, 0, 0, 0, 0, 0, 0,
  /* 48047 */ 0, 0, 0, 69632, 73728, 167936, 0, 0, 0, 0, 1710, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2998, 1743,
  /* 48075 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1759, 0, 1761, 1735, 554, 554, 554, 554, 1766, 554, 554, 554, 554, 554, 554,
  /* 48100 */ 554, 554, 554, 554, 554, 2871, 554, 554, 554, 554, 554, 575, 575, 575, 1864, 575, 575, 575, 575, 1870,
  /* 48120 */ 575, 575, 575, 575, 575, 575, 575, 3371, 575, 575, 575, 575, 575, 575, 575, 599, 599, 599, 599, 599, 599,
  /* 48141 */ 599, 575, 0, 0, 554, 599, 599, 575, 554, 554, 554, 554, 554, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 48163 */ 575, 575, 575, 575, 575, 575, 575, 599, 575, 575, 575, 1881, 575, 575, 575, 575, 1885, 575, 575, 575, 575,
  /* 48184 */ 575, 575, 575, 3438, 575, 3440, 575, 575, 575, 575, 575, 599, 575, 575, 575, 1896, 575, 575, 575, 1901,
  /* 48204 */ 575, 575, 575, 575, 575, 575, 575, 575, 1445, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2297, 575, 575,
  /* 48225 */ 575, 575, 575, 575, 575, 575, 1927, 1928, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 48245 */ 1888, 575, 575, 575, 575, 575, 575, 26051, 0, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1958,
  /* 48266 */ 599, 599, 599, 599, 1964, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1975, 599, 599, 599, 599,
  /* 48286 */ 1979, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 1990, 599, 599, 599, 1995, 599, 599, 599, 599,
  /* 48306 */ 599, 599, 599, 599, 599, 599, 599, 599, 2371, 599, 599, 599, 599, 599, 2040, 2041, 554, 2043, 554, 554,
  /* 48326 */ 575, 2047, 575, 575, 599, 2051, 599, 599, 0, 0, 0, 3399, 0, 0, 3402, 0, 0, 0, 0, 3201, 0, 0, 0, 2107,
  /* 48350 */ 2108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2526, 0, 0, 0, 0, 2133, 2134, 0, 0, 0, 0, 0, 2140, 0, 0, 0,
  /* 48380 */ 0, 0, 0, 0, 1293, 0, 0, 0, 0, 0, 0, 554, 554, 3477, 554, 554, 554, 554, 3482, 554, 554, 2201, 554, 554,
  /* 48404 */ 2205, 554, 554, 554, 2209, 554, 554, 554, 554, 554, 554, 554, 554, 913, 554, 554, 554, 554, 554, 575, 575,
  /* 48425 */ 554, 554, 2218, 554, 554, 2221, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 3060, 554, 554, 554,
  /* 48445 */ 554, 554, 575, 575, 575, 2292, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2301, 575, 575, 575, 575,
  /* 48466 */ 2641, 575, 575, 575, 575, 575, 575, 575, 575, 2649, 575, 575, 575, 575, 952, 575, 575, 575, 575, 575, 575,
  /* 48487 */ 575, 575, 575, 575, 575, 1455, 575, 575, 1459, 575, 575, 2304, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 48507 */ 575, 575, 575, 575, 575, 575, 1936, 575, 575, 575, 575, 599, 2377, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 48528 */ 599, 599, 2386, 599, 599, 2389, 599, 599, 2417, 599, 599, 599, 2420, 599, 599, 599, 599, 2425, 599, 599,
  /* 48548 */ 599, 599, 599, 599, 2718, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2955, 599, 599, 599, 599, 599, 599,
  /* 48569 */ 0, 2452, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2462, 0, 0, 0, 0, 1120, 1252, 0, 0, 0, 0, 0, 0, 1259, 0, 0, 0, 0,
  /* 48599 */ 757, 1206, 0, 0, 0, 0, 1210, 0, 0, 0, 0, 0, 0, 0, 2138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1620, 0, 0, 0, 0, 0, 0,
  /* 48630 */ 0, 0, 0, 2543, 0, 0, 0, 0, 0, 0, 554, 554, 2550, 554, 554, 554, 554, 554, 554, 3247, 554, 554, 554, 554,
  /* 48654 */ 554, 554, 554, 554, 575, 2578, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2588, 554, 554, 554, 554, 554,
  /* 48675 */ 554, 554, 3237, 554, 554, 554, 554, 554, 554, 554, 554, 0, 0, 0, 0, 575, 2270, 575, 575, 575, 2639, 575,
  /* 48697 */ 2640, 575, 575, 575, 575, 575, 575, 575, 575, 2648, 575, 575, 2652, 0, 599, 599, 2676, 599, 599, 599, 599,
  /* 48718 */ 599, 599, 599, 599, 599, 599, 2683, 599, 575, 554, 575, 599, 0, 0, 0, 3464, 0, 0, 0, 0, 3201, 0, 0, 0, 0,
  /* 48743 */ 3141632, 0, 0, 0, 0, 0, 0, 0, 2204365, 2204365, 0, 0, 0, 0, 1661, 0, 1663, 0, 0, 0, 1667, 0, 0, 0, 1671,
  /* 48768 */ 0, 599, 599, 599, 2701, 599, 599, 2703, 599, 2704, 599, 599, 599, 599, 599, 599, 599, 1550, 599, 599, 599,
  /* 48789 */ 599, 599, 599, 599, 599, 3303, 599, 599, 599, 599, 599, 599, 599, 599, 2712, 599, 599, 2716, 599, 599,
  /* 48809 */ 599, 599, 599, 599, 599, 599, 599, 599, 599, 2385, 599, 599, 599, 599, 599, 2727, 599, 599, 599, 599, 599,
  /* 48830 */ 599, 599, 599, 599, 599, 599, 599, 599, 599, 2412, 599, 599, 599, 599, 2737, 554, 599, 599, 575, 554, 554,
  /* 48851 */ 554, 554, 575, 575, 575, 575, 599, 599, 599, 599, 1584, 0, 0, 2803, 0, 2805, 0, 0, 0, 0, 2810, 0, 2812, 0,
  /* 48875 */ 0, 0, 0, 0, 2533, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2102, 0, 0, 0, 0, 554, 554, 554, 554, 2845, 554, 554,
  /* 48903 */ 554, 2848, 554, 554, 554, 554, 554, 554, 554, 554, 2600, 554, 554, 554, 554, 554, 554, 554, 554, 2264, 0,
  /* 48924 */ 0, 0, 575, 575, 575, 575, 575, 575, 2892, 575, 575, 575, 2895, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 48945 */ 575, 1446, 575, 575, 1453, 575, 575, 575, 575, 575, 575, 0, 2351, 0, 0, 599, 599, 599, 599, 599, 599,
  /* 48966 */ 2679, 599, 599, 599, 599, 599, 599, 599, 599, 3565, 599, 3567, 599, 599, 3569, 599, 575, 575, 575, 575,
  /* 48986 */ 2905, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2283, 575, 2285, 575, 575, 599, 599,
  /* 49006 */ 2940, 599, 599, 599, 2943, 599, 599, 599, 599, 599, 599, 599, 599, 599, 3383, 599, 599, 599, 599, 599,
  /* 49026 */ 599, 599, 599, 599, 2953, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2707, 599, 599, 599,
  /* 49047 */ 599, 0, 0, 3190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2539, 0, 0, 0, 3220, 3221, 0, 0, 0, 0, 554, 554,
  /* 49076 */ 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 575, 575, 575, 3231, 554, 554, 554,
  /* 49097 */ 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 3241, 3276, 575, 575, 575, 575, 575, 575, 575, 599,
  /* 49118 */ 599, 599, 599, 599, 599, 599, 599, 3452, 599, 599, 599, 599, 599, 599, 599, 599, 3286, 599, 599, 599, 599,
  /* 49139 */ 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2723, 599, 599, 599, 599, 3296, 599, 599, 599, 599, 599,
  /* 49160 */ 599, 3302, 599, 3304, 599, 599, 599, 599, 599, 599, 599, 3291, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 49180 */ 599, 3453, 599, 3455, 599, 599, 599, 599, 554, 3346, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 49200 */ 554, 554, 554, 3355, 599, 599, 599, 599, 3378, 599, 599, 599, 3382, 599, 599, 599, 599, 599, 599, 599,
  /* 49220 */ 1967, 599, 599, 599, 599, 599, 599, 599, 599, 2014, 599, 599, 599, 2019, 599, 599, 599, 0, 0, 3574, 3575,
  /* 49241 */ 0, 0, 0, 0, 0, 0, 0, 554, 554, 554, 3585, 554, 554, 554, 554, 1785, 554, 554, 554, 554, 554, 554, 554,
  /* 49264 */ 554, 554, 554, 554, 1807, 554, 554, 554, 554, 575, 575, 575, 575, 3605, 599, 599, 599, 3609, 599, 599,
  /* 49284 */ 599, 599, 599, 599, 599, 1982, 599, 599, 599, 599, 599, 599, 599, 599, 2422, 599, 599, 599, 599, 599, 599,
  /* 49305 */ 599, 599, 3617, 575, 0, 0, 0, 0, 3620, 0, 3622, 0, 3623, 3624, 554, 554, 554, 554, 554, 554, 3424, 554,
  /* 49327 */ 554, 554, 554, 554, 554, 575, 575, 575, 575, 3494, 575, 575, 575, 575, 575, 575, 575, 575, 3637, 3638,
  /* 49347 */ 575, 599, 599, 599, 599, 599, 599, 599, 599, 599, 3644, 3645, 575, 599, 599, 599, 599, 0, 3694, 554, 3695,
  /* 49368 */ 575, 3696, 599, 3697, 0, 554, 575, 575, 575, 575, 2657, 575, 575, 575, 575, 2661, 575, 575, 575, 575, 575,
  /* 49389 */ 575, 0, 2350, 0, 0, 599, 599, 599, 599, 599, 599, 599, 2680, 599, 599, 599, 599, 599, 599, 599, 1060, 599,
  /* 49411 */ 599, 599, 599, 599, 986, 0, 0, 0, 0, 367, 368, 0, 0, 0, 0, 0, 0, 0, 374, 0, 298, 0, 0, 0, 311, 0, 0, 0, 0,
  /* 49440 */ 0, 0, 0, 311, 0, 0, 0, 416, 416, 1, 12290, 3, 78120, 78120, 298, 6, 6, 0, 0, 0, 0, 0, 0, 159744, 0, 0, 0,
  /* 49467 */ 0, 0, 0, 0, 0, 159744, 159744, 0, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744,
  /* 49484 */ 159744, 159744, 159744, 159744, 159744, 159744, 159744, 0, 0, 0, 0, 65536, 429, 0, 0, 0, 0, 0, 451, 0, 0,
  /* 49505 */ 0, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 571, 594, 571, 594, 487, 487, 487, 487,
  /* 49526 */ 487, 501, 0, 0, 501, 368, 368, 368, 523, 368, 368, 368, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487,
  /* 49548 */ 487, 487, 487, 487, 487, 487, 618, 618, 571, 618, 618, 618, 618, 618, 618, 618, 618, 618, 594, 618, 594,
  /* 49569 */ 571, 571, 594, 571, 571, 618, 594, 594, 594, 594, 594, 571, 594, 594, 594, 594, 618, 618, 1, 12290, 3,
  /* 49590 */ 78120, 78120, 298, 6, 6, 0, 0, 0, 0, 0, 2545, 0, 0, 0, 0, 554, 2549, 554, 554, 554, 554, 554, 554, 1383,
  /* 49614 */ 1851, 575, 575, 575, 575, 575, 575, 575, 575, 2633, 575, 575, 575, 575, 575, 575, 2638, 0, 0, 554, 599,
  /* 49635 */ 599, 575, 554, 554, 554, 922, 554, 575, 575, 575, 995, 575, 575, 575, 575, 0, 599, 599, 599, 599, 599,
  /* 49656 */ 599, 599, 1032, 599, 599, 599, 599, 599, 3300, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2946,
  /* 49676 */ 599, 599, 599, 599, 599, 0, 599, 599, 599, 1069, 599, 78120, 1100, 6, 0, 0, 0, 0, 0, 0, 0, 678, 0, 678, 0,
  /* 49701 */ 0, 0, 0, 847, 0, 0, 1219, 0, 0, 0, 0, 0, 0, 0, 1219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 554, 554, 554,
  /* 49731 */ 554, 554, 554, 554, 554, 554, 554, 554, 1382, 1383, 932, 575, 575, 575, 575, 575, 575, 575, 575, 1394,
  /* 49751 */ 575, 575, 575, 575, 575, 2278, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 1902, 575, 575, 575, 575,
  /* 49772 */ 575, 1403, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 3264, 599, 599, 599,
  /* 49793 */ 599, 1566, 575, 0, 0, 1313, 599, 1495, 1403, 554, 554, 554, 554, 554, 554, 2208, 554, 554, 554, 554, 554,
  /* 49814 */ 554, 554, 554, 554, 3059, 554, 554, 554, 554, 554, 554, 1589, 0, 0, 0, 1595, 0, 0, 0, 1601, 0, 0, 0, 1607,
  /* 49838 */ 0, 0, 0, 0, 1132, 0, 0, 0, 0, 0, 0, 0, 1139, 0, 0, 0, 0, 1, 12290, 3, 78120, 78120, 298, 6, 6, 0, 0, 0, 0,
  /* 49867 */ 0, 3223, 0, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 2200, 1641, 0, 0, 0, 0,
  /* 49890 */ 0, 0, 0, 0, 0, 1651, 0, 0, 0, 0, 0, 0, 1617, 1618, 0, 0, 0, 0, 0, 1624, 0, 0, 0, 0, 1754, 0, 0, 0, 0, 0,
  /* 49920 */ 0, 0, 0, 0, 0, 0, 0, 554, 576, 554, 576, 554, 1811, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 49943 */ 1822, 554, 554, 554, 554, 554, 554, 3592, 554, 575, 575, 575, 575, 575, 575, 575, 575, 3552, 575, 3554,
  /* 49963 */ 575, 575, 3556, 575, 1878, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 1891,
  /* 49983 */ 599, 599, 599, 599, 2010, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 2734, 599, 599, 599, 599,
  /* 50004 */ 2092, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3010, 0, 0, 2149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50036 */ 0, 2785, 0, 0, 575, 575, 2291, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2299, 575,
  /* 50058 */ 575, 575, 575, 2376, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 3459, 0,
  /* 50079 */ 2542, 0, 0, 0, 0, 0, 0, 0, 0, 554, 554, 554, 554, 554, 2553, 575, 575, 2615, 575, 575, 575, 575, 575, 575,
  /* 50103 */ 575, 575, 575, 575, 575, 575, 575, 2312, 575, 575, 575, 575, 2841, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 50124 */ 554, 554, 554, 554, 554, 554, 554, 2873, 554, 554, 554, 0, 0, 575, 575, 575, 2879, 575, 575, 575, 575,
  /* 50145 */ 575, 575, 2886, 575, 2888, 575, 575, 575, 575, 2669, 575, 575, 575, 575, 575, 575, 0, 2673, 0, 0, 0, 0, 0,
  /* 50168 */ 2977792, 0, 0, 2846720, 3182592, 2457600, 0, 2805760, 0, 0, 0, 0, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0,
  /* 50190 */ 0, 0, 0, 0, 2792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2752512, 0, 0, 0, 0, 0, 0, 0, 599, 599, 599, 2927, 599,
  /* 50218 */ 599, 599, 599, 599, 599, 2934, 599, 2936, 599, 575, 554, 575, 599, 0, 3462, 0, 0, 3465, 0, 0, 0, 3201, 0,
  /* 50241 */ 0, 0, 0, 3203072, 2691072, 0, 2764800, 0, 0, 0, 0, 0, 2953216, 0, 0, 0, 0, 1276, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50267 */ 0, 0, 0, 344, 0, 0, 0, 0, 2972, 554, 599, 599, 575, 554, 554, 575, 575, 599, 599, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50294 */ 3403, 3404, 0, 3201, 0, 3408, 554, 554, 554, 554, 3349, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 50315 */ 554, 3250, 554, 554, 554, 554, 575, 575, 575, 575, 3604, 575, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 50336 */ 599, 599, 2947, 2948, 599, 599, 599, 3616, 599, 575, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 554, 554, 554, 554,
  /* 50360 */ 554, 554, 887, 0, 3673, 0, 554, 554, 554, 554, 3677, 554, 575, 575, 575, 575, 3681, 575, 599, 599, 599,
  /* 50381 */ 599, 0, 0, 0, 0, 0, 0, 0, 0, 2450, 0, 0, 0, 316, 0, 316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 316, 599, 599, 599,
  /* 50410 */ 3685, 599, 0, 0, 0, 0, 554, 554, 554, 554, 575, 575, 575, 575, 575, 2307, 575, 575, 575, 575, 575, 575,
  /* 50432 */ 575, 575, 575, 575, 2898, 575, 575, 575, 575, 575, 65536, 379, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50458 */ 2068, 2069, 619, 619, 572, 619, 619, 619, 619, 619, 619, 619, 619, 619, 595, 619, 595, 572, 572, 595, 572,
  /* 50479 */ 572, 619, 595, 595, 595, 595, 595, 572, 595, 595, 595, 595, 619, 619, 1, 12290, 3, 78120, 78120, 298, 6,
  /* 50500 */ 6, 0, 0, 0, 0, 0, 2764, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2142, 0, 0, 0, 0, 575, 575, 1408, 575, 575, 575,
  /* 50529 */ 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 2348, 2673, 0, 0, 0, 599, 1542, 599, 599, 599, 599, 599,
  /* 50551 */ 599, 599, 599, 599, 599, 599, 599, 599, 599, 3170, 554, 599, 575, 554, 0, 0, 0, 1691, 0, 0, 0, 0, 0, 0, 0,
  /* 50576 */ 0, 0, 0, 0, 0, 1685, 0, 0, 0, 1892, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 50600 */ 575, 3275, 0, 370, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2117, 0, 0, 370, 0, 371, 0, 370, 0, 0, 0,
  /* 50629 */ 69632, 73728, 0, 0, 0, 0, 437, 65536, 0, 437, 437, 0, 437, 0, 371, 437, 0, 468, 0, 0, 0, 0, 0, 0, 1631, 0,
  /* 50655 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 110592, 0, 110592, 0, 0, 0, 518, 538, 538, 538, 538, 538, 538, 468, 468, 468,
  /* 50680 */ 468, 468, 538, 468, 468, 468, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 573, 596, 573,
  /* 50701 */ 596, 573, 573, 596, 573, 573, 620, 596, 596, 596, 596, 596, 573, 596, 596, 596, 596, 620, 620, 573, 620,
  /* 50722 */ 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 596, 635, 640, 640, 620, 646, 1, 12290, 3, 78120, 78120,
  /* 50743 */ 298, 6, 6, 0, 0, 0, 0, 0, 2777, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1722, 0, 0, 0, 0, 0, 0, 554, 599, 599,
  /* 50773 */ 575, 554, 554, 918, 554, 554, 575, 575, 991, 575, 575, 575, 575, 1912, 1913, 575, 575, 575, 575, 575, 575,
  /* 50794 */ 575, 575, 575, 575, 575, 26051, 1383, 1006, 599, 599, 0, 599, 599, 1065, 599, 599, 78120, 1100, 6, 0, 0,
  /* 50815 */ 0, 0, 0, 0, 0, 687, 688, 0, 0, 0, 0, 0, 0, 0, 0, 3004, 0, 0, 0, 0, 0, 0, 0, 0, 3030, 0, 3031, 0, 0, 0, 0,
  /* 50846 */ 0, 0, 554, 2188, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1308, 554, 554, 554,
  /* 50867 */ 554, 554, 554, 554, 2666, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 0, 0, 0, 0, 0, 0, 1647, 0, 0,
  /* 50891 */ 1650, 0, 1652, 0, 0, 0, 0, 599, 599, 2700, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 50913 */ 599, 3293, 599, 599, 599, 599, 621, 621, 574, 621, 621, 621, 621, 621, 621, 621, 621, 621, 597, 621, 597,
  /* 50934 */ 574, 574, 597, 574, 574, 621, 597, 597, 597, 597, 597, 574, 597, 597, 597, 597, 621, 621, 1, 12290, 3,
  /* 50955 */ 78120, 78120, 298, 6, 6, 0, 0, 0, 0, 0, 2806, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2129, 0, 0, 0, 0, 0, 0,
  /* 50984 */ 817, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2825, 0, 0, 0, 860, 0, 0, 0, 0, 0, 0, 0, 554, 554, 554, 554,
  /* 51014 */ 554, 883, 554, 554, 554, 554, 1798, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1821, 554, 554,
  /* 51035 */ 554, 554, 0, 1158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 374, 374, 0, 0, 0, 322, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 51066 */ 0, 0, 2920448, 0, 0, 1185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3022, 1201, 0, 0, 0, 0, 0, 0, 0,
  /* 51096 */ 0, 0, 1211, 0, 0, 0, 0, 0, 0, 1679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1721, 0, 0, 0, 0, 0, 1342, 554, 554,
  /* 51125 */ 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 1334, 554, 554, 554, 554, 554, 554, 554,
  /* 51146 */ 599, 599, 1525, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 3385, 599, 599, 599, 599,
  /* 51167 */ 0, 1591, 0, 0, 0, 1597, 0, 0, 0, 1603, 0, 0, 0, 0, 0, 0, 0, 1662, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2131, 0,
  /* 51197 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3036, 599, 599, 599, 2392, 599, 599, 599, 599, 599, 599, 599,
  /* 51223 */ 599, 599, 599, 599, 599, 3394, 554, 554, 575, 575, 599, 2686, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 51244 */ 599, 599, 599, 599, 599, 3568, 599, 599, 3570, 575, 664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 51270 */ 3206, 0, 0, 760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188831, 0, 0, 554, 599, 599, 575, 1085, 554,
  /* 51298 */ 554, 923, 554, 1090, 575, 575, 996, 575, 575, 575, 575, 0, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 51319 */ 599, 3384, 599, 599, 599, 599, 599, 0, 1095, 599, 599, 1070, 599, 78120, 1100, 6, 0, 0, 0, 0, 0, 0, 0,
  /* 51342 */ 703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1704, 0, 0, 0, 0, 0, 0, 575, 1462, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 51369 */ 575, 26051, 1383, 1006, 599, 599, 599, 599, 599, 3379, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599,
  /* 51389 */ 2411, 599, 599, 599, 599, 599, 554, 554, 554, 554, 1814, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 51410 */ 554, 1370, 554, 554, 554, 554, 554, 554, 554, 1908, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 51431 */ 575, 575, 575, 575, 3376, 554, 554, 554, 554, 2582, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 51452 */ 1770, 554, 554, 554, 554, 554, 554, 554, 554, 3053, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
  /* 51473 */ 554, 554, 554, 1802, 1803, 1805, 554, 554, 554, 554, 554, 3093, 575, 575, 575, 575, 575, 575, 575, 575,
  /* 51493 */ 575, 575, 575, 575, 575, 575, 575, 2899, 2900, 575, 575, 575, 3134, 599, 599, 599, 599, 599, 599, 599,
  /* 51513 */ 599, 599, 599, 599, 599, 599, 599, 599, 3571, 65536, 0, 0, 0, 0, 0, 447, 0, 0, 0, 0, 0, 0, 0, 0, 0, 356,
  /* 51539 */ 0, 414, 0, 0, 0, 0, 1159168, 0, 0, 0, 0, 1159168, 0, 0, 0, 0, 0, 0, 0, 0, 1159168, 0, 0, 0, 0, 0, 0,
  /* 51566 */ 1159168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1159168, 0, 0, 0, 0, 1159168, 0, 0, 0, 1159168, 1159168, 0,
  /* 51591 */ 0, 1159168, 0, 1159168, 0, 0, 0, 1159168, 1159593, 1159593, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 51616 */ 229999, 0, 1159168, 0, 0, 1159168, 0, 0, 1159168, 1159168, 0, 0, 0, 0, 0, 0, 1159793, 1159793, 1159168,
  /* 51635 */ 1159793, 1159793, 1159793, 1159793, 1159793, 1159793, 1159793, 1159793, 0, 1159168, 1159793, 1159168,
  /* 51647 */ 1159168, 1159793, 1159793, 1, 12290, 3, 0, 0, 2183168, 6, 4284416, 0, 0, 0, 0, 0, 2819, 0, 0, 0, 0, 0, 0,
  /* 51670 */ 0, 0, 0, 0, 0, 2475, 0, 0, 0, 0, 0, 307200, 0, 308, 309, 0, 2134016, 312, 313, 0, 0, 0, 0, 0, 0, 0, 749,
  /* 51697 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2992, 0, 0, 0, 2996, 0, 0, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 0,
  /* 51720 */ 0, 4284416, 0, 0, 0, 0, 0, 0, 0, 752, 0, 817, 0, 0, 0, 0, 0, 0, 3141632, 2125824, 2125824, 2125824,
  /* 51742 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 2125824, 2125824, 2125824,
  /* 51755 */ 2125824, 2125824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2494464, 2179072, 2478080, 2125824, 2125824, 2125824,
  /* 51773 */ 2125824, 2478080, 2125824, 2125824, 2125824, 2125824, 2183168, 4284416, 0, 0, 0, 0, 1222, 0, 0, 0, 0, 0,
  /* 51791 */ 0, 0, 0, 0, 0, 0, 374, 309, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 469, 1171944, 1171944, 1171944,
  /* 51816 */ 1171944, 1171944, 1171944, 1171944, 1171944, 1171944, 1171944, 1171944, 1171944, 1171944, 1171944,
  /* 51827 */ 1171944, 1171944, 469, 469, 1171944, 469, 469, 469, 469, 469, 469, 469, 469, 1171995, 1171995, 1171995,
  /* 51843 */ 1171995, 1171995, 1171995, 1171995, 1171995, 1171995, 1171995, 1171995, 1171995, 1171995, 1171995,
  /* 51854 */ 1171995, 0, 0, 0, 0, 0, 0, 1171944, 0, 0, 0, 0, 0, 469, 0, 0, 1171944, 1171944, 0, 1171944, 1171995,
  /* 51875 */ 1171995, 1171944, 1171995, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 0, 0, 3027, 0, 0, 0, 0, 0, 3032, 0,
  /* 51899 */ 0, 3013, 0, 1167360, 0, 2179072, 2125824, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 51913 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2482176, 2486272, 2125824, 2125824, 2125824,
  /* 51924 */ 2125824, 2125824, 2125824, 2543616, 2125824, 2125824, 2125824, 426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1184214, 0,
  /* 51943 */ 1183744, 0, 0, 0, 0, 1237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 360, 361, 362, 0, 0, 0, 1183744, 0, 0,
  /* 51969 */ 1183744, 1183744, 1183744, 0, 1183744, 1183744, 0, 1183744, 0, 1183744, 1183744, 1183744, 1183744,
  /* 51982 */ 1183744, 0, 1184214, 1184214, 0, 1184214, 1184214, 1184214, 1184214, 1184214, 1184214, 1184214, 1184214,
  /* 51995 */ 1184214, 1184214, 1184214, 1184214, 1184214, 1184214, 1184214, 1184214, 0, 0, 0, 0, 0, 0, 1183744, 0, 0,
  /* 52012 */ 0, 0, 0, 0, 1183744, 470, 1183744, 1183744, 1183744, 1183744, 1184214, 1184214, 1183744, 1184214, 1,
  /* 52027 */ 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 0, 0, 3042, 0, 0, 0, 0, 0, 0, 554, 554, 554, 554, 3479, 554, 554,
  /* 52053 */ 554, 554, 554, 3141632, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 52066 */ 2125824, 0, 0, 1005, 2125824, 2125824, 2125824, 2125824, 2551808, 2125824, 2125824, 2125824, 2125824,
  /* 52079 */ 2125824, 2125824, 2125824, 2625536, 2125824, 2650112, 2125824, 2125824, 2670592, 2125824, 2125824,
  /* 52090 */ 2125824, 0, 110592, 0, 110592, 110592, 110592, 110592, 0, 110592, 110592, 110592, 110592, 110592, 110592,
  /* 52105 */ 110592, 110592, 110592, 110592, 110592, 110592, 110592, 110592, 110592, 110592, 0, 0, 0, 0, 0, 0, 110592,
  /* 52122 */ 0, 0, 110592, 0, 0, 0, 0, 0, 110592, 110592, 110592, 110592, 110592, 0, 0, 0, 0, 0, 2183168, 0, 0, 0, 0,
  /* 52145 */ 0, 0, 0, 1664, 0, 0, 0, 0, 0, 0, 0, 1672, 2125824, 3076096, 0, 2510848, 2519040, 0, 0, 0, 0, 2899968, 0,
  /* 52168 */ 0, 0, 0, 0, 0, 0, 1693, 0, 0, 1695, 0, 0, 0, 0, 1697, 3162112, 2125824, 2965504, 2965504, 2965504, 0, 0,
  /* 52190 */ 0, 0, 0, 2768896, 2904064, 0, 0, 0, 0, 0, 3321, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158, 0, 0, 0, 0
];

XQueryParser.EXPECTED =
[
  /*    0 */ 1160, 1167, 1168, 1167, 1163, 1172, 1176, 1180, 1184, 1188, 1943, 2541, 1944, 1192, 2895, 1943, 1943, 2139,
  /*   18 */ 1320, 2676, 1201, 1943, 1210, 1645, 1217, 1943, 1507, 3224, 3224, 1222, 1301, 2582, 1233, 1268, 1228, 1943,
  /*   36 */ 1943, 1206, 1204, 1943, 3222, 3224, 3224, 1300, 1301, 1301, 1232, 1233, 1234, 1238, 1242, 1943, 2112, 1217,
  /*   54 */ 1943, 1247, 3224, 1248, 1301, 1301, 1253, 1233, 1233, 1307, 1260, 1943, 1218, 1943, 1325, 3224, 1298, 1301,
  /*   72 */ 1301, 1266, 1233, 1233, 1272, 1943, 3036, 1290, 3224, 1249, 1301, 1224, 1233, 1256, 1943, 3036, 1291, 3225,
  /*   90 */ 1301, 1266, 2584, 1282, 1204, 3223, 1318, 1223, 1233, 1288, 1295, 3226, 1305, 1311, 2670, 1305, 1315, 2673,
  /*  108 */ 1324, 1329, 2579, 1335, 1333, 1339, 1343, 1347, 1351, 1357, 1358, 1355, 1362, 1366, 1370, 1374, 1378, 1382,
  /*  126 */ 1943, 2517, 1943, 2256, 1954, 1943, 1943, 1943, 1943, 3109, 1386, 1943, 1943, 1943, 1391, 1943, 1943, 1943,
  /*  144 */ 1943, 1943, 1943, 1943, 1943, 3102, 1943, 1943, 1943, 1943, 1396, 1943, 1943, 1943, 1943, 1943, 1943, 1943,
  /*  162 */ 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943,
  /*  180 */ 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943,
  /*  198 */ 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943,
  /*  216 */ 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1401, 1943,
  /*  234 */ 2310, 1405, 1411, 1415, 1419, 1423, 1427, 1975, 1943, 1943, 2024, 1431, 1435, 2744, 2779, 1442, 1443, 1558,
  /*  252 */ 1447, 1943, 1943, 1262, 1459, 1463, 2861, 1506, 2161, 1468, 1943, 1752, 1943, 1407, 1478, 1943, 1943, 1262,
  /*  270 */ 2969, 1482, 1486, 1943, 1943, 1499, 1943, 2161, 1505, 1943, 1464, 1943, 1511, 1943, 1852, 2088, 2354, 1516,
  /*  288 */ 1943, 2162, 1521, 1943, 1760, 1943, 1943, 3042, 2804, 1943, 1195, 2971, 1526, 1943, 2162, 2973, 1943, 2444,
  /*  306 */ 1943, 1397, 3266, 1943, 1532, 1908, 1943, 1969, 1943, 1969, 1943, 2773, 1943, 1536, 1540, 1470, 1943, 1472,
  /*  324 */ 2019, 2805, 1546, 1787, 1786, 1542, 1943, 1550, 1555, 3134, 2893, 1562, 1568, 2465, 3087, 1578, 1582, 1592,
  /*  342 */ 1596, 1571, 1585, 1600, 1604, 1943, 1920, 1610, 1943, 1616, 1624, 1630, 1633, 1636, 1639, 3279, 1728, 3172,
  /*  360 */ 1643, 1649, 1653, 2844, 1660, 1664, 1665, 1850, 3268, 1943, 1669, 1675, 1679, 1683, 2007, 1687, 1943, 1692,
  /*  378 */ 1943, 2858, 1943, 2770, 1800, 1698, 1943, 1703, 1707, 1711, 1606, 1943, 1943, 2038, 1943, 1943, 1718, 1943,
  /*  396 */ 1612, 1943, 1727, 1943, 1733, 2031, 1737, 1743, 1943, 1799, 1764, 1943, 2387, 1770, 1943, 3170, 3257, 1943,
  /*  414 */ 1776, 1780, 2851, 1943, 1522, 1792, 1943, 2850, 1798, 1517, 2890, 3115, 1804, 1821, 1943, 1626, 1943, 1626,
  /*  432 */ 1943, 2077, 2125, 1808, 2841, 2806, 2148, 2146, 2812, 1812, 1818, 1826, 1825, 2737, 2359, 1830, 1834, 1838,
  /*  450 */ 1847, 2181, 1856, 2208, 1860, 1864, 1868, 1588, 1872, 1876, 1880, 1884, 1888, 1892, 1943, 1897, 2311, 1905,
  /*  468 */ 1924, 1928, 1932, 1936, 1938, 1943, 1942, 1948, 2014, 1952, 1958, 1962, 1966, 1979, 1980, 1943, 2731, 1943,
  /*  486 */ 1984, 1991, 2160, 2000, 2004, 2011, 1943, 2928, 1943, 1766, 2018, 1943, 1943, 2023, 2054, 2028, 2160, 2035,
  /*  504 */ 2432, 2042, 1943, 2908, 2048, 1943, 2918, 2261, 1943, 1943, 2421, 2053, 2273, 2107, 2058, 2500, 1943, 1943,
  /*  522 */ 2064, 1943, 1943, 2074, 1943, 1943, 2838, 2081, 2085, 1972, 1551, 2093, 1943, 3219, 1943, 1943, 2092, 1943,
  /*  540 */ 2656, 2098, 2716, 2102, 2106, 1243, 2111, 1243, 2111, 2305, 2116, 2160, 2975, 1943, 1901, 1899, 1943, 2120,
  /*  558 */ 1943, 1900, 1899, 2974, 2124, 2667, 1729, 2187, 2576, 1618, 3052, 2689, 1620, 2129, 2687, 2713, 2133, 2143,
  /*  576 */ 3055, 2153, 2157, 1943, 1943, 3097, 2829, 2751, 2494, 2166, 2170, 2174, 2178, 1943, 2185, 1772, 1656, 2191,
  /*  594 */ 2195, 2199, 2205, 2212, 2213, 1943, 1688, 2217, 1987, 2222, 2226, 2235, 2247, 1749, 1943, 1739, 1943, 1788,
  /*  612 */ 2254, 1943, 1943, 2260, 1987, 2266, 2270, 2277, 1943, 2872, 1943, 1943, 2281, 1943, 1799, 2287, 1943, 1943,
  /*  630 */ 2293, 1986, 2044, 2300, 2304, 1893, 2309, 1943, 2691, 2315, 1943, 2831, 1943, 1943, 3049, 1994, 2320, 2324,
  /*  648 */ 1943, 2330, 1943, 1996, 1943, 1943, 2925, 1943, 2335, 2345, 2349, 1943, 2353, 1943, 2358, 1943, 2358, 1699,
  /*  666 */ 2790, 2363, 1284, 1943, 3040, 3038, 1512, 2372, 2376, 1914, 3038, 1283, 2386, 2754, 1495, 1197, 1489, 2368,
  /*  684 */ 2382, 2366, 2391, 2379, 1453, 1755, 2395, 1455, 1758, 1943, 1943, 1943, 1943, 1911, 1943, 2966, 2402, 2406,
  /*  702 */ 2410, 2414, 2418, 1943, 1783, 3163, 3100, 3081, 2289, 2427, 2431, 2436, 2437, 2441, 1943, 2452, 1213, 2458,
  /*  720 */ 2462, 2469, 2473, 1528, 1943, 2316, 2478, 1943, 2485, 3213, 1943, 2448, 1213, 2458, 2231, 3275, 1943, 2454,
  /*  738 */ 1943, 1943, 2238, 1943, 1943, 2241, 2487, 1943, 2447, 1212, 3137, 2491, 2498, 1943, 2504, 1943, 1387, 2510,
  /*  756 */ 1943, 1392, 1919, 2515, 3094, 2521, 2229, 3260, 1943, 2525, 1943, 2049, 1943, 1943, 1917, 2326, 3263, 2531,
  /*  774 */ 2535, 3278, 2539, 1943, 2545, 1943, 2545, 2590, 2551, 3179, 2262, 1943, 2555, 2262, 2951, 2562, 2566, 2573,
  /*  792 */ 2094, 1943, 2588, 2594, 2598, 2243, 2599, 2935, 2606, 1723, 2603, 1714, 1721, 1746, 2070, 2610, 2067, 2614,
  /*  810 */ 2618, 2622, 1943, 2283, 2628, 2634, 2638, 2642, 2646, 2650, 2654, 1943, 2726, 2660, 2664, 2527, 1564, 2680,
  /*  828 */ 2684, 2695, 2696, 2700, 1943, 2706, 2763, 2710, 2720, 2398, 3236, 2218, 2730, 1943, 2735, 1943, 2776, 2741,
  /*  846 */ 1943, 2558, 2763, 2656, 2822, 2748, 1943, 2480, 2796, 1943, 2630, 1943, 1943, 2481, 2758, 1943, 2557, 2762,
  /*  864 */ 2767, 2783, 1841, 1943, 2787, 1943, 1943, 2794, 1943, 1943, 2801, 2810, 2702, 2816, 2820, 2826, 1943, 2835,
  /*  882 */ 1943, 2479, 2848, 1943, 2624, 3233, 2723, 2855, 2865, 1943, 2869, 1943, 2869, 1943, 2879, 2883, 2887, 2899,
  /*  900 */ 2474, 1943, 2906, 2474, 2912, 2916, 2922, 2944, 2331, 1943, 2932, 2939, 2943, 1843, 2902, 2948, 1278, 2955,
  /*  918 */ 1275, 1438, 2959, 2963, 2979, 2983, 2987, 2991, 1943, 1943, 1943, 2149, 2995, 1574, 2999, 3003, 3007, 3011,
  /*  936 */ 3015, 1943, 3238, 3021, 2341, 3025, 3029, 3033, 3046, 3059, 3060, 3064, 1943, 3070, 3142, 3074, 1671, 3078,
  /*  954 */ 1943, 1943, 3085, 1943, 3091, 1943, 3066, 3106, 1943, 1814, 3142, 2875, 1694, 3113, 1943, 1943, 3119, 1943,
  /*  972 */ 2479, 3125, 1943, 2797, 3131, 1943, 1813, 3141, 3146, 2296, 3150, 1943, 1474, 1943, 1943, 1501, 1943, 1943,
  /*  990 */ 2569, 3155, 2547, 1492, 3161, 3167, 1943, 3121, 1943, 1943, 2136, 1943, 3151, 3176, 2060, 3183, 2506, 1943,
  /* 1008 */ 3127, 1943, 3127, 1943, 3127, 3017, 3187, 1794, 3194, 3193, 3191, 3194, 3198, 3202, 1943, 3157, 2201, 1943,
  /* 1026 */ 3206, 3210, 2249, 2423, 2250, 3216, 3230, 1450, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943,
  /* 1044 */ 1943, 1799, 1943, 1943, 3242, 3246, 3250, 3254, 3272, 1943, 1943, 1943, 2338, 2511, 1943, 1943, 1943, 1943,
  /* 1062 */ 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943,
  /* 1080 */ 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943,
  /* 1098 */ 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943,
  /* 1116 */ 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943,
  /* 1134 */ 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943,
  /* 1152 */ 1943, 1943, 1943, 1943, 1943, 1943, 1943, 3283, 3355, 5835, 3284, 3309, 3295, 3309, 3292, 3309, 3309, 3309,
  /* 1170 */ 3309, 3288, 3304, 3302, 3308, 3298, 3313, 3325, 3326, 3317, 3318, 3322, 3330, 3334, 3338, 3342, 3346, 3349,
  /* 1188 */ 3353, 3388, 4422, 3467, 3858, 3359, 5013, 4998, 3440, 4998, 4998, 4004, 4998, 3385, 3395, 3466, 4998, 3446,
  /* 1206 */ 4998, 4998, 3419, 3436, 4998, 5224, 4998, 4998, 3405, 5156, 4998, 3447, 4998, 4998, 4998, 3446, 3545, 3890,
  /* 1224 */ 3890, 3890, 3370, 3370, 3501, 3409, 3414, 3465, 3453, 3370, 3370, 3370, 3370, 3459, 3487, 3493, 3412, 3415,
  /* 1242 */ 3464, 4998, 4998, 4998, 3514, 4313, 3885, 3885, 3885, 3890, 3890, 3890, 3890, 3546, 3370, 3370, 3498, 3524,
  /* 1260 */ 3494, 3476, 4998, 4998, 3441, 4998, 3890, 3893, 3370, 3370, 3372, 3381, 3486, 3492, 3525, 4998, 3448, 4998,
  /* 1278 */ 4027, 4998, 4026, 5706, 3523, 4998, 4998, 4998, 3534, 4967, 3519, 3524, 4998, 4998, 3883, 3885, 3885, 3533,
  /* 1296 */ 4998, 4998, 3885, 3885, 4314, 3890, 3890, 3890, 3890, 3890, 3891, 3370, 3370, 3460, 3488, 3370, 3543, 3551,
  /* 1314 */ 5013, 3557, 5013, 3882, 3885, 3886, 3890, 3890, 3365, 3370, 3373, 4998, 3884, 3885, 3885, 3889, 3890, 3370,
  /* 1332 */ 3371, 3885, 3889, 3892, 3370, 3504, 4311, 3374, 3886, 3546, 3372, 4312, 3566, 3455, 3564, 3570, 3581, 3583,
  /* 1350 */ 3585, 4260, 3589, 3599, 3603, 3611, 3615, 3621, 3621, 3621, 3621, 3607, 3621, 3595, 3619, 3592, 3625, 3629,
  /* 1368 */ 3633, 3637, 3641, 3645, 3649, 3652, 3655, 3659, 3663, 3667, 3671, 3675, 3679, 3683, 3687, 3692, 3698, 4573,
  /* 1386 */ 5320, 4998, 4998, 4998, 3708, 3376, 4998, 4998, 4998, 3709, 5189, 4998, 4998, 4998, 3855, 3469, 3713, 4998,
  /* 1404 */ 4397, 4432, 3719, 4998, 4998, 3897, 5519, 4998, 5369, 3727, 3736, 3743, 3750, 3754, 3759, 3758, 3759, 3763,
  /* 1422 */ 3766, 3770, 3774, 3777, 3780, 3784, 3788, 3792, 3796, 6019, 4998, 4916, 3811, 3818, 4998, 4356, 4998, 3449,
  /* 1440 */ 3425, 4288, 4756, 4998, 4998, 5363, 4998, 3729, 5917, 3840, 4998, 3471, 4998, 4998, 3506, 4998, 4566, 4565,
  /* 1458 */ 4998, 4915, 4998, 5676, 4632, 4504, 4998, 4998, 4998, 3856, 3876, 3881, 4998, 4998, 3949, 3995, 4998, 4998,
  /* 1476 */ 3987, 5936, 4559, 4998, 5188, 3926, 4505, 4998, 4998, 4908, 5503, 3907, 3911, 4998, 3509, 4006, 4998, 3511,
  /* 1494 */ 5817, 4015, 4998, 4998, 4967, 3917, 3910, 4998, 4998, 3988, 5937, 3919, 3912, 4998, 4998, 4998, 3882, 3925,
  /* 1512 */ 4998, 4998, 4998, 4192, 3933, 4998, 4998, 4998, 4258, 3937, 4998, 4998, 4998, 4280, 3943, 3921, 4998, 4998,
  /* 1530 */ 4117, 5174, 3947, 4998, 5003, 3953, 3440, 4998, 5003, 3967, 4138, 3979, 4998, 4998, 4140, 3508, 3441, 3975,
  /* 1548 */ 4405, 3508, 4239, 4998, 4998, 4998, 4615, 5000, 4781, 4763, 4998, 3831, 3835, 3836, 4998, 5614, 4998, 4998,
  /* 1566 */ 4168, 4169, 4594, 4998, 5132, 5616, 4239, 5132, 5616, 5732, 5743, 5613, 5616, 5818, 4998, 5613, 4998, 5819,
  /* 1584 */ 4998, 4595, 5132, 5616, 4998, 3845, 4998, 4373, 4998, 5820, 4998, 5615, 4594, 4998, 5820, 5132, 4808, 5131,
  /* 1602 */ 4809, 4541, 5130, 5131, 4998, 4998, 4199, 4205, 5855, 4070, 4998, 4998, 4222, 4210, 4998, 5476, 4998, 4998,
  /* 1620 */ 4240, 4998, 4686, 4998, 5473, 4013, 4998, 4998, 4265, 4251, 4020, 4031, 4035, 4036, 4040, 4044, 4048, 4048,
  /* 1638 */ 4051, 4064, 4063, 4054, 4057, 4998, 5941, 4998, 4998, 4347, 3402, 4243, 3361, 4075, 3799, 4865, 4998, 4084,
  /* 1656 */ 4998, 3849, 4998, 3997, 4273, 4099, 4969, 3508, 4107, 4998, 4998, 4108, 4998, 4998, 5753, 4998, 4998, 4402,
  /* 1674 */ 4998, 5502, 4998, 4242, 3360, 4144, 5003, 3800, 4150, 4008, 4998, 4821, 5822, 4166, 4998, 4998, 4998, 4814,
  /* 1692 */ 4839, 4174, 4998, 4998, 4403, 5014, 4069, 4998, 4998, 4998, 4837, 5502, 4998, 4998, 5928, 5222, 5003, 4185,
  /* 1710 */ 4190, 4009, 4771, 4660, 4998, 3868, 4998, 5017, 4838, 4200, 4206, 4998, 3869, 4998, 5489, 5318, 5015, 5853,
  /* 1728 */ 4068, 4998, 4998, 4998, 4655, 4998, 5502, 4998, 5451, 5930, 5616, 4998, 4998, 4494, 4857, 5714, 4217, 4272,
  /* 1746 */ 4998, 3870, 5016, 4998, 3871, 4852, 4998, 3875, 3880, 4998, 3507, 4998, 4567, 4565, 4998, 4998, 5152, 3932,
  /* 1764 */ 4215, 4270, 4998, 4998, 4529, 4534, 4216, 4271, 4998, 4998, 4542, 4739, 4221, 5450, 5762, 5003, 4185, 4226,
  /* 1782 */ 4232, 4998, 3970, 3974, 4998, 3993, 4998, 4998, 4998, 4493, 4247, 4251, 4998, 4998, 4573, 4998, 4308, 4998,
  /* 1800 */ 4998, 4998, 4838, 5854, 4658, 5910, 4185, 4287, 4658, 5910, 4284, 3746, 4328, 4998, 4998, 4998, 4847, 4079,
  /* 1818 */ 4659, 4334, 5595, 3961, 4998, 4264, 4269, 4998, 5981, 4321, 4998, 4998, 4341, 4809, 4998, 4668, 4375, 4345,
  /* 1836 */ 5982, 4369, 4998, 5644, 5648, 4998, 4103, 4998, 4998, 5682, 4998, 4998, 5646, 3721, 4998, 4112, 4998, 4998,
  /* 1854 */ 4385, 4998, 3553, 4369, 3552, 4368, 4657, 3823, 3846, 4290, 4380, 3843, 3847, 4291, 4374, 3844, 4998, 5845,
  /* 1872 */ 3939, 4998, 4379, 3938, 3847, 4923, 3938, 4573, 4778, 3938, 4573, 4667, 4384, 4390, 4657, 4406, 4407, 3849,
  /* 1890 */ 4780, 4782, 4389, 4998, 4998, 4998, 4976, 4838, 4470, 4998, 4998, 4651, 4191, 4998, 4998, 4394, 4363, 3508,
  /* 1908 */ 4998, 4138, 4135, 4998, 3539, 3972, 4998, 3539, 4973, 4998, 3688, 5244, 4998, 4998, 4998, 5851, 4413, 4419,
  /* 1926 */ 3506, 4426, 4436, 4440, 4444, 4445, 4444, 4449, 4453, 4456, 4460, 4456, 4464, 4464, 4464, 4998, 4468, 4998,
  /* 1944 */ 4998, 4998, 4998, 3442, 4998, 5594, 4476, 4480, 3723, 5613, 4998, 4998, 4741, 4998, 4485, 4998, 5829, 5139,
  /* 1962 */ 4162, 5235, 4498, 4429, 4481, 4186, 4829, 4998, 4139, 4136, 4998, 3729, 3428, 4998, 3804, 3913, 4399, 5862,
  /* 1980 */ 4998, 4998, 5863, 4998, 3738, 4153, 4998, 4998, 4825, 3841, 4998, 4502, 4509, 3722, 4998, 4146, 4998, 4998,
  /* 1998 */ 5090, 5094, 3814, 4998, 3715, 5881, 4998, 5929, 3508, 4998, 4161, 4998, 4280, 4521, 4525, 4070, 4998, 4194,
  /* 2016 */ 4998, 4403, 4539, 4998, 4998, 4998, 5188, 4546, 4998, 4998, 4998, 5211, 4502, 4401, 4100, 5763, 5004, 4998,
  /* 2034 */ 3728, 4558, 5013, 4572, 4998, 4198, 4204, 4070, 4800, 4579, 4998, 4998, 4945, 4517, 4578, 4998, 4998, 4998,
  /* 2052 */ 5254, 4998, 5465, 4153, 4998, 4998, 4872, 4592, 4998, 4998, 4963, 3947, 4998, 5300, 4600, 4309, 5488, 5339,
  /* 2070 */ 3869, 5486, 4309, 3868, 4998, 5301, 4601, 4998, 4258, 4895, 4277, 4646, 4606, 4998, 4211, 5201, 4610, 5616,
  /* 2088 */ 4998, 4310, 3574, 3902, 4615, 4619, 4998, 4998, 4998, 5286, 3739, 4998, 4193, 3538, 3533, 4998, 4998, 3513,
  /* 2106 */ 4640, 4998, 4998, 4998, 5294, 4641, 4998, 4998, 4998, 5382, 5465, 4479, 4998, 4354, 5592, 5466, 4998, 4238,
  /* 2124 */ 4645, 4998, 4998, 4998, 5502, 4515, 4683, 3441, 4238, 4684, 4998, 4514, 4683, 5934, 5945, 4998, 4313, 3885,
  /* 2142 */ 4314, 3441, 5614, 4512, 4998, 4318, 5146, 4998, 4998, 4998, 4846, 5375, 4385, 4240, 4664, 4385, 4672, 4080,
  /* 2160 */ 4241, 4998, 4998, 4998, 5151, 3931, 5309, 4694, 4698, 4701, 4705, 4709, 4712, 4714, 4718, 4720, 4724, 4729,
  /* 2178 */ 4727, 4735, 4731, 4998, 4351, 4657, 4360, 5719, 4678, 4998, 4998, 4995, 4998, 5735, 4517, 4745, 3508, 4879,
  /* 2196 */ 4998, 4754, 4760, 4769, 4775, 4998, 4998, 4998, 5968, 4786, 5755, 4254, 4998, 4367, 4998, 3843, 4793, 4998,
  /* 2214 */ 4998, 4805, 4998, 4819, 4998, 4998, 4998, 5531, 4659, 4574, 5122, 4683, 5275, 4909, 5486, 4998, 4408, 4998,
  /* 2232 */ 5895, 4747, 4998, 4059, 4765, 4833, 4998, 4487, 4491, 4998, 4489, 4998, 4998, 5268, 4998, 4156, 4843, 4998,
  /* 2250 */ 4998, 4998, 5991, 4998, 4856, 4893, 4998, 4998, 5011, 4998, 4815, 4580, 4998, 4998, 4998, 5266, 4659, 4998,
  /* 2268 */ 4861, 4683, 5275, 4869, 4877, 4998, 4502, 4511, 4611, 4884, 4998, 4998, 4157, 4900, 4904, 4998, 4998, 5082,
  /* 2286 */ 5439, 4902, 4906, 4998, 4998, 5088, 3982, 4998, 5720, 4580, 4998, 4509, 5013, 5329, 5276, 4870, 4878, 3536,
  /* 2304 */ 4913, 4998, 4998, 4998, 5591, 4920, 4998, 4998, 4998, 5593, 4998, 5095, 4998, 4998, 4998, 5660, 4944, 4516,
  /* 2322 */ 5584, 4869, 4877, 4552, 4998, 4998, 5123, 5735, 4952, 4998, 4998, 4998, 5664, 4998, 5916, 4580, 4998, 4560,
  /* 2340 */ 4998, 4998, 4562, 4086, 3849, 5889, 4998, 4998, 3512, 3903, 4869, 4960, 3537, 3560, 4907, 4998, 4998, 4132,
  /* 2358 */ 5092, 4998, 4998, 4998, 5695, 3903, 4869, 3535, 4998, 4566, 4998, 5994, 5025, 4998, 4998, 5993, 4998, 5654,
  /* 2376 */ 5276, 4871, 3537, 4998, 4568, 4998, 4564, 4998, 4998, 4567, 4980, 4998, 4998, 4998, 5713, 4566, 4998, 3508,
  /* 2394 */ 4564, 3506, 4998, 4567, 4568, 3708, 4998, 4563, 5494, 5021, 5023, 5669, 5029, 5033, 5034, 5035, 5039, 5043,
  /* 2412 */ 5052, 5047, 5050, 5056, 5060, 5065, 5061, 5067, 5071, 4998, 4585, 4998, 4998, 4948, 4998, 5100, 5106, 5110,
  /* 2430 */ 5832, 5208, 4998, 4998, 4998, 5738, 4549, 4998, 4998, 5120, 4998, 5127, 5137, 5138, 4998, 4588, 3921, 4998,
  /* 2448 */ 3534, 5194, 4998, 4998, 5143, 5763, 4998, 4998, 5215, 4998, 4336, 4998, 4998, 4581, 4561, 5161, 4746, 4998,
  /* 2466 */ 4596, 4998, 4238, 4838, 4025, 5170, 3482, 5667, 4998, 4998, 4998, 5746, 5181, 4998, 4998, 4998, 5810, 5571,
  /* 2484 */ 4302, 4838, 5180, 4998, 4998, 5219, 5187, 4998, 5896, 4748, 4998, 4658, 4658, 4690, 5228, 5233, 4998, 4998,
  /* 2502 */ 5302, 4602, 5239, 4309, 4998, 4998, 5314, 4998, 5243, 4998, 4998, 4998, 5816, 4310, 5123, 4998, 4998, 5366,
  /* 2520 */ 3707, 4998, 5249, 5157, 4472, 5567, 5245, 4998, 4998, 5443, 3703, 5249, 5157, 4330, 3575, 3574, 5895, 4998,
  /* 2538 */ 5229, 4337, 3701, 4998, 4998, 5495, 4998, 3732, 3701, 4998, 4998, 5522, 4078, 3468, 5258, 4472, 3575, 4998,
  /* 2556 */ 5266, 4998, 4998, 5550, 5556, 4181, 4998, 5250, 4335, 3576, 4192, 4998, 5280, 4998, 4683, 3989, 5938, 4998,
  /* 2574 */ 5940, 4492, 4998, 4683, 4997, 4998, 4312, 3885, 3890, 3366, 3370, 3370, 3370, 3518, 5292, 4998, 4983, 4998,
  /* 2592 */ 5940, 5763, 3468, 5298, 3577, 5288, 3955, 4998, 4998, 4492, 5306, 5327, 3867, 4998, 5487, 4998, 5486, 4309,
  /* 2610 */ 4404, 4837, 5488, 5486, 5489, 5334, 3868, 3869, 5338, 5343, 5345, 5349, 5350, 5354, 4998, 4998, 5560, 5621,
  /* 2628 */ 4998, 5360, 4998, 4998, 5577, 5573, 3430, 5373, 5379, 4235, 3432, 4324, 5386, 5392, 5396, 5399, 5402, 5406,
  /* 2646 */ 5410, 5412, 5416, 5420, 5423, 5428, 5429, 5427, 5428, 5433, 4998, 4998, 5592, 4998, 5149, 5735, 5321, 3963,
  /* 2664 */ 5627, 4647, 4998, 3854, 4998, 5613, 4998, 4312, 3885, 3887, 3890, 3547, 3370, 3372, 3380, 3888, 4998, 5448,
  /* 2682 */ 4998, 4563, 5455, 5459, 5463, 4998, 4684, 4998, 4513, 4998, 4998, 4974, 4939, 5470, 4998, 4998, 5484, 5493,
  /* 2700 */ 5499, 5507, 4998, 4998, 5605, 4180, 4880, 5552, 4998, 5150, 5330, 4998, 3857, 4998, 4685, 4998, 4241, 4998,
  /* 2718 */ 4998, 4288, 4998, 5444, 5633, 4998, 4749, 5084, 4998, 4749, 5437, 4309, 3865, 4998, 4998, 4998, 5870, 3807,
  /* 2736 */ 5536, 4998, 4998, 5644, 3398, 5540, 5546, 5545, 4998, 4789, 3841, 4169, 4914, 4998, 5541, 4998, 4796, 4682,
  /* 2754 */ 5288, 3470, 4987, 3391, 4998, 5583, 4635, 3841, 4181, 5319, 4748, 5511, 5516, 5588, 4998, 3857, 4998, 4810,
  /* 2772 */ 4178, 4998, 3855, 3959, 4998, 3806, 5535, 4998, 3822, 3472, 3827, 4998, 5566, 4564, 3534, 5558, 5599, 4301,
  /* 2790 */ 4998, 4827, 4998, 3528, 5559, 5600, 4302, 4998, 4998, 4998, 5921, 5560, 5601, 4137, 5188, 5616, 4998, 4998,
  /* 2808 */ 4998, 4318, 4101, 4636, 4998, 4998, 5694, 4894, 4863, 3692, 5512, 5915, 3856, 4998, 4998, 5565, 5634, 4565,
  /* 2826 */ 3505, 4998, 4102, 4998, 4835, 4998, 4998, 4975, 4940, 4998, 5561, 5622, 4998, 4838, 3857, 4998, 4295, 4306,
  /* 2844 */ 4998, 4091, 4998, 4095, 5579, 5612, 4998, 4998, 5714, 4298, 4308, 3692, 5626, 5590, 4998, 4838, 4173, 4998,
  /* 2862 */ 3853, 3422, 3862, 4998, 5631, 4998, 5449, 4998, 5638, 5642, 4998, 4888, 4892, 4998, 4503, 4998, 4988, 4998,
  /* 2880 */ 5638, 5642, 5190, 5262, 4998, 4894, 5607, 4746, 4666, 5706, 4998, 4896, 4278, 4998, 4001, 4998, 4998, 4162,
  /* 2898 */ 4998, 4998, 5652, 5449, 4998, 4947, 5684, 4023, 4998, 5746, 4998, 4998, 5737, 4799, 3375, 5261, 4998, 5947,
  /* 2916 */ 4998, 5323, 4998, 4998, 5739, 4801, 5102, 4946, 5928, 4998, 4956, 4907, 4998, 4530, 4535, 3508, 5683, 3376,
  /* 2934 */ 5262, 4947, 5313, 5282, 5319, 5673, 4237, 4998, 4228, 3359, 4998, 4947, 5658, 4998, 3479, 4998, 3730, 4998,
  /* 2952 */ 4982, 5736, 5272, 4998, 5688, 5975, 5101, 4998, 5699, 4998, 5705, 3447, 5480, 5102, 4998, 4993, 5008, 4915,
  /* 2970 */ 4998, 3573, 3901, 3508, 4998, 4998, 4998, 4415, 4645, 5711, 3694, 4998, 5963, 5718, 4998, 4115, 3694, 4998,
  /* 2988 */ 5479, 3730, 4289, 3731, 5690, 4288, 5692, 5724, 5728, 4998, 5166, 5164, 5750, 5759, 5769, 4926, 4932, 4929,
  /* 3006 */ 4935, 5773, 5777, 5781, 5785, 5789, 5796, 5792, 5800, 5804, 5808, 4998, 4998, 5764, 4079, 5322, 4998, 4998,
  /* 3024 */ 3529, 5527, 3730, 4998, 5842, 4998, 5608, 5816, 5826, 5707, 5388, 5839, 4998, 5014, 4998, 4998, 3539, 4006,
  /* 3042 */ 4998, 4998, 3857, 4998, 5849, 4998, 4563, 4998, 5072, 4309, 4998, 4515, 4998, 4514, 4512, 4998, 3962, 5859,
  /* 3060 */ 4998, 4998, 5867, 4559, 5874, 5878, 4998, 4998, 5811, 5904, 4998, 5521, 5887, 3439, 3842, 3848, 4998, 5893,
  /* 3078 */ 4873, 5356, 5115, 4998, 5080, 5678, 4071, 5900, 5939, 4998, 4998, 5821, 5132, 4998, 5812, 5905, 4998, 5096,
  /* 3096 */ 5195, 4998, 4676, 4309, 4998, 4335, 4998, 4998, 5190, 4998, 4998, 5909, 5003, 4998, 5113, 4998, 5883, 4621,
  /* 3114 */ 5914, 4998, 4998, 5940, 4998, 5921, 5937, 4998, 4998, 5952, 5957, 5923, 5939, 4998, 4998, 5969, 4998, 5937,
  /* 3132 */ 4999, 5001, 4998, 5133, 5616, 4998, 3841, 4998, 4409, 4079, 4998, 3510, 5816, 4749, 4561, 4016, 4998, 4989,
  /* 3150 */ 5116, 4998, 4998, 4998, 5951, 5000, 5002, 4998, 4998, 5987, 4998, 5381, 4988, 4998, 4998, 5993, 5076, 4873,
  /* 3168 */ 5927, 4998, 4998, 5176, 4998, 4998, 4554, 4998, 5956, 4998, 5002, 3574, 4836, 4564, 5319, 3985, 4998, 5374,
  /* 3186 */ 5961, 3526, 5816, 4087, 5961, 4998, 5967, 5973, 4998, 4998, 4998, 5967, 5973, 4998, 4998, 5765, 4998, 5979,
  /* 3204 */ 3538, 4989, 5986, 3693, 4998, 5764, 3527, 5527, 4289, 4998, 5186, 5185, 4998, 4610, 4998, 4998, 4625, 4629,
  /* 3222 */ 4998, 4310, 3885, 3885, 3885, 3885, 3888, 3890, 3469, 4998, 3468, 4998, 5190, 4636, 4103, 5526, 4998, 4998,
  /* 3240 */ 5617, 4848, 4998, 5701, 4750, 5737, 5998, 6007, 6001, 6011, 6014, 6014, 6014, 6014, 6018, 4998, 4838, 5558,
  /* 3258 */ 4122, 4279, 4998, 3927, 4129, 4998, 3948, 3974, 4998, 3960, 4998, 4998, 4121, 4126, 6003, 6018, 4998, 4998,
  /* 3276 */ 5199, 5205, 5319, 4998, 4998, 4998, 5853, 3470, 6838, 6029, 6045, 6057, 6163, 6819, 6839, 6056, 6163, 6163,
  /* 3294 */ 6094, 6163, 6263, 6055, 6163, 6107, 6116, 6108, 6095, 6097, 6163, 6163, 6030, 6163, 6102, 6163, 6163, 6163,
  /* 3312 */ 6163, 6109, 6109, 6119, 6116, 6110, 6111, 6111, 6111, 6112, 6119, 6119, 6112, 6119, 6119, 6119, 6119, 6111,
  /* 3330 */ 6114, 6113, 6118, 6113, 6118, 6119, 7040, 6858, 6121, 6124, 6122, 6127, 6126, 6124, 6127, 6128, 6134, 6133,
  /* 3348 */ 6135, 6134, 6130, 6138, 6132, 6137, 6140, 6189, 6023, 6237, 6192, 6705, 6933, 6705, 6705, 6454, 6099, 6063,
  /* 3366 */ 6063, 6050, 6083, 6083, 6083, 6083, 6083, 6083, 6069, 6705, 6705, 6705, 6037, 6705, 6178, 6184, 6069, 6183,
  /* 3384 */ 6183, 6082, 6083, 6083, 6235, 6918, 6192, 6702, 6705, 6230, 6192, 6238, 6088, 6089, 6920, 6233, 6471, 6468,
  /* 3402 */ 6705, 7046, 6231, 6705, 6026, 6705, 6841, 6083, 6160, 6919, 6089, 6089, 6089, 6089, 6920, 6921, 6921, 6705,
  /* 3420 */ 6705, 6829, 6705, 6027, 6708, 6705, 6038, 6091, 6705, 6038, 6705, 6822, 6705, 6149, 6277, 6705, 6915, 7046,
  /* 3438 */ 6231, 6923, 6705, 6928, 6705, 6705, 6705, 6142, 6038, 6705, 6705, 6705, 6038, 6076, 6037, 6063, 6068, 6083,
  /* 3456 */ 6083, 6065, 6705, 6083, 6083, 6083, 6169, 6083, 6921, 6921, 6921, 6079, 6705, 6705, 6705, 6026, 6705, 6705,
  /* 3474 */ 6705, 6027, 6920, 6921, 6079, 6705, 6038, 6705, 6929, 6191, 6705, 6037, 6169, 6083, 6169, 6183, 6541, 6063,
  /* 3492 */ 6541, 6063, 6064, 6083, 6084, 6089, 6169, 6083, 6169, 6541, 6063, 6063, 6083, 6042, 6705, 6705, 6192, 6705,
  /* 3510 */ 6705, 6705, 6073, 6705, 6705, 6711, 6059, 6150, 6083, 6069, 6184, 6169, 6541, 6541, 6064, 6065, 6705, 6705,
  /* 3528 */ 6705, 6042, 6705, 6711, 6705, 6719, 6705, 6705, 6705, 6061, 6085, 6705, 6705, 6705, 6062, 6083, 6069, 6183,
  /* 3546 */ 6063, 6063, 6063, 6083, 6083, 6083, 6705, 6705, 6705, 6070, 6233, 6069, 6541, 6065, 6705, 6039, 6070, 6526,
  /* 3564 */ 6540, 6183, 6541, 6063, 6063, 6064, 6064, 6083, 6065, 6540, 6031, 6705, 6705, 6705, 6222, 6705, 6705, 6541,
  /* 3582 */ 6064, 6065, 6541, 6065, 6541, 6065, 6705, 6187, 6192, 6190, 6051, 6053, 6259, 6051, 6200, 6199, 6243, 6040,
  /* 3600 */ 6195, 6199, 6185, 6203, 6205, 6211, 6051, 6214, 6227, 6196, 6201, 6266, 6228, 6243, 6257, 6252, 6282, 6206,
  /* 3618 */ 6051, 6256, 6253, 6051, 6051, 6051, 6051, 6052, 6067, 6052, 6715, 6265, 6317, 6279, 6267, 6268, 6281, 6310,
  /* 3636 */ 6952, 6284, 6286, 6287, 6285, 6290, 6289, 6292, 6334, 6290, 6290, 6293, 6293, 6290, 6295, 6297, 6296, 6296,
  /* 3654 */ 6296, 6299, 6300, 6341, 6341, 6343, 6342, 6307, 6302, 6304, 6307, 6306, 6306, 6309, 6061, 6082, 6051, 6312,
  /* 3672 */ 6212, 6051, 6314, 6316, 6326, 6328, 6330, 6332, 6336, 6332, 6332, 6338, 6333, 6340, 6345, 6347, 6705, 6705,
  /* 3690 */ 6705, 6074, 6705, 6923, 6705, 6705, 6705, 6076, 6705, 6722, 6705, 7038, 6623, 6705, 6705, 6618, 6705, 6229,
  /* 3708 */ 6705, 6705, 6705, 6082, 6843, 6026, 6460, 6705, 6705, 6043, 6705, 6704, 6236, 6320, 6705, 6705, 6705, 6596,
  /* 3726 */ 6705, 6161, 6704, 6705, 6705, 6060, 6705, 6705, 6825, 6564, 6530, 6359, 6705, 6702, 6149, 6190, 6420, 6807,
  /* 3744 */ 6705, 6715, 6705, 6060, 6915, 6964, 7055, 6705, 6705, 7055, 6361, 7039, 6363, 6364, 6366, 6364, 6364, 6364,
  /* 3762 */ 6364, 6369, 6368, 6369, 6369, 6371, 6369, 6373, 6375, 6376, 6376, 6379, 6376, 6378, 6382, 6382, 6381, 6383,
  /* 3780 */ 6385, 6387, 6386, 6385, 6389, 6389, 6386, 6389, 6390, 6393, 6392, 6395, 6398, 6395, 6396, 6397, 6400, 6402,
  /* 3798 */ 6404, 6705, 6061, 6177, 6705, 6705, 6026, 6826, 6705, 6705, 6049, 6639, 6547, 6705, 6705, 6857, 6705, 6061,
  /* 3816 */ 6620, 6526, 6705, 6705, 6811, 6633, 6424, 6177, 6705, 6705, 6088, 6708, 6427, 6705, 6441, 6929, 6705, 6906,
  /* 3834 */ 6707, 6448, 6705, 6447, 6705, 6705, 6560, 6177, 6705, 6705, 6705, 6088, 6233, 6566, 6705, 6705, 6705, 6104,
  /* 3852 */ 6705, 6751, 6705, 6705, 6705, 6146, 6705, 6705, 6705, 6158, 6931, 6470, 6659, 6224, 6970, 6705, 6705, 6705,
  /* 3870 */ 7061, 6705, 6705, 6705, 6925, 6931, 6465, 6658, 6172, 7035, 7035, 6708, 6705, 6705, 6705, 6183, 6183, 6183,
  /* 3888 */ 6183, 6541, 6063, 6063, 6063, 6063, 6064, 6083, 6083, 6929, 6505, 6705, 6453, 6705, 6640, 6945, 6705, 6705,
  /* 3906 */ 6437, 6432, 6274, 6261, 6478, 6224, 6431, 6705, 6705, 6705, 6161, 6705, 6931, 6275, 6917, 6478, 6224, 6156,
  /* 3924 */ 6705, 6915, 6695, 6705, 6705, 6705, 6218, 6476, 6262, 6172, 7035, 6321, 6705, 6321, 6705, 6705, 6705, 6233,
  /* 3942 */ 6566, 6705, 6705, 6931, 6480, 6273, 6705, 6705, 6705, 6273, 6480, 6705, 6632, 6705, 6191, 6822, 6705, 6705,
  /* 3960 */ 6705, 6915, 6964, 6705, 6705, 6273, 6103, 6631, 6705, 6192, 6705, 6062, 6830, 6233, 6761, 6705, 6705, 6705,
  /* 3978 */ 6818, 6262, 6963, 6192, 6705, 6066, 6087, 6705, 6073, 6705, 6711, 6636, 6070, 6830, 6232, 6273, 6480, 6478,
  /* 3996 */ 6225, 6705, 6705, 6081, 6705, 6411, 6262, 6964, 6705, 6073, 6750, 6072, 6705, 6705, 6525, 6705, 6705, 6483,
  /* 4014 */ 6720, 6705, 6705, 6085, 6705, 6104, 6705, 6718, 6862, 6933, 6933, 6933, 6705, 6705, 6705, 6842, 6091, 6455,
  /* 4032 */ 6626, 6487, 6098, 6491, 6493, 6493, 6493, 6493, 6493, 6493, 6495, 6497, 6496, 6496, 6496, 6496, 6499, 6499,
  /* 4050 */ 6499, 6499, 6500, 6501, 6501, 6503, 6502, 6503, 6504, 6705, 6705, 6092, 6270, 6502, 6501, 6501, 6501, 6501,
  /* 4068 */ 6927, 6234, 6970, 6705, 6705, 6705, 6414, 6488, 6705, 6705, 6031, 6230, 6705, 6928, 6705, 6928, 6705, 6825,
  /* 4086 */ 7036, 6705, 6085, 6705, 6705, 6462, 6705, 6625, 6514, 6352, 6705, 6705, 6192, 6516, 6705, 6705, 6705, 6436,
  /* 4104 */ 6177, 6705, 6705, 6705, 7056, 6520, 6705, 6705, 6409, 6409, 6410, 6705, 6076, 6705, 6705, 6709, 6755, 7079,
  /* 4122 */ 6718, 6070, 6926, 6233, 6233, 6522, 6192, 6705, 6077, 6916, 6705, 6078, 6274, 6262, 6172, 6225, 6705, 6705,
  /* 4140 */ 6705, 6274, 6262, 6963, 6099, 6429, 6705, 6705, 6152, 6720, 6705, 6709, 6509, 6705, 6079, 6420, 6705, 6100,
  /* 4158 */ 6435, 6705, 6705, 6966, 6705, 6705, 6705, 6453, 6154, 6570, 6072, 6705, 6239, 6705, 6705, 6153, 6155, 6439,
  /* 4176 */ 6705, 6705, 6407, 6408, 6705, 6705, 6166, 6705, 6705, 6361, 6705, 6705, 6705, 6473, 6705, 6704, 6705, 6705,
  /* 4194 */ 6705, 6483, 6249, 6085, 6705, 6709, 6717, 6254, 6247, 6535, 6247, 6535, 6466, 6570, 6970, 6705, 6538, 6705,
  /* 4212 */ 6705, 6705, 6484, 6717, 6215, 6209, 6248, 6550, 6466, 6458, 6705, 6705, 6705, 6539, 6705, 6704, 6705, 6060,
  /* 4230 */ 6073, 6705, 6705, 6705, 6963, 6705, 6104, 6929, 6705, 6705, 6705, 7032, 6705, 6705, 6705, 6348, 6933, 6721,
  /* 4248 */ 6216, 6931, 6248, 6550, 6466, 6571, 6705, 6147, 6705, 6893, 6060, 6075, 6705, 6705, 6176, 6192, 6705, 6720,
  /* 4266 */ 6215, 6830, 6233, 6233, 6550, 6466, 6571, 6192, 6705, 6705, 6965, 6926, 6233, 6522, 6705, 6705, 6705, 6529,
  /* 4284 */ 6361, 6705, 6705, 6702, 6705, 6825, 6705, 6705, 6705, 6563, 6249, 6705, 6721, 6070, 6830, 6932, 6549, 6182,
  /* 4302 */ 6223, 6225, 6705, 6705, 6233, 6550, 6467, 6624, 6705, 6705, 6705, 6540, 6183, 6183, 6183, 6063, 6720, 6062,
  /* 4320 */ 6165, 6931, 6412, 6438, 6705, 6149, 6702, 6856, 6070, 6233, 6705, 6705, 6177, 6705, 6031, 6705, 6187, 6705,
  /* 4338 */ 6705, 6705, 6564, 6705, 6720, 6637, 6563, 6704, 6915, 6705, 6705, 6179, 6705, 6705, 6637, 6563, 6249, 6085,
  /* 4356 */ 6705, 6705, 6419, 6072, 6705, 6937, 6705, 6702, 6717, 6830, 6420, 6070, 6233, 6471, 6177, 6705, 6705, 6233,
  /* 4374 */ 6428, 6705, 6177, 6705, 6705, 6273, 6221, 6177, 6705, 6705, 6568, 6705, 6705, 6273, 6705, 6238, 6238, 6705,
  /* 4392 */ 6705, 6568, 6166, 6715, 6192, 6705, 6161, 6963, 6527, 6705, 6705, 6047, 6705, 6705, 6705, 6631, 6705, 6705,
  /* 4410 */ 6631, 6162, 6705, 6624, 6249, 6705, 6705, 6189, 6150, 6149, 6573, 6025, 6705, 6164, 6085, 6245, 6047, 6025,
  /* 4428 */ 6047, 6705, 6167, 6604, 6705, 6190, 6961, 6961, 6703, 6959, 6702, 6575, 6536, 6964, 6960, 6577, 6578, 6578,
  /* 4446 */ 6578, 6578, 6581, 6579, 6583, 6586, 6584, 6592, 6584, 6587, 6590, 6590, 6590, 6590, 6589, 6590, 6588, 6590,
  /* 4464 */ 6594, 6594, 6594, 6594, 6705, 6709, 6615, 6024, 6705, 6705, 6187, 6705, 6827, 6705, 6219, 6428, 6037, 6705,
  /* 4482 */ 6705, 6705, 6606, 6705, 6723, 6705, 6705, 6244, 6232, 6744, 6623, 6705, 6705, 6705, 6924, 6926, 6705, 7070,
  /* 4500 */ 6705, 6803, 6484, 6088, 6705, 6705, 6428, 6072, 6705, 6705, 6705, 6961, 6705, 6705, 6705, 6649, 6705, 6705,
  /* 4518 */ 6705, 6692, 6705, 6705, 6635, 6062, 6143, 6145, 6162, 6430, 6527, 6705, 6713, 6951, 7082, 6144, 6144, 6319,
  /* 4536 */ 6819, 6526, 6969, 6969, 6192, 6705, 6705, 6411, 6705, 6152, 6709, 6615, 6146, 6705, 6197, 6817, 6705, 6207,
  /* 4554 */ 6705, 6705, 6512, 6705, 6825, 6453, 6705, 6705, 6705, 6190, 6705, 6705, 6705, 6191, 6705, 6705, 6705, 6192,
  /* 4572 */ 6540, 6238, 6705, 6705, 6705, 6080, 6456, 6223, 6607, 6705, 6705, 6705, 6641, 6705, 6709, 6550, 6705, 6219,
  /* 4590 */ 6274, 6917, 6705, 6917, 6705, 6705, 6411, 6964, 6705, 6705, 6926, 6246, 6319, 6452, 6624, 6705, 6827, 6705,
  /* 4608 */ 6433, 6037, 6705, 6945, 6705, 6705, 6964, 6645, 6074, 6830, 6151, 6223, 6624, 6705, 6705, 6413, 6705, 6705,
  /* 4626 */ 6713, 6041, 6826, 6246, 6319, 6597, 6705, 6219, 6451, 6177, 6436, 6177, 6436, 6177, 6150, 6319, 6624, 6705,
  /* 4644 */ 6705, 6319, 6705, 6705, 6705, 6704, 6413, 6705, 6711, 6828, 6151, 6647, 6146, 6705, 6705, 6428, 6705, 6705,
  /* 4662 */ 6705, 6553, 6273, 6705, 6705, 6273, 6104, 6705, 6705, 6031, 6705, 6964, 6705, 6928, 6825, 6830, 7067, 6652,
  /* 4680 */ 6624, 6705, 6654, 6705, 6705, 6705, 6711, 6928, 6705, 6705, 6656, 6705, 6080, 6081, 6727, 6664, 6670, 6666,
  /* 4698 */ 6670, 6670, 6669, 6670, 6670, 6667, 6670, 6671, 6671, 6672, 6674, 6676, 6675, 6675, 6675, 6678, 6679, 6679,
  /* 4716 */ 6681, 6680, 6681, 6679, 6679, 6679, 6683, 6686, 6686, 6685, 6684, 6688, 6686, 6688, 6688, 6685, 6688, 6689,
  /* 4734 */ 6705, 6688, 6688, 6688, 6688, 6720, 6187, 6705, 6705, 6434, 6624, 6726, 6705, 6705, 6230, 6705, 6705, 6705,
  /* 4752 */ 6715, 6705, 6934, 6694, 6705, 6705, 6443, 6708, 6901, 6624, 6697, 6705, 6221, 6621, 6705, 6705, 6698, 6701,
  /* 4770 */ 6250, 6705, 6705, 6460, 6963, 6705, 6946, 6725, 6705, 6233, 6238, 6705, 6238, 6705, 6705, 6238, 6705, 6705,
  /* 4788 */ 6730, 6705, 6239, 6705, 6814, 6705, 6732, 6357, 6705, 6249, 6146, 6717, 6074, 6926, 6246, 6456, 6223, 6735,
  /* 4806 */ 6733, 6072, 6705, 6249, 6705, 6705, 6705, 6407, 6705, 6705, 6826, 6931, 6237, 6237, 6607, 6705, 6705, 6461,
  /* 4824 */ 7054, 6249, 6505, 6190, 6026, 6705, 6705, 6463, 6609, 6738, 6557, 6705, 6705, 6483, 6705, 6705, 6705, 6709,
  /* 4842 */ 6153, 6105, 6705, 6105, 6705, 6269, 6220, 6182, 6031, 6705, 6217, 6558, 6478, 6422, 6926, 6736, 6558, 6478,
  /* 4860 */ 6422, 6741, 6705, 6705, 6822, 6705, 6705, 6508, 6192, 6705, 6705, 7044, 6705, 6705, 6705, 6719, 6705, 6705,
  /* 4878 */ 6705, 7060, 6705, 6705, 6705, 6717, 6207, 6964, 6697, 6823, 6709, 6746, 6543, 6276, 6481, 6422, 6705, 6705,
  /* 4896 */ 6705, 6718, 6070, 6926, 6705, 6709, 6746, 7043, 6545, 6917, 6421, 6072, 6705, 6705, 6705, 6230, 6192, 6824,
  /* 4914 */ 6705, 6705, 6705, 6722, 6705, 6705, 6221, 6526, 6072, 6705, 6273, 6249, 6104, 6975, 6976, 6976, 6979, 6976,
  /* 4932 */ 6981, 6976, 6980, 6977, 6982, 6984, 6992, 6215, 6826, 6756, 6569, 6561, 6705, 6709, 6042, 6705, 6705, 6705,
  /* 4950 */ 6720, 6042, 6748, 6062, 6759, 6561, 6748, 6062, 6750, 6526, 6705, 6705, 7036, 6705, 6318, 6822, 6923, 6070,
  /* 4968 */ 6072, 6705, 6705, 6518, 6705, 6071, 6705, 6705, 6705, 6748, 6215, 6826, 6070, 7047, 6705, 6705, 6540, 6540,
  /* 4986 */ 6540, 6042, 6705, 6945, 6705, 6060, 6705, 6079, 6720, 6705, 6711, 6151, 6705, 6705, 6705, 6705, 6031, 6705,
  /* 5004 */ 6031, 6705, 6705, 6361, 6763, 6260, 6973, 6705, 6350, 6705, 6705, 6038, 6705, 6705, 6238, 6483, 6191, 6766,
  /* 5022 */ 6705, 6705, 6766, 6944, 6705, 6705, 6192, 6544, 6548, 6912, 6485, 6415, 6416, 6416, 6416, 6416, 6769, 6768,
  /* 5040 */ 6417, 6771, 6775, 6777, 6772, 6773, 6779, 6782, 6780, 6786, 6784, 6784, 6784, 6784, 6780, 6781, 6784, 6788,
  /* 5058 */ 6788, 6790, 6789, 6788, 6792, 6792, 6792, 6789, 6792, 6792, 6792, 6793, 6796, 6795, 6705, 6705, 6705, 6753,
  /* 5076 */ 6711, 6798, 6764, 6505, 6705, 6911, 6705, 6715, 6718, 6854, 6453, 6705, 6709, 6933, 6705, 6709, 6039, 6070,
  /* 5094 */ 6844, 6561, 6705, 6705, 6705, 6742, 6808, 6705, 6705, 6705, 6825, 6705, 6705, 6802, 6705, 6805, 6705, 6810,
  /* 5112 */ 6813, 6705, 6354, 6705, 6933, 6704, 6705, 6705, 6086, 6816, 6705, 6705, 6540, 6705, 6540, 6705, 6705, 6836,
  /* 5130 */ 6705, 6411, 6705, 6705, 6705, 6411, 6262, 6705, 6837, 6705, 6705, 6705, 6834, 6061, 6542, 6931, 6549, 6506,
  /* 5148 */ 6571, 6705, 6149, 6705, 6705, 6705, 6931, 6476, 6754, 6104, 6146, 6705, 6705, 6705, 6705, 6800, 6705, 6411,
  /* 5166 */ 7032, 6705, 6705, 6928, 6469, 6705, 6088, 6489, 6847, 7068, 6705, 6705, 6556, 6555, 6244, 6232, 6848, 7069,
  /* 5184 */ 6705, 6630, 6705, 6629, 6705, 6705, 6705, 6915, 6705, 6705, 6742, 6549, 6945, 6705, 6705, 6218, 6705, 6088,
  /* 5202 */ 6705, 6961, 6705, 6091, 6192, 6915, 6705, 6425, 6822, 6705, 6406, 6705, 6806, 6082, 6232, 6744, 6623, 6629,
  /* 5220 */ 6705, 6629, 6705, 6429, 6705, 6705, 6173, 6705, 6449, 6705, 6705, 6929, 7045, 6191, 6916, 6705, 6705, 6601,
  /* 5238 */ 6705, 6705, 6755, 6743, 6531, 6843, 6743, 6531, 6624, 6705, 6705, 6705, 6720, 6705, 6798, 6505, 6073, 6846,
  /* 5256 */ 6744, 6623, 6038, 6474, 6505, 6705, 6436, 6436, 6436, 6705, 6547, 6623, 6705, 6705, 6623, 6705, 6705, 6705,
  /* 5274 */ 7037, 6945, 6705, 6436, 6704, 6705, 6705, 6821, 6705, 6705, 6624, 6191, 6850, 6624, 6705, 6705, 6624, 6705,
  /* 5292 */ 7037, 6623, 6705, 6705, 6643, 6705, 6038, 6505, 6705, 6705, 6645, 6074, 6926, 6246, 6705, 6822, 6822, 6822,
  /* 5310 */ 6661, 6728, 6662, 6038, 6705, 6705, 6631, 6933, 6183, 6822, 6705, 6705, 6705, 6923, 6705, 6273, 6929, 6483,
  /* 5328 */ 6191, 6705, 6705, 6657, 6705, 6705, 7061, 6705, 6705, 6852, 7061, 6705, 6631, 6624, 6705, 7060, 6624, 7060,
  /* 5346 */ 6624, 6624, 6624, 6624, 6523, 6523, 6523, 6523, 6523, 6624, 6705, 6705, 6690, 6705, 6705, 6705, 6828, 6705,
  /* 5364 */ 6445, 6708, 6705, 6061, 6822, 6705, 6046, 6705, 6961, 6230, 6088, 6705, 6705, 6705, 6928, 6273, 6058, 6104,
  /* 5382 */ 6705, 6705, 6705, 7046, 6149, 6822, 6705, 6705, 6699, 6705, 6038, 6511, 6510, 6861, 6511, 6860, 6864, 6240,
  /* 5400 */ 6866, 6322, 6240, 6868, 6240, 6241, 6866, 6323, 6868, 6324, 7048, 7049, 6870, 6870, 6872, 6876, 6876, 6879,
  /* 5418 */ 6880, 6874, 6878, 6882, 6875, 6876, 6876, 6876, 6884, 6887, 6885, 6885, 6885, 6885, 6886, 6885, 6889, 6890,
  /* 5436 */ 6892, 6718, 6854, 6559, 6526, 6624, 6705, 6705, 6705, 6946, 6705, 6705, 6895, 6705, 6705, 6705, 6933, 6705,
  /* 5454 */ 6428, 6705, 6898, 6705, 6706, 6705, 6900, 6705, 6903, 6705, 6905, 6705, 6705, 6704, 6827, 6037, 6705, 6908,
  /* 5472 */ 6910, 6705, 6457, 6705, 6505, 6551, 6624, 6705, 6076, 6037, 6705, 6091, 6048, 6909, 6705, 6705, 6705, 7060,
  /* 5490 */ 6624, 6705, 6705, 6914, 6705, 6705, 6705, 6944, 6173, 6705, 7026, 7028, 6705, 6458, 6705, 6705, 6027, 7027,
  /* 5508 */ 6705, 6705, 7027, 6705, 6936, 6104, 6705, 6929, 6929, 6705, 6757, 6705, 6473, 6705, 6705, 6061, 6930, 6182,
  /* 5526 */ 6617, 6705, 6705, 6705, 6945, 6048, 6638, 6433, 6616, 6547, 6939, 6941, 6192, 6705, 6943, 6705, 6705, 6705,
  /* 5544 */ 6948, 6705, 6967, 6177, 6705, 6968, 6705, 6717, 6749, 6237, 7035, 6607, 7035, 6453, 6705, 6705, 6705, 7079,
  /* 5562 */ 6636, 7041, 6180, 6705, 6833, 6705, 6705, 6073, 6743, 6637, 7042, 6433, 6271, 6223, 6225, 6709, 6950, 6637,
  /* 5580 */ 7042, 6181, 6170, 7029, 6705, 6705, 6436, 6704, 6929, 6411, 6704, 6705, 6505, 6705, 6705, 6705, 6702, 6705,
  /* 5598 */ 6060, 6636, 7041, 6830, 6547, 6182, 6223, 6717, 6749, 6753, 6705, 6705, 6705, 7023, 6820, 6705, 6705, 6705,
  /* 5616 */ 6964, 6705, 6705, 6705, 6269, 6180, 6182, 6223, 6192, 6705, 6564, 6705, 6705, 6091, 6739, 6705, 6833, 6705,
  /* 5634 */ 6073, 6272, 6705, 6705, 6709, 6950, 6637, 6954, 6319, 6945, 6705, 6705, 6705, 7081, 6563, 6412, 6320, 6705,
  /* 5652 */ 6946, 6705, 6042, 6705, 6711, 6945, 6637, 6076, 6705, 6705, 6709, 6244, 6718, 6074, 6091, 6705, 6476, 6705,
  /* 5670 */ 6705, 6548, 6273, 6798, 6705, 6230, 6705, 6477, 6705, 6705, 6061, 6800, 6705, 6720, 6637, 6076, 6705, 6037,
  /* 5688 */ 6842, 6091, 6037, 6705, 6825, 6705, 6705, 6825, 6075, 6705, 6705, 6038, 6076, 6705, 6705, 6709, 6716, 6842,
  /* 5706 */ 6091, 6705, 6705, 6705, 7031, 6825, 6091, 6705, 6705, 6709, 6717, 6215, 6929, 6705, 6705, 6825, 6830, 6237,
  /* 5724 */ 6621, 6705, 6705, 7032, 6705, 6705, 6923, 6964, 6411, 6705, 6831, 6705, 6540, 6705, 6705, 6705, 6713, 6717,
  /* 5742 */ 6074, 6188, 6958, 7032, 6711, 6718, 6832, 6104, 6411, 6972, 7033, 6705, 6552, 6705, 6705, 6148, 6705, 6622,
  /* 5760 */ 6435, 6533, 6428, 6945, 6705, 6705, 6705, 6505, 6230, 6532, 6546, 6428, 6174, 6985, 6986, 6994, 6996, 6987,
  /* 5778 */ 7001, 7001, 6988, 6998, 6989, 7003, 6990, 7002, 7001, 7001, 7000, 7001, 7005, 7007, 7009, 7007, 7007, 7010,
  /* 5796 */ 7008, 7007, 7009, 7008, 7011, 7014, 7011, 7011, 7016, 7012, 7014, 7018, 7019, 7021, 6705, 6705, 6709, 6950,
  /* 5814 */ 7064, 7066, 6705, 6712, 6705, 6705, 6705, 7034, 6705, 6705, 6705, 6351, 6190, 6705, 7025, 6705, 6599, 6453,
  /* 5832 */ 6705, 6191, 6915, 6705, 6193, 6703, 6320, 6705, 7051, 7053, 6705, 6610, 6192, 6705, 6563, 6221, 6177, 6896,
  /* 5850 */ 6072, 6705, 6705, 6709, 7080, 6637, 6090, 6927, 6234, 6032, 6034, 6036, 6705, 6612, 6602, 6705, 6705, 6033,
  /* 5868 */ 6035, 6037, 6705, 6614, 6550, 6192, 6032, 7059, 6705, 7058, 6705, 6705, 7058, 6705, 6628, 6705, 6705, 6356,
  /* 5886 */ 6705, 6234, 6477, 6705, 6705, 6715, 6720, 6705, 6945, 6705, 6825, 6624, 6705, 6705, 7079, 7063, 7065, 6650,
  /* 5904 */ 7066, 6752, 6037, 6705, 6705, 6031, 6705, 6818, 6705, 6705, 6436, 6702, 6705, 6705, 6705, 6961, 6171, 6709,
  /* 5922 */ 6950, 6637, 6208, 6232, 6547, 6631, 6436, 6705, 6705, 6705, 6459, 6915, 6718, 6070, 6830, 6232, 6547, 6962,
  /* 5940 */ 6705, 6705, 6705, 7037, 6705, 6547, 6037, 6705, 6705, 6718, 6753, 6705, 6705, 7080, 6637, 6165, 6165, 6922,
  /* 5958 */ 6564, 7072, 6705, 6705, 6944, 6705, 6825, 6956, 6705, 6705, 6705, 7080, 6070, 7043, 7074, 7043, 6928, 6705,
  /* 5976 */ 6705, 6719, 6929, 6042, 6711, 6705, 6705, 6720, 6070, 6233, 6705, 6711, 7081, 6165, 6923, 6720, 6042, 6705,
  /* 5994 */ 6705, 6720, 6705, 6705, 6709, 6705, 6705, 6710, 7078, 7078, 7078, 7076, 7077, 6709, 7078, 6709, 6710, 7078,
  /* 6012 */ 6713, 6714, 7076, 7076, 7076, 7076, 6714, 6705, 6705, 6705, 7054, 8, 262144, 0x80000000, 8, 0, -1610612736,
  /* 6029 */ 8388864, 8390656, 8388608, 0, 15, 208, 15360, 1245184, 16777216, 0, 16, 32, 4, 64, 0, 24, 541065216,
  /* 6046 */ 4194304, 1048576, 0, 31, 64, 32, 32, 56, 4195104, 75497472, 1082130432, 1082130432, 8388608, 4, 256, 0, 32,
  /* 6063 */ 64, 64, 96, 0, 33, 32, 96, 64, 128, -1073741824, 0, 64, 256, 256, 512, 0x80000000, 2048, 0, 65, 0, 96, 96,
  /* 6085 */ 128, 0, 97, 0, 128, 128, 512, 0, 160, 8392448, 8390656, 553725952, 16928768, 8388608, 16392, 0, 384,
  /* 6102 */ 16814096, 8388608, 65536, 0, 416, 75497472, 1484783616, 1484783616, 1551892480, 343932928, 343932928,
  /* 6113 */ 1551892480, 478150656, 343932928, 478150656, 1484783616, 478150656, 1551892480, 1551892480, 8914944,
  /* 6122 */ 1082654720, 8388704, 8388672, 8913152, 1082130496, 8388672, 8388672, 8392512, 8392544, 1551892576,
  /* 6132 */ 1551892544, 1552416768, 8392544, 8392544, 75501408, 1551892544, 1551892544, 75501408, 478154592, 478154592,
  /* 6142 */ 1536, 1792, 2048, 28672, 262144, 0, 928, 0, 1024, 12288, 262144, 4, 31976, 8290304, 134217728, 0x80000000,
  /* 6158 */ 8192, 16781312, 96, 1048576, 4194304, 8388608, 8388608, 128, 1024, 0, 185, 64, 524288, 4194304, 16777216,
  /* 6173 */ 33554432, 33554432, 262400, 4096, 536870912, 0, 1536, 1024, 65536, 262144, 524288, 524288, 96, 160, 0,
  /* 6188 */ 536870912, 2, 4, 0, 0x80000000, 0, -2143289344, -2147352576, 32, 97, 258048, 33, 40, 33, 33, 1056, 1048608,
  /* 6205 */ 2097184, 4194336, 32, 128, 3072, 12288, 536870944, 32, 160, 524320, 32, 192, 1024, 98304, 0, 2048, 32768,
  /* 6222 */ 2097152, 4194304, 33554432, 67108864, 0x80000000, -2147352576, 40, 48, 0, 4096, 4096, 8192, 32768, 262144,
  /* 6236 */ 1048576, 1048576, 2097152, 0, -1073741824, -1073741824, -1073741696, 1120, 96, 256, 2048, 12288, 16384,
  /* 6249 */ 32768, 0, 737, 2097184, 2097184, 32, 3264, 6292512, 4195360, 6291488, 6292512, 32, 65536, 2097152, 8388608,
  /* 6264 */ 8388736, 4196128, 34, 34, 1056, 32, 512, 131072, 786432, 0, 8192, 49152, 65536, 524288, 4227072, 32,
  /* 6280 */ 327155712, 1056, 4194336, 4194336, -322860376, -322859360, -322860375, -322860376, -322860376, -322859360,
  /* 6290 */ -322859352, -322859352, -322860375, -322859351, -322859352, -322859350, -1396439968, -1396439968,
  /* 6298 */ -322859350, -1396437280, -1396437280, -322695456, -1394339992, -322597152, -322597144, -321548576,
  /* 6306 */ -321548568, -322597144, -322597152, -322597144, 32, 2098208, 168, 40, 41, 224, 1256, 42, 32, 262144,
  /* 6320 */ 4194304, 536870912, -1073741824, -1073740800, -1073741824, -1069547520, 43, 106, 293609515, 293625899,
  /* 6330 */ 293724203, -322859352, 293726779, 293726779, -321810776, -322859352, 293726779, 293726843, -322859480,
  /* 6339 */ -322859352, -322597144, -322597144, -322597143, -322597144, -1394340000, -321548568, -37720533, -37458325,
  /* 6348 */ 0, 8320, 318767104, 0, 9616, 134512640, 0, 285212672, 0, 486539264, -1073741824, 4202496, 4194304, 32,
  /* 6362 */ 536870912, 577767552, -1073676221, -1073676221, -1073676217, -1073676221, -989790141, 577833091, 577833091,
  /* 6371 */ 577968259, 577833091, -1569650557, -1569650553, -495908733, -495908669, -495908669, -227473213, 577841287,
  /* 6380 */ -495908669, -227473209, -227473213, -227473213, -495908669, -269359104, -268834816, -269359104, -269359104,
  /* 6389 */ -268834816, -268834816, -268834236, -269359037, -268834220, -268834220, -268572076, -268572076, -268834749,
  /* 6398 */ -268572076, -268571948, -268834749, -923453, -399165, -399165, -268834217, -398633, 4202496, 0, 32232, 0,
  /* 6410 */ 32237, 0, 32768, 3145728, 0, 36864, 16385, 16385, 24577, 3, 65536, 16777216, 469762048, -1073741824,
  /* 6424 */ 7542784, 0, 53248, 7415808, 0, 65536, 33554432, 134217728, -536870912, 2048, 65536, 201326592, 0, 16384,
  /* 6438 */ 4194304, 805306368, -1073741824, 0, 301989888, 15853568, 251658240, 16377856, 251658240, 0, 520093696, 0,
  /* 6450 */ 98304, 3145728, 33554432, 268435456, 0, 1040, 16384, 262144, 131072, 0, 1280, 0, 1296, 0, 1321, 114688,
  /* 6466 */ 524288, 7340032, 805306368, 0, 114688, 3145728, 4194304, 0, 268435456, 65536, 49152, 524288, 8388608,
  /* 6479 */ 16777216, 49152, 2097152, 16777216, 0, 1073741824, 32768, 1073742112, 16392, 33619968, 0, 147456,
  /* 6491 */ 1610612768, -2143010807, 134217984, 134217984, 134219024, -2059124728, -2059124728, 134522256, -2008792824,
  /* 6500 */ -2008792824, -125895443, -125895443, -125895187, -125895187, 0, 262144, 7340032, 16393, 4456448, 0, 262148,
  /* 6512 */ 0, 294912, 88342528, 0x80000000, 138674176, 0x80000000, 16648, 16648, 947814400, -1073741824, 262144,
  /* 6523 */ 1073741824, 1073741824, 256, 134217728, 268435456, 536870912, 1, 4, 1048576, 201326592, 4224, 4224, 163840,
  /* 6536 */ 262144, 33570817, 3520, 3520, 0, 524288, 64, 1024, 32768, 32768, 65536, 65536, 131072, 32768, 131072,
  /* 6551 */ 262144, 294912, 0, 1408, 3328, 3328, 0, 655360, 2097152, 67108864, 268435456, -1073741824, 128, 8192,
  /* 6565 */ 65536, 2097152, 536870912, 8192, 2097152, 134217728, 805306368, 1073741824, 1024, 131200, 33570816,
  /* 6576 */ 33570816, 33570825, 411042080, 411042080, 415236384, 411042084, 411042080, 176177209, 178798649, 178929849,
  /* 6586 */ 415498528, 178798649, 444612905, -1702869719, 444612905, 444612905, 178798905, 178798649, -87785617,
  /* 6595 */ -87785617, 16384, 33554432, 1073741824, 288, 142606336, 57, 176160768, -268435456, 2768896, 313, 297,
  /* 6607 */ 268435456, 1073741824, -1879048192, 0, 1114112, 1903, 4487168, 1, 8, 131072, 4980736, 0, 786496, 256,
  /* 6621 */ 8388608, 67108864, 201326592, 1073741824, 0, 16392, 303232, 2621440, 0, 1572864, 0, 2097152, 33554432,
  /* 6634 */ 536870912, 3, 12, 16, 64, 1920, 2048, 2097152, 12582912, 256, 268435456, 3, 4, 2, 12288, 2, 8192, 196608,
  /* 6652 */ 2097152, 268435456, 537133056, 268435456, 537133056, 0, 3145728, 12582912, 16777216, 65, 524288, 33554434,
  /* 6664 */ -2147479552, 134742272, 75629216, 77726368, 344064672, 1149371040, 75629216, 75629216, 75631264, 75694752,
  /* 6674 */ 75629281, 143262464, 143262464, 1149371105, 210371456, 210371488, 210371488, 210373536, 210371488,
  /* 6683 */ 210437024, -575961103, -575961103, -575957007, -575961103, -575957007, -575957007, 0, 3670016, 2, 33554432,
  /* 6694 */ 8519680, 67108864, 536870912, 0, 335544320, 0, 3751936, 8585216, 0, 4194304, 4194304, 0, 0, -536870912,
  /* 6708 */ -536870912, 0, 1, 0, 2, 0, 3, 0, 4, 4, 8, 16, 0, 8, 32, 0, 9, 9043968, 0, 4210688, 524288, 1073741824, 896,
  /* 6731 */ 201326592, 2033, 11239424, 486539264, 2033, 4096, 98304, 225, 0, 4227072, 1, 64, 8192, 229376, 1048576, 48,
  /* 6747 */ 448, 1, 16, 128, 4096, 196608, 1048576, 268435456, 96, 4096, 32768, 4194304, 128, 134217728, 131072,
  /* 6762 */ 33554432, 268435472, 96, 65536, 0, 536870914, 16481, 16417, 16385, 118785, 118913, 119425, -2147364735,
  /* 6775 */ 155649, 118913, 119425, 118913, 16896641, 577537, 53249, 53249, 53281, 577537, 577537, 53345, 53281,
  /* 6788 */ 1276375137, 1276375393, 1276375137, 1276375137, 1276375393, 1276375393, 1276899425, 1276375393, 1276899681,
  /* 6797 */ 1276899681, 16, 268435456, 256, 1073741824, 118784, 0, 4456448, 129, 0, 5251072, 0, 24576, 155648, 0,
  /* 6812 */ 7342080, 119296, 0, 7407616, 258304, 1276116992, 0, 8388608, 33554432, 0x80000000, 524288, 0, 192, 0, 256,
  /* 6827 */ 1024, 4, 1024, 1024, 2048, 64, 768, 0, 292, 0, 1276641280, 0, 8388736, 5242880, 2, 16, 256, 4096,
  /* 6845 */ 134217728, 256, 8192, 245760, 1048576, 131072, 201326592, 2097152, 1073741824, 128, 1048576, 271581184, 0,
  /* 6858 */ 8912896, 4194368, 271581184, 262148, 16, 303232, 67109632, 786500, -1073741816, -1073741824, -1073676288,
  /* 6869 */ -1073741824, 786532, 786532, 1611415620, 1611415620, -1072955324, 1611416644, -536068028, -536068028,
  /* 6878 */ -1072889788, -1072955324, -1072955324, -1072954300, -1072955324, -536068028, -531873724, -967897121,
  /* 6886 */ -967897121, -951119905, -951119905, -431009825, -431009825, -967897121, -431009825, 0, 9109504, 786528, 0,
  /* 6897 */ 9502720, 802880, 1610612736, 787520, 0, 10616832, 803904, 852032, 4997184, -536870912, 16640000, 31,
  /* 6909 */ 38735808, -1006632960, 0, 14680064, 8196, 55513024, 0, 16777216, 524288, 2097152, 2097152, 128, 2048, 2048,
  /* 6923 */ 4096, 0, 497, 512, 1024, 8192, 0, 512, 2048, 8192, 16384, 0, 672, 8192, 8388608, 536870912, 4980736,
  /* 6940 */ 33554432, 67108864, 1073741824, 21757952, 0, 33554432, 0, 768, 16384, 536870912, 2, 12, 32, 4457568, 896,
  /* 6955 */ 65536, 512, 16777216, 603979776, 0, 33570816, 0, 1048576, 16777216, 67108864, 0, 16648, 0, 18432,
  /* 6969 */ 536870912, 1073741824, 0x80000000, 67108868, 262144, 268435456, -2146369536, 1610612752, 1610612752,
  /* 6978 */ 1610612754, 1610620944, 1610612752, 1677721616, 1610612752, 1610614800, 1677721620, 1610616976,
  /* 6986 */ -2143731200, -2143731200, -527368176, -535756784, -535756784, -535754736, -2143748096, -2143748096,
  /* 6994 */ -2143731184, -2139536896, -2135342592, -2143731200, -535756784, -468647920, -460259312, -527368176,
  /* 7002 */ -527368176, -460259312, -535756782, -460259312, -460259308, 18037983, 18037983, 85146847, 18037983,
  /* 7011 */ 353582303, 353582303, 1628650719, 1695759583, 353582303, -1793901345, 353582303, 1695759583, -443335457,
  /* 7020 */ -443335457, 1964195039, -174900001, 16, 1073741824, 144, 0, 38752192, -469762048, 0, 20971520, 3735552, 0,
  /* 7033 */ 67108864, 32768, 67108864, 134217728, 0, 131072, 1048576, 8912896, 64, 896, 1024, 4096, 0x80000000,
  /* 7046 */ 16777216, 4096, -1073741824, 786532, -1073741808, 528, 7946240, 12140544, 0, 83886080, 0, 31981, 15,
  /* 7059 */ 9633792, 0, 134217728, 1073741824, 12, 80, 128, 7168, 8192, 1048576, 1275068416, 0, 2637824, 131072,
  /* 7073 */ 16777216, 8192, 16777216, 3, 3, 1, 1, 2, 8, 64, 1792
];

XQueryParser.TOKEN =
[
  "(0)",
  "PragmaContents",
  "DirCommentContents",
  "DirPIContents",
  "CDataSection",
  "Wildcard",
  "EQName",
  "URILiteral",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "NCName",
  "QName",
  "StringConstructorChars",
  "S",
  "S",
  "CharRef",
  "CommentContents",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'=>'",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "']``'",
  "'``['",
  "'`{'",
  "'after'",
  "'all'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'any'",
  "'append'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'break'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'check'",
  "'child'",
  "'collation'",
  "'collection'",
  "'comment'",
  "'constraint'",
  "'construction'",
  "'contains'",
  "'content'",
  "'context'",
  "'continue'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'diacritics'",
  "'different'",
  "'digit'",
  "'distance'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'entire'",
  "'eq'",
  "'every'",
  "'exactly'",
  "'except'",
  "'exit'",
  "'external'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'foreach'",
  "'foreign'",
  "'from'",
  "'ft-option'",
  "'ftand'",
  "'ftnot'",
  "'ftor'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'index'",
  "'infinity'",
  "'inherit'",
  "'insensitive'",
  "'insert'",
  "'instance'",
  "'integrity'",
  "'intersect'",
  "'into'",
  "'is'",
  "'item'",
  "'json'",
  "'json-item'",
  "'key'",
  "'language'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'levels'",
  "'loop'",
  "'lowercase'",
  "'lt'",
  "'map'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'most'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'not'",
  "'object'",
  "'occurs'",
  "'of'",
  "'on'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'paragraph'",
  "'paragraphs'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'phrase'",
  "'position'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'relationship'",
  "'rename'",
  "'replace'",
  "'return'",
  "'returning'",
  "'revalidation'",
  "'same'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'self'",
  "'sensitive'",
  "'sentence'",
  "'sentences'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'stemming'",
  "'stop'",
  "'strict'",
  "'strip'",
  "'structured-item'",
  "'switch'",
  "'text'",
  "'then'",
  "'thesaurus'",
  "'times'",
  "'to'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unique'",
  "'unordered'",
  "'updating'",
  "'uppercase'",
  "'using'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'weight'",
  "'when'",
  "'where'",
  "'while'",
  "'wildcards'",
  "'window'",
  "'with'",
  "'without'",
  "'word'",
  "'words'",
  "'xquery'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'{|'",
  "'|'",
  "'||'",
  "'|}'",
  "'}'",
  "'}`'",
  "'}}'"
];

                                                            // line 1230 "XQueryParser.ebnf"
                                                            });
                                                            // line 34952 "XQueryParser.js"
// End
